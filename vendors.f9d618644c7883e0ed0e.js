(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{"+tJ4":function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(t){return function(n){for(var e=0,r=t.length;e<r&&!n.closed;e++)n.next(t[e]);n.complete()}}},"+umK":function(t,n,e){"use strict";function r(){}e.d(n,"a",(function(){return r}))},"/21U":function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=e("isby");function i(t){return!Object(r.a)(t)&&t-parseFloat(t)+1>=0}},"/WYv":function(t,n,e){"use strict";function r(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}e.d(n,"a",(function(){return r}))},"0/uQ":function(t,n,e){"use strict";e.d(n,"a",(function(){return u}));var r=e("6blF"),i=e("Fxb1"),o=e("i4X3");function u(t,n){return n?Object(o.a)(t,n):t instanceof r.a?t:new r.a(Object(i.a)(t))}},"1fDf":function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=e("FFOo");function i(t){for(;t;){var n=t,e=n.closed,i=n.destination,o=n.isStopped;if(e||o)return!1;t=i&&i instanceof r.a?i:null}return!0}},"26FU":function(t,n,e){"use strict";e.d(n,"a",(function(){return u}));var r=e("mrSG"),i=e("K9Ia"),o=e("8g8A"),u=function(t){function n(n){var e=t.call(this)||this;return e._value=n,e}return r.a(n,t),Object.defineProperty(n.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),n.prototype._subscribe=function(n){var e=t.prototype._subscribe.call(this,n);return e&&!e.closed&&n.next(this._value),e},n.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new o.a;return this._value},n.prototype.next=function(n){t.prototype.next.call(this,this._value=n)},n}(i.a)},"2Bdj":function(t,n,e){"use strict";function r(t){return"function"==typeof t}e.d(n,"a",(function(){return r}))},"2ePl":function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t}},"3U0i":function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(){function t(){return Error.call(this),this.message="Timeout has occurred",this.name="TimeoutError",this}return t.prototype=Object.create(Error.prototype),t}()},"3fWJ":function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(){function t(){return Error.call(this),this.message="no elements in sequence",this.name="EmptyError",this}return t.prototype=Object.create(Error.prototype),t}()},"60iU":function(t,n,e){"use strict";e.d(n,"b",(function(){return r})),e.d(n,"a",(function(){return c}));var r,i=e("G5J1"),o=e("F/XL"),u=e("XlPw");r||(r={});var c=function(){function t(t,n,e){this.kind=t,this.value=n,this.error=e,this.hasValue="N"===t}return t.prototype.observe=function(t){switch(this.kind){case"N":return t.next&&t.next(this.value);case"E":return t.error&&t.error(this.error);case"C":return t.complete&&t.complete()}},t.prototype.do=function(t,n,e){switch(this.kind){case"N":return t&&t(this.value);case"E":return n&&n(this.error);case"C":return e&&e()}},t.prototype.accept=function(t,n,e){return t&&"function"==typeof t.next?this.observe(t):this.do(t,n,e)},t.prototype.toObservable=function(){switch(this.kind){case"N":return Object(o.a)(this.value);case"E":return Object(u.a)(this.error);case"C":return Object(i.b)()}throw new Error("unexpected notification kind value")},t.createNext=function(n){return void 0!==n?new t("N",n):t.undefinedValueNotification},t.createError=function(n){return new t("E",void 0,n)},t.createComplete=function(){return t.completeNotification},t.completeNotification=new t("C"),t.undefinedValueNotification=new t("N",void 0),t}()},"67Y/":function(t,n,e){"use strict";e.d(n,"a",(function(){return o}));var r=e("mrSG"),i=e("FFOo");function o(t,n){return function(e){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return e.lift(new u(t,n))}}var u=function(){function t(t,n){this.project=t,this.thisArg=n}return t.prototype.call=function(t,n){return n.subscribe(new c(t,this.project,this.thisArg))},t}(),c=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.project=e,i.count=0,i.thisArg=r||i,i}return r.a(n,t),n.prototype._next=function(t){var n;try{n=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(i.a)},"6ahw":function(t,n,e){"use strict";e.d(n,"a",(function(){return o}));var r=e("iLxQ"),i=e("DKTb"),o={closed:!0,next:function(t){},error:function(t){if(r.a.useDeprecatedSynchronousErrorHandling)throw t;Object(i.a)(t)},complete:function(){}}},"6blF":function(t,n,e){"use strict";e.d(n,"a",(function(){return f}));var r=e("1fDf"),i=e("FFOo"),o=e("L/V9"),u=e("6ahw");var c=e("xTla"),a=e("y3By"),s=e("iLxQ"),f=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(n){var e=new t;return e.source=this,e.operator=n,e},t.prototype.subscribe=function(t,n,e){var r=this.operator,c=function(t,n,e){if(t){if(t instanceof i.a)return t;if(t[o.a])return t[o.a]()}return t||n||e?new i.a(t,n,e):new i.a(u.a)}(t,n,e);if(r?c.add(r.call(c,this.source)):c.add(this.source||s.a.useDeprecatedSynchronousErrorHandling&&!c.syncErrorThrowable?this._subscribe(c):this._trySubscribe(c)),s.a.useDeprecatedSynchronousErrorHandling&&c.syncErrorThrowable&&(c.syncErrorThrowable=!1,c.syncErrorThrown))throw c.syncErrorValue;return c},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){s.a.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=n),Object(r.a)(t)?t.error(n):console.warn(n)}},t.prototype.forEach=function(t,n){var e=this;return new(n=l(n))((function(n,r){var i;i=e.subscribe((function(n){try{t(n)}catch(t){r(t),i&&i.unsubscribe()}}),r,n)}))},t.prototype._subscribe=function(t){var n=this.source;return n&&n.subscribe(t)},t.prototype[c.a]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return 0===t.length?this:Object(a.b)(t)(this)},t.prototype.toPromise=function(t){var n=this;return new(t=l(t))((function(t,e){var r;n.subscribe((function(t){return r=t}),(function(t){return e(t)}),(function(){return t(r)}))}))},t.create=function(n){return new t(n)},t}();function l(t){if(t||(t=s.a.Promise||Promise),!t)throw new Error("no Promise impl found");return t}},"8g8A":function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(){function t(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return t.prototype=Object.create(Error.prototype),t}()},"909l":function(t,n,e){"use strict";e.d(n,"b",(function(){return f})),e.d(n,"a",(function(){return l}));var r=e("mrSG"),i=e("IUTb"),o=e("isby"),u=e("FFOo"),c=e("MGBS"),a=e("zotm"),s=e("En8+");function f(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t[t.length-1];return"function"==typeof e&&t.pop(),Object(i.a)(t,void 0).lift(new l(e))}var l=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new h(t,this.resultSelector))},t}(),h=function(t){function n(n,e,r){void 0===r&&(r=Object.create(null));var i=t.call(this,n)||this;return i.iterators=[],i.active=0,i.resultSelector="function"==typeof e?e:null,i.values=r,i}return r.a(n,t),n.prototype._next=function(t){var n=this.iterators;Object(o.a)(t)?n.push(new p(t)):"function"==typeof t[s.a]?n.push(new d(t[s.a]())):n.push(new b(this.destination,this,t))},n.prototype._complete=function(){var t=this.iterators,n=t.length;if(this.unsubscribe(),0!==n){this.active=n;for(var e=0;e<n;e++){var r=t[e];if(r.stillUnsubscribed)this.destination.add(r.subscribe(r,e));else this.active--}}else this.destination.complete()},n.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},n.prototype.checkIterators=function(){for(var t=this.iterators,n=t.length,e=this.destination,r=0;r<n;r++){if("function"==typeof(u=t[r]).hasValue&&!u.hasValue())return}var i=!1,o=[];for(r=0;r<n;r++){var u,c=(u=t[r]).next();if(u.hasCompleted()&&(i=!0),c.done)return void e.complete();o.push(c.value)}this.resultSelector?this._tryresultSelector(o):e.next(o),i&&e.complete()},n.prototype._tryresultSelector=function(t){var n;try{n=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(u.a),d=function(){function t(t){this.iterator=t,this.nextResult=t.next()}return t.prototype.hasValue=function(){return!0},t.prototype.next=function(){var t=this.nextResult;return this.nextResult=this.iterator.next(),t},t.prototype.hasCompleted=function(){var t=this.nextResult;return t&&t.done},t}(),p=function(){function t(t){this.array=t,this.index=0,this.length=0,this.length=t.length}return t.prototype[s.a]=function(){return this},t.prototype.next=function(t){var n=this.index++,e=this.array;return n<this.length?{value:e[n],done:!1}:{value:null,done:!0}},t.prototype.hasValue=function(){return this.array.length>this.index},t.prototype.hasCompleted=function(){return this.array.length===this.index},t}(),b=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.parent=e,i.observable=r,i.stillUnsubscribed=!0,i.buffer=[],i.isComplete=!1,i}return r.a(n,t),n.prototype[s.a]=function(){return this},n.prototype.next=function(){var t=this.buffer;return 0===t.length&&this.isComplete?{value:null,done:!0}:{value:t.shift(),done:!1}},n.prototype.hasValue=function(){return this.buffer.length>0},n.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},n.prototype.notifyComplete=function(){this.buffer.length>0?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},n.prototype.notifyNext=function(t,n,e,r,i){this.buffer.push(n),this.parent.checkIterators()},n.prototype.subscribe=function(t,n){return Object(a.a)(this,this.observable,this,n)},n}(c.a)},CS9Q:function(t,n,e){"use strict";e.d(n,"a",(function(){return o}));var r=e("mrSG"),i=e("siIJ"),o=function(t){function n(e,r){void 0===r&&(r=i.a.now);var o=t.call(this,e,(function(){return n.delegate&&n.delegate!==o?n.delegate.now():r()}))||this;return o.actions=[],o.active=!1,o.scheduled=void 0,o}return r.a(n,t),n.prototype.schedule=function(e,r,i){return void 0===r&&(r=0),n.delegate&&n.delegate!==this?n.delegate.schedule(e,r,i):t.prototype.schedule.call(this,e,r,i)},n.prototype.flush=function(t){var n=this.actions;if(this.active)n.push(t);else{var e;this.active=!0;do{if(e=t.execute(t.state,t.delay))break}while(t=n.shift());if(this.active=!1,e){for(;t=n.shift();)t.unsubscribe();throw e}}},n}(i.a)},DKTb:function(t,n,e){"use strict";function r(t){setTimeout((function(){throw t}),0)}e.d(n,"a",(function(){return r}))},DtyJ:function(t,n,e){"use strict";e.r(n),e.d(n,"Observable",(function(){return r.a})),e.d(n,"ConnectableObservable",(function(){return i.a})),e.d(n,"GroupedObservable",(function(){return o.a})),e.d(n,"observable",(function(){return u.a})),e.d(n,"Subject",(function(){return c.a})),e.d(n,"BehaviorSubject",(function(){return a.a})),e.d(n,"ReplaySubject",(function(){return s.a})),e.d(n,"AsyncSubject",(function(){return f.a})),e.d(n,"asapScheduler",(function(){return l.a})),e.d(n,"asyncScheduler",(function(){return h.a})),e.d(n,"queueScheduler",(function(){return d.a})),e.d(n,"animationFrameScheduler",(function(){return g})),e.d(n,"VirtualTimeScheduler",(function(){return _})),e.d(n,"VirtualAction",(function(){return m})),e.d(n,"Scheduler",(function(){return x.a})),e.d(n,"Subscription",(function(){return w.a})),e.d(n,"Subscriber",(function(){return M.a})),e.d(n,"Notification",(function(){return S.a})),e.d(n,"NotificationKind",(function(){return S.b})),e.d(n,"pipe",(function(){return T.a})),e.d(n,"noop",(function(){return N.a})),e.d(n,"identity",(function(){return E.a})),e.d(n,"isObservable",(function(){return C})),e.d(n,"ArgumentOutOfRangeError",(function(){return A.a})),e.d(n,"EmptyError",(function(){return k.a})),e.d(n,"ObjectUnsubscribedError",(function(){return O.a})),e.d(n,"UnsubscriptionError",(function(){return j.a})),e.d(n,"TimeoutError",(function(){return I.a})),e.d(n,"bindCallback",(function(){return V})),e.d(n,"bindNodeCallback",(function(){return U})),e.d(n,"combineLatest",(function(){return G.b})),e.d(n,"concat",(function(){return W.a})),e.d(n,"defer",(function(){return H.a})),e.d(n,"empty",(function(){return X.b})),e.d(n,"forkJoin",(function(){return Q})),e.d(n,"from",(function(){return Z.a})),e.d(n,"fromEvent",(function(){return tt})),e.d(n,"fromEventPattern",(function(){return nt})),e.d(n,"generate",(function(){return et})),e.d(n,"iif",(function(){return it})),e.d(n,"interval",(function(){return ut})),e.d(n,"merge",(function(){return at.a})),e.d(n,"never",(function(){return ft})),e.d(n,"of",(function(){return lt.a})),e.d(n,"onErrorResumeNext",(function(){return ht})),e.d(n,"pairs",(function(){return dt})),e.d(n,"partition",(function(){return gt})),e.d(n,"race",(function(){return _t.a})),e.d(n,"range",(function(){return mt})),e.d(n,"throwError",(function(){return wt.a})),e.d(n,"timer",(function(){return Mt.a})),e.d(n,"using",(function(){return St})),e.d(n,"zip",(function(){return Tt.b})),e.d(n,"scheduled",(function(){return Nt.a})),e.d(n,"EMPTY",(function(){return X.a})),e.d(n,"NEVER",(function(){return st})),e.d(n,"config",(function(){return Et.a}));var r=e("6blF"),i=e("KhEm"),o=e("IxPp"),u=e("xTla"),c=e("K9Ia"),a=e("26FU"),s=e("S5bw"),f=e("svcd"),l=e("KQya"),h=e("T1DM"),d=e("zo3G"),p=e("mrSG"),b=e("h9Dq"),v=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r}return p.a(n,t),n.prototype.requestAsyncId=function(n,e,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,n,e,r):(n.actions.push(this),n.scheduled||(n.scheduled=requestAnimationFrame((function(){return n.flush(null)}))))},n.prototype.recycleAsyncId=function(n,e,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,n,e,r);0===n.actions.length&&(cancelAnimationFrame(e),n.scheduled=void 0)},n}(b.a),y=e("CS9Q"),g=new(function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return p.a(n,t),n.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var n,e=this.actions,r=-1,i=e.length;t=t||e.shift();do{if(n=t.execute(t.state,t.delay))break}while(++r<i&&(t=e.shift()));if(this.active=!1,n){for(;++r<i&&(t=e.shift());)t.unsubscribe();throw n}},n}(y.a))(v),_=function(t){function n(n,e){void 0===n&&(n=m),void 0===e&&(e=Number.POSITIVE_INFINITY);var r=t.call(this,n,(function(){return r.frame}))||this;return r.maxFrames=e,r.frame=0,r.index=-1,r}return p.a(n,t),n.prototype.flush=function(){for(var t,n,e=this.actions,r=this.maxFrames;(n=e[0])&&n.delay<=r&&(e.shift(),this.frame=n.delay,!(t=n.execute(n.state,n.delay))););if(t){for(;n=e.shift();)n.unsubscribe();throw t}},n.frameTimeFactor=10,n}(y.a),m=function(t){function n(n,e,r){void 0===r&&(r=n.index+=1);var i=t.call(this,n,e)||this;return i.scheduler=n,i.work=e,i.index=r,i.active=!0,i.index=n.index=r,i}return p.a(n,t),n.prototype.schedule=function(e,r){if(void 0===r&&(r=0),!this.id)return t.prototype.schedule.call(this,e,r);this.active=!1;var i=new n(this.scheduler,this.work);return this.add(i),i.schedule(e,r)},n.prototype.requestAsyncId=function(t,e,r){void 0===r&&(r=0),this.delay=t.frame+r;var i=t.actions;return i.push(this),i.sort(n.sortActions),!0},n.prototype.recycleAsyncId=function(t,n,e){void 0===e&&(e=0)},n.prototype._execute=function(n,e){if(!0===this.active)return t.prototype._execute.call(this,n,e)},n.sortActions=function(t,n){return t.delay===n.delay?t.index===n.index?0:t.index>n.index?1:-1:t.delay>n.delay?1:-1},n}(b.a),x=e("siIJ"),w=e("pugT"),M=e("FFOo"),S=e("60iU"),T=e("y3By"),N=e("+umK"),E=e("mChF");function C(t){return!!t&&(t instanceof r.a||"function"==typeof t.lift&&"function"==typeof t.subscribe)}var A=e("b7mW"),k=e("3fWJ"),O=e("8g8A"),j=e("awvh"),I=e("3U0i"),P=e("67Y/"),F=e("1fDf"),z=e("isby"),D=e("nkY7");function V(t,n,e){if(n){if(!Object(D.a)(n))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return V(t,e).apply(void 0,r).pipe(Object(P.a)((function(t){return Object(z.a)(t)?n.apply(void 0,t):n(t)})))};e=n}return function(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];var o,u=this,c={context:u,subject:o,callbackFunc:t,scheduler:e};return new r.a((function(r){if(e){var i={args:n,subscriber:r,params:c};return e.schedule(R,0,i)}if(!o){o=new f.a;try{t.apply(u,n.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];o.next(t.length<=1?t[0]:t),o.complete()}]))}catch(t){Object(F.a)(o)?o.error(t):console.warn(t)}}return o.subscribe(r)}))}}function R(t){var n=this,e=t.args,r=t.subscriber,i=t.params,o=i.callbackFunc,u=i.context,c=i.scheduler,a=i.subject;if(!a){a=i.subject=new f.a;try{o.apply(u,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=t.length<=1?t[0]:t;n.add(c.schedule(B,0,{value:r,subject:a}))}]))}catch(t){a.error(t)}}this.add(a.subscribe(r))}function B(t){var n=t.value,e=t.subject;e.next(n),e.complete()}function U(t,n,e){if(n){if(!Object(D.a)(n))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return U(t,e).apply(void 0,r).pipe(Object(P.a)((function(t){return Object(z.a)(t)?n.apply(void 0,t):n(t)})))};e=n}return function(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];var o={subject:void 0,args:n,callbackFunc:t,scheduler:e,context:this};return new r.a((function(r){var i=o.context,u=o.subject;if(e)return e.schedule(q,0,{params:o,subscriber:r,context:i});if(!u){u=o.subject=new f.a;try{t.apply(i,n.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t.shift();e?u.error(e):(u.next(t.length<=1?t[0]:t),u.complete())}]))}catch(t){Object(F.a)(u)?u.error(t):console.warn(t)}}return u.subscribe(r)}))}}function q(t){var n=this,e=t.params,r=t.subscriber,i=t.context,o=e.callbackFunc,u=e.args,c=e.scheduler,a=e.subject;if(!a){a=e.subject=new f.a;try{o.apply(i,u.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=t.shift();if(r)n.add(c.schedule(Y,0,{err:r,subject:a}));else{var i=t.length<=1?t[0]:t;n.add(c.schedule(L,0,{value:i,subject:a}))}}]))}catch(t){this.add(c.schedule(Y,0,{err:t,subject:a}))}}this.add(a.subscribe(r))}function L(t){var n=t.value,e=t.subject;e.next(n),e.complete()}function Y(t){var n=t.err;t.subject.error(n)}var G=e("dzgT"),W=e("dEwP"),H=e("lYZG"),X=e("G5J1"),K=e("McSo"),Z=e("0/uQ");function Q(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(1===t.length){var e=t[0];if(Object(z.a)(e))return $(e,null);if(Object(K.a)(e)&&Object.getPrototypeOf(e)===Object.prototype){var r=Object.keys(e);return $(r.map((function(t){return e[t]})),r)}}if("function"==typeof t[t.length-1]){var i=t.pop();return $(t=1===t.length&&Object(z.a)(t[0])?t[0]:t,null).pipe(Object(P.a)((function(t){return i.apply(void 0,t)})))}return $(t,null)}function $(t,n){return new r.a((function(e){var r=t.length;if(0!==r)for(var i=new Array(r),o=0,u=0,c=function(c){var a=Object(Z.a)(t[c]),s=!1;e.add(a.subscribe({next:function(t){s||(s=!0,u++),i[c]=t},error:function(t){return e.error(t)},complete:function(){++o!==r&&s||(u===r&&e.next(n?n.reduce((function(t,n,e){return t[n]=i[e],t}),{}):i),e.complete())}}))},a=0;a<r;a++)c(a);else e.complete()}))}var J=e("2Bdj");function tt(t,n,e,i){return Object(J.a)(e)&&(i=e,e=void 0),i?tt(t,n,e).pipe(Object(P.a)((function(t){return Object(z.a)(t)?i.apply(void 0,t):i(t)}))):new r.a((function(r){!function t(n,e,r,i,o){var u;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(n)){var c=n;n.addEventListener(e,r,o),u=function(){return c.removeEventListener(e,r,o)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(n)){var a=n;n.on(e,r),u=function(){return a.off(e,r)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(n)){var s=n;n.addListener(e,r),u=function(){return s.removeListener(e,r)}}else{if(!n||!n.length)throw new TypeError("Invalid event target");for(var f=0,l=n.length;f<l;f++)t(n[f],e,r,i,o)}i.add(u)}(t,n,(function(t){arguments.length>1?r.next(Array.prototype.slice.call(arguments)):r.next(t)}),r,e)}))}function nt(t,n,e){return e?nt(t,n).pipe(Object(P.a)((function(t){return Object(z.a)(t)?e.apply(void 0,t):e(t)}))):new r.a((function(e){var r,i=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.next(1===t.length?t[0]:t)};try{r=t(i)}catch(t){return void e.error(t)}if(Object(J.a)(n))return function(){return n(i,r)}}))}function et(t,n,e,i,o){var u,c;if(1==arguments.length){var a=t;c=a.initialState,n=a.condition,e=a.iterate,u=a.resultSelector||E.a,o=a.scheduler}else void 0===i||Object(D.a)(i)?(c=t,u=E.a,o=i):(c=t,u=i);return new r.a((function(t){var r=c;if(o)return o.schedule(rt,0,{subscriber:t,iterate:e,condition:n,resultSelector:u,state:r});for(;;){if(n){var i=void 0;try{i=n(r)}catch(n){return void t.error(n)}if(!i){t.complete();break}}var a=void 0;try{a=u(r)}catch(n){return void t.error(n)}if(t.next(a),t.closed)break;try{r=e(r)}catch(n){return void t.error(n)}}}))}function rt(t){var n=t.subscriber,e=t.condition;if(!n.closed){if(t.needIterate)try{t.state=t.iterate(t.state)}catch(t){return void n.error(t)}else t.needIterate=!0;if(e){var r=void 0;try{r=e(t.state)}catch(t){return void n.error(t)}if(!r)return void n.complete();if(n.closed)return}var i;try{i=t.resultSelector(t.state)}catch(t){return void n.error(t)}if(!n.closed&&(n.next(i),!n.closed))return this.schedule(t)}}function it(t,n,e){return void 0===n&&(n=X.a),void 0===e&&(e=X.a),Object(H.a)((function(){return t()?n:e}))}var ot=e("/21U");function ut(t,n){return void 0===t&&(t=0),void 0===n&&(n=h.a),(!Object(ot.a)(t)||t<0)&&(t=0),n&&"function"==typeof n.schedule||(n=h.a),new r.a((function(e){return e.add(n.schedule(ct,t,{subscriber:e,counter:0,period:t})),e}))}function ct(t){var n=t.subscriber,e=t.counter,r=t.period;n.next(e),this.schedule({subscriber:n,counter:e+1,period:r},r)}var at=e("p0ib"),st=new r.a(N.a);function ft(){return st}var lt=e("F/XL");function ht(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(0===t.length)return X.a;var e=t[0],i=t.slice(1);return 1===t.length&&Object(z.a)(e)?ht.apply(void 0,e):new r.a((function(t){var n=function(){return t.add(ht.apply(void 0,i).subscribe(t))};return Object(Z.a)(e).subscribe({next:function(n){t.next(n)},error:n,complete:n})}))}function dt(t,n){return n?new r.a((function(e){var r=Object.keys(t),i=new w.a;return i.add(n.schedule(pt,0,{keys:r,index:0,subscriber:e,subscription:i,obj:t})),i})):new r.a((function(n){for(var e=Object.keys(t),r=0;r<e.length&&!n.closed;r++){var i=e[r];t.hasOwnProperty(i)&&n.next([i,t[i]])}n.complete()}))}function pt(t){var n=t.keys,e=t.index,r=t.subscriber,i=t.subscription,o=t.obj;if(!r.closed)if(e<n.length){var u=n[e];r.next([u,o[u]]),i.add(this.schedule({keys:n,index:e+1,subscriber:r,subscription:i,obj:o}))}else r.complete()}var bt=e("jFaF"),vt=e("Fxb1"),yt=e("VnD/");function gt(t,n,e){return[Object(yt.a)(n,e)(new r.a(Object(vt.a)(t))),Object(yt.a)(Object(bt.a)(n,e))(new r.a(Object(vt.a)(t)))]}var _t=e("W0Ae");function mt(t,n,e){return void 0===t&&(t=0),new r.a((function(r){void 0===n&&(n=t,t=0);var i=0,o=t;if(e)return e.schedule(xt,0,{index:i,count:n,start:t,subscriber:r});for(;;){if(i++>=n){r.complete();break}if(r.next(o++),r.closed)break}}))}function xt(t){var n=t.start,e=t.index,r=t.count,i=t.subscriber;e>=r?i.complete():(i.next(n),i.closed||(t.index=e+1,t.start=n+1,this.schedule(t)))}var wt=e("XlPw"),Mt=e("gI3B");function St(t,n){return new r.a((function(e){var r,i;try{r=t()}catch(t){return void e.error(t)}try{i=n(r)}catch(t){return void e.error(t)}var o=(i?Object(Z.a)(i):X.a).subscribe(e);return function(){o.unsubscribe(),r&&r.unsubscribe()}}))}var Tt=e("909l"),Nt=e("i4X3"),Et=e("iLxQ")},"En8+":function(t,n,e){"use strict";function r(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}e.d(n,"a",(function(){return i}));var i=r()},"F/XL":function(t,n,e){"use strict";e.d(n,"a",(function(){return u}));var r=e("nkY7"),i=e("IUTb"),o=e("JF+6");function u(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t[t.length-1];return Object(r.a)(e)?(t.pop(),Object(o.a)(t,e)):Object(i.a)(t)}},FFOo:function(t,n,e){"use strict";e.d(n,"a",(function(){return f}));var r=e("mrSG"),i=e("2Bdj"),o=e("6ahw"),u=e("pugT"),c=e("L/V9"),a=e("iLxQ"),s=e("DKTb"),f=function(t){function n(e,r,i){var u=t.call(this)||this;switch(u.syncErrorValue=null,u.syncErrorThrown=!1,u.syncErrorThrowable=!1,u.isStopped=!1,arguments.length){case 0:u.destination=o.a;break;case 1:if(!e){u.destination=o.a;break}if("object"==typeof e){e instanceof n?(u.syncErrorThrowable=e.syncErrorThrowable,u.destination=e,e.add(u)):(u.syncErrorThrowable=!0,u.destination=new l(u,e));break}default:u.syncErrorThrowable=!0,u.destination=new l(u,e,r,i)}return u}return r.a(n,t),n.prototype[c.a]=function(){return this},n.create=function(t,e,r){var i=new n(t,e,r);return i.syncErrorThrowable=!1,i},n.prototype.next=function(t){this.isStopped||this._next(t)},n.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},n.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},n.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},n}(u.a),l=function(t){function n(n,e,r,u){var c,a=t.call(this)||this;a._parentSubscriber=n;var s=a;return Object(i.a)(e)?c=e:e&&(c=e.next,r=e.error,u=e.complete,e!==o.a&&(s=Object.create(e),Object(i.a)(s.unsubscribe)&&a.add(s.unsubscribe.bind(s)),s.unsubscribe=a.unsubscribe.bind(a))),a._context=s,a._next=c,a._error=r,a._complete=u,a}return r.a(n,t),n.prototype.next=function(t){if(!this.isStopped&&this._next){var n=this._parentSubscriber;a.a.useDeprecatedSynchronousErrorHandling&&n.syncErrorThrowable?this.__tryOrSetError(n,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},n.prototype.error=function(t){if(!this.isStopped){var n=this._parentSubscriber,e=a.a.useDeprecatedSynchronousErrorHandling;if(this._error)e&&n.syncErrorThrowable?(this.__tryOrSetError(n,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(n.syncErrorThrowable)e?(n.syncErrorValue=t,n.syncErrorThrown=!0):Object(s.a)(t),this.unsubscribe();else{if(this.unsubscribe(),e)throw t;Object(s.a)(t)}}},n.prototype.complete=function(){var t=this;if(!this.isStopped){var n=this._parentSubscriber;if(this._complete){var e=function(){return t._complete.call(t._context)};a.a.useDeprecatedSynchronousErrorHandling&&n.syncErrorThrowable?(this.__tryOrSetError(n,e),this.unsubscribe()):(this.__tryOrUnsub(e),this.unsubscribe())}else this.unsubscribe()}},n.prototype.__tryOrUnsub=function(t,n){try{t.call(this._context,n)}catch(t){if(this.unsubscribe(),a.a.useDeprecatedSynchronousErrorHandling)throw t;Object(s.a)(t)}},n.prototype.__tryOrSetError=function(t,n,e){if(!a.a.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{n.call(this._context,e)}catch(n){return a.a.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=n,t.syncErrorThrown=!0,!0):(Object(s.a)(n),!0)}return!1},n.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},n}(f)},Fxb1:function(t,n,e){"use strict";e.d(n,"a",(function(){return f}));var r=e("+tJ4"),i=e("DKTb"),o=e("En8+"),u=e("xTla"),c=e("2ePl"),a=e("/WYv"),s=e("McSo"),f=function(t){if(t&&"function"==typeof t[u.a])return f=t,function(t){var n=f[u.a]();if("function"!=typeof n.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return n.subscribe(t)};if(Object(c.a)(t))return Object(r.a)(t);if(Object(a.a)(t))return e=t,function(t){return e.then((function(n){t.closed||(t.next(n),t.complete())}),(function(n){return t.error(n)})).then(null,i.a),t};if(t&&"function"==typeof t[o.a])return n=t,function(t){for(var e=n[o.a]();;){var r=e.next();if(r.done){t.complete();break}if(t.next(r.value),t.closed)break}return"function"==typeof e.return&&t.add((function(){e.return&&e.return()})),t};var n,e,f,l=Object(s.a)(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+l+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")}},G5J1:function(t,n,e){"use strict";e.d(n,"a",(function(){return i})),e.d(n,"b",(function(){return o}));var r=e("6blF"),i=new r.a((function(t){return t.complete()}));function o(t){return t?function(t){return new r.a((function(n){return t.schedule((function(){return n.complete()}))}))}(t):i}},IUTb:function(t,n,e){"use strict";e.d(n,"a",(function(){return u}));var r=e("6blF"),i=e("+tJ4"),o=e("JF+6");function u(t,n){return n?Object(o.a)(t,n):new r.a(Object(i.a)(t))}},IxPp:function(t,n,e){"use strict";e.d(n,"b",(function(){return a})),e.d(n,"a",(function(){return h}));var r=e("mrSG"),i=e("FFOo"),o=e("pugT"),u=e("6blF"),c=e("K9Ia");function a(t,n,e,r){return function(i){return i.lift(new s(t,n,e,r))}}var s=function(){function t(t,n,e,r){this.keySelector=t,this.elementSelector=n,this.durationSelector=e,this.subjectSelector=r}return t.prototype.call=function(t,n){return n.subscribe(new f(t,this.keySelector,this.elementSelector,this.durationSelector,this.subjectSelector))},t}(),f=function(t){function n(n,e,r,i,o){var u=t.call(this,n)||this;return u.keySelector=e,u.elementSelector=r,u.durationSelector=i,u.subjectSelector=o,u.groups=null,u.attemptedToUnsubscribe=!1,u.count=0,u}return r.a(n,t),n.prototype._next=function(t){var n;try{n=this.keySelector(t)}catch(t){return void this.error(t)}this._group(t,n)},n.prototype._group=function(t,n){var e=this.groups;e||(e=this.groups=new Map);var r,i=e.get(n);if(this.elementSelector)try{r=this.elementSelector(t)}catch(t){this.error(t)}else r=t;if(!i){i=this.subjectSelector?this.subjectSelector():new c.a,e.set(n,i);var o=new h(n,i,this);if(this.destination.next(o),this.durationSelector){var u=void 0;try{u=this.durationSelector(new h(n,i))}catch(t){return void this.error(t)}this.add(u.subscribe(new l(n,i,this)))}}i.closed||i.next(r)},n.prototype._error=function(t){var n=this.groups;n&&(n.forEach((function(n,e){n.error(t)})),n.clear()),this.destination.error(t)},n.prototype._complete=function(){var t=this.groups;t&&(t.forEach((function(t,n){t.complete()})),t.clear()),this.destination.complete()},n.prototype.removeGroup=function(t){this.groups.delete(t)},n.prototype.unsubscribe=function(){this.closed||(this.attemptedToUnsubscribe=!0,0===this.count&&t.prototype.unsubscribe.call(this))},n}(i.a),l=function(t){function n(n,e,r){var i=t.call(this,e)||this;return i.key=n,i.group=e,i.parent=r,i}return r.a(n,t),n.prototype._next=function(t){this.complete()},n.prototype._unsubscribe=function(){var t=this.parent,n=this.key;this.key=this.parent=null,t&&t.removeGroup(n)},n}(i.a),h=function(t){function n(n,e,r){var i=t.call(this)||this;return i.key=n,i.groupSubject=e,i.refCountSubscription=r,i}return r.a(n,t),n.prototype._subscribe=function(t){var n=new o.a,e=this.refCountSubscription,r=this.groupSubject;return e&&!e.closed&&n.add(new d(e)),n.add(r.subscribe(t)),n},n}(u.a),d=function(t){function n(n){var e=t.call(this)||this;return e.parent=n,n.count++,e}return r.a(n,t),n.prototype.unsubscribe=function(){var n=this.parent;n.closed||this.closed||(t.prototype.unsubscribe.call(this),n.count-=1,0===n.count&&n.attemptedToUnsubscribe&&n.unsubscribe())},n}(o.a)},"JF+6":function(t,n,e){"use strict";e.d(n,"a",(function(){return o}));var r=e("6blF"),i=e("pugT");function o(t,n){return new r.a((function(e){var r=new i.a,o=0;return r.add(n.schedule((function(){o!==t.length?(e.next(t[o++]),e.closed||r.add(this.schedule())):e.complete()}))),r}))}},K9Ia:function(t,n,e){"use strict";e.d(n,"b",(function(){return f})),e.d(n,"a",(function(){return l}));var r=e("mrSG"),i=e("6blF"),o=e("FFOo"),u=e("pugT"),c=e("8g8A"),a=e("uMaO"),s=e("L/V9"),f=function(t){function n(n){var e=t.call(this,n)||this;return e.destination=n,e}return r.a(n,t),n}(o.a),l=function(t){function n(){var n=t.call(this)||this;return n.observers=[],n.closed=!1,n.isStopped=!1,n.hasError=!1,n.thrownError=null,n}return r.a(n,t),n.prototype[s.a]=function(){return new f(this)},n.prototype.lift=function(t){var n=new h(this,this);return n.operator=t,n},n.prototype.next=function(t){if(this.closed)throw new c.a;if(!this.isStopped)for(var n=this.observers,e=n.length,r=n.slice(),i=0;i<e;i++)r[i].next(t)},n.prototype.error=function(t){if(this.closed)throw new c.a;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var n=this.observers,e=n.length,r=n.slice(),i=0;i<e;i++)r[i].error(t);this.observers.length=0},n.prototype.complete=function(){if(this.closed)throw new c.a;this.isStopped=!0;for(var t=this.observers,n=t.length,e=t.slice(),r=0;r<n;r++)e[r].complete();this.observers.length=0},n.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},n.prototype._trySubscribe=function(n){if(this.closed)throw new c.a;return t.prototype._trySubscribe.call(this,n)},n.prototype._subscribe=function(t){if(this.closed)throw new c.a;return this.hasError?(t.error(this.thrownError),u.a.EMPTY):this.isStopped?(t.complete(),u.a.EMPTY):(this.observers.push(t),new a.a(this,t))},n.prototype.asObservable=function(){var t=new i.a;return t.source=this,t},n.create=function(t,n){return new h(t,n)},n}(i.a),h=function(t){function n(n,e){var r=t.call(this)||this;return r.destination=n,r.source=e,r}return r.a(n,t),n.prototype.next=function(t){var n=this.destination;n&&n.next&&n.next(t)},n.prototype.error=function(t){var n=this.destination;n&&n.error&&this.destination.error(t)},n.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},n.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):u.a.EMPTY},n}(l)},KQya:function(t,n,e){"use strict";e.d(n,"a",(function(){return l}));var r=e("mrSG"),i=1,o=function(){return Promise.resolve()}(),u={};function c(t){return t in u&&(delete u[t],!0)}var a=function(t){var n=i++;return u[n]=!0,o.then((function(){return c(n)&&t()})),n},s=function(t){c(t)},f=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r}return r.a(n,t),n.prototype.requestAsyncId=function(n,e,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,n,e,r):(n.actions.push(this),n.scheduled||(n.scheduled=a(n.flush.bind(n,null))))},n.prototype.recycleAsyncId=function(n,e,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,n,e,r);0===n.actions.length&&(s(e),n.scheduled=void 0)},n}(e("h9Dq").a),l=new(function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r.a(n,t),n.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var n,e=this.actions,r=-1,i=e.length;t=t||e.shift();do{if(n=t.execute(t.state,t.delay))break}while(++r<i&&(t=e.shift()));if(this.active=!1,n){for(;++r<i&&(t=e.shift());)t.unsubscribe();throw n}},n}(e("CS9Q").a))(f)},KhEm:function(t,n,e){"use strict";e.d(n,"a",(function(){return s})),e.d(n,"b",(function(){return f}));var r=e("mrSG"),i=e("K9Ia"),o=e("6blF"),u=e("FFOo"),c=e("pugT"),a=e("yGWI"),s=function(t){function n(n,e){var r=t.call(this)||this;return r.source=n,r.subjectFactory=e,r._refCount=0,r._isComplete=!1,r}return r.a(n,t),n.prototype._subscribe=function(t){return this.getSubject().subscribe(t)},n.prototype.getSubject=function(){var t=this._subject;return t&&!t.isStopped||(this._subject=this.subjectFactory()),this._subject},n.prototype.connect=function(){var t=this._connection;return t||(this._isComplete=!1,(t=this._connection=new c.a).add(this.source.subscribe(new l(this.getSubject(),this))),t.closed&&(this._connection=null,t=c.a.EMPTY)),t},n.prototype.refCount=function(){return Object(a.a)()(this)},n}(o.a),f=function(){var t=s.prototype;return{operator:{value:null},_refCount:{value:0,writable:!0},_subject:{value:null,writable:!0},_connection:{value:null,writable:!0},_subscribe:{value:t._subscribe},_isComplete:{value:t._isComplete,writable:!0},getSubject:{value:t.getSubject},connect:{value:t.connect},refCount:{value:t.refCount}}}(),l=function(t){function n(n,e){var r=t.call(this,n)||this;return r.connectable=e,r}return r.a(n,t),n.prototype._error=function(n){this._unsubscribe(),t.prototype._error.call(this,n)},n.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),t.prototype._complete.call(this)},n.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var n=t._connection;t._refCount=0,t._subject=null,t._connection=null,n&&n.unsubscribe()}},n}(i.b);u.a},"L/V9":function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}()},MGBS:function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=e("mrSG"),i=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r.a(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.destination.next(n)},n.prototype.notifyError=function(t,n){this.destination.error(t)},n.prototype.notifyComplete=function(t){this.destination.complete()},n}(e("FFOo").a)},McSo:function(t,n,e){"use strict";function r(t){return null!==t&&"object"==typeof t}e.d(n,"a",(function(){return r}))},S5bw:function(t,n,e){"use strict";e.d(n,"a",(function(){return f}));var r=e("mrSG"),i=e("K9Ia"),o=e("zo3G"),u=e("pugT"),c=e("mZXl"),a=e("8g8A"),s=e("uMaO"),f=function(t){function n(n,e,r){void 0===n&&(n=Number.POSITIVE_INFINITY),void 0===e&&(e=Number.POSITIVE_INFINITY);var i=t.call(this)||this;return i.scheduler=r,i._events=[],i._infiniteTimeWindow=!1,i._bufferSize=n<1?1:n,i._windowTime=e<1?1:e,e===Number.POSITIVE_INFINITY?(i._infiniteTimeWindow=!0,i.next=i.nextInfiniteTimeWindow):i.next=i.nextTimeWindow,i}return r.a(n,t),n.prototype.nextInfiniteTimeWindow=function(n){var e=this._events;e.push(n),e.length>this._bufferSize&&e.shift(),t.prototype.next.call(this,n)},n.prototype.nextTimeWindow=function(n){this._events.push(new l(this._getNow(),n)),this._trimBufferThenGetEvents(),t.prototype.next.call(this,n)},n.prototype._subscribe=function(t){var n,e=this._infiniteTimeWindow,r=e?this._events:this._trimBufferThenGetEvents(),i=this.scheduler,o=r.length;if(this.closed)throw new a.a;if(this.isStopped||this.hasError?n=u.a.EMPTY:(this.observers.push(t),n=new s.a(this,t)),i&&t.add(t=new c.a(t,i)),e)for(var f=0;f<o&&!t.closed;f++)t.next(r[f]);else for(f=0;f<o&&!t.closed;f++)t.next(r[f].value);return this.hasError?t.error(this.thrownError):this.isStopped&&t.complete(),n},n.prototype._getNow=function(){return(this.scheduler||o.a).now()},n.prototype._trimBufferThenGetEvents=function(){for(var t=this._getNow(),n=this._bufferSize,e=this._windowTime,r=this._events,i=r.length,o=0;o<i&&!(t-r[o].time<e);)o++;return i>n&&(o=Math.max(o,i-n)),o>0&&r.splice(0,o),r},n}(i.a),l=function(){return function(t,n){this.time=t,this.value=n}}()},T1DM:function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=e("h9Dq"),i=new(e("CS9Q").a)(r.a)},Txjg:function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=e("Zn8D");function i(){return Object(r.a)(1)}},"VnD/":function(t,n,e){"use strict";e.d(n,"a",(function(){return o}));var r=e("mrSG"),i=e("FFOo");function o(t,n){return function(e){return e.lift(new u(t,n))}}var u=function(){function t(t,n){this.predicate=t,this.thisArg=n}return t.prototype.call=function(t,n){return n.subscribe(new c(t,this.predicate,this.thisArg))},t}(),c=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.predicate=e,i.thisArg=r,i.count=0,i}return r.a(n,t),n.prototype._next=function(t){var n;try{n=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}n&&this.destination.next(t)},n}(i.a)},VphZ:function(t,n,e){"use strict";e.r(n),e.d(n,"version",(function(){return r})),e.d(n,"bisect",(function(){return s})),e.d(n,"bisectRight",(function(){return c})),e.d(n,"bisectLeft",(function(){return a})),e.d(n,"ascending",(function(){return i})),e.d(n,"bisector",(function(){return o})),e.d(n,"cross",(function(){return h})),e.d(n,"descending",(function(){return d})),e.d(n,"deviation",(function(){return v})),e.d(n,"extent",(function(){return y})),e.d(n,"histogram",(function(){return O})),e.d(n,"thresholdFreedmanDiaconis",(function(){return I})),e.d(n,"thresholdScott",(function(){return P})),e.d(n,"thresholdSturges",(function(){return k})),e.d(n,"max",(function(){return F})),e.d(n,"mean",(function(){return z})),e.d(n,"median",(function(){return D})),e.d(n,"merge",(function(){return V})),e.d(n,"min",(function(){return R})),e.d(n,"pairs",(function(){return f})),e.d(n,"permute",(function(){return B})),e.d(n,"quantile",(function(){return j})),e.d(n,"range",(function(){return M})),e.d(n,"scan",(function(){return U})),e.d(n,"shuffle",(function(){return q})),e.d(n,"sum",(function(){return L})),e.d(n,"ticks",(function(){return E})),e.d(n,"tickIncrement",(function(){return C})),e.d(n,"tickStep",(function(){return A})),e.d(n,"transpose",(function(){return Y})),e.d(n,"variance",(function(){return b})),e.d(n,"zip",(function(){return W})),e.d(n,"axisTop",(function(){return nt})),e.d(n,"axisRight",(function(){return et})),e.d(n,"axisBottom",(function(){return rt})),e.d(n,"axisLeft",(function(){return it})),e.d(n,"brush",(function(){return Ni})),e.d(n,"brushX",(function(){return Si})),e.d(n,"brushY",(function(){return Ti})),e.d(n,"brushSelection",(function(){return Mi})),e.d(n,"chord",(function(){return Fi})),e.d(n,"ribbon",(function(){return Ki})),e.d(n,"nest",(function(){return Ji})),e.d(n,"set",(function(){return co})),e.d(n,"map",(function(){return $i})),e.d(n,"keys",(function(){return ao})),e.d(n,"values",(function(){return so})),e.d(n,"entries",(function(){return fo})),e.d(n,"color",(function(){return Gn})),e.d(n,"rgb",(function(){return Kn})),e.d(n,"hsl",(function(){return ee})),e.d(n,"lab",(function(){return vo})),e.d(n,"hcl",(function(){return So})),e.d(n,"lch",(function(){return Mo})),e.d(n,"gray",(function(){return bo})),e.d(n,"cubehelix",(function(){return jo})),e.d(n,"contours",(function(){return qo})),e.d(n,"contourDensity",(function(){return Xo})),e.d(n,"dispatch",(function(){return lt})),e.d(n,"drag",(function(){return nu})),e.d(n,"dragDisable",(function(){return En})),e.d(n,"dragEnable",(function(){return Cn})),e.d(n,"dsvFormat",(function(){return au})),e.d(n,"csvParse",(function(){return fu})),e.d(n,"csvParseRows",(function(){return lu})),e.d(n,"csvFormat",(function(){return hu})),e.d(n,"csvFormatBody",(function(){return du})),e.d(n,"csvFormatRows",(function(){return pu})),e.d(n,"csvFormatRow",(function(){return bu})),e.d(n,"csvFormatValue",(function(){return vu})),e.d(n,"tsvParse",(function(){return gu})),e.d(n,"tsvParseRows",(function(){return _u})),e.d(n,"tsvFormat",(function(){return mu})),e.d(n,"tsvFormatBody",(function(){return xu})),e.d(n,"tsvFormatRows",(function(){return wu})),e.d(n,"tsvFormatRow",(function(){return Mu})),e.d(n,"tsvFormatValue",(function(){return Su})),e.d(n,"autoType",(function(){return Tu})),e.d(n,"easeLinear",(function(){return Eu})),e.d(n,"easeQuad",(function(){return ku})),e.d(n,"easeQuadIn",(function(){return Cu})),e.d(n,"easeQuadOut",(function(){return Au})),e.d(n,"easeQuadInOut",(function(){return ku})),e.d(n,"easeCubic",(function(){return Hr})),e.d(n,"easeCubicIn",(function(){return Gr})),e.d(n,"easeCubicOut",(function(){return Wr})),e.d(n,"easeCubicInOut",(function(){return Hr})),e.d(n,"easePoly",(function(){return Iu})),e.d(n,"easePolyIn",(function(){return Ou})),e.d(n,"easePolyOut",(function(){return ju})),e.d(n,"easePolyInOut",(function(){return Iu})),e.d(n,"easeSin",(function(){return Vu})),e.d(n,"easeSinIn",(function(){return zu})),e.d(n,"easeSinOut",(function(){return Du})),e.d(n,"easeSinInOut",(function(){return Vu})),e.d(n,"easeExp",(function(){return Uu})),e.d(n,"easeExpIn",(function(){return Ru})),e.d(n,"easeExpOut",(function(){return Bu})),e.d(n,"easeExpInOut",(function(){return Uu})),e.d(n,"easeCircle",(function(){return Yu})),e.d(n,"easeCircleIn",(function(){return qu})),e.d(n,"easeCircleOut",(function(){return Lu})),e.d(n,"easeCircleInOut",(function(){return Yu})),e.d(n,"easeBounce",(function(){return Wu})),e.d(n,"easeBounceIn",(function(){return Gu})),e.d(n,"easeBounceOut",(function(){return Wu})),e.d(n,"easeBounceInOut",(function(){return Hu})),e.d(n,"easeBack",(function(){return Zu})),e.d(n,"easeBackIn",(function(){return Xu})),e.d(n,"easeBackOut",(function(){return Ku})),e.d(n,"easeBackInOut",(function(){return Zu})),e.d(n,"easeElastic",(function(){return Ju})),e.d(n,"easeElasticIn",(function(){return $u})),e.d(n,"easeElasticOut",(function(){return Ju})),e.d(n,"easeElasticInOut",(function(){return tc})),e.d(n,"blob",(function(){return ec})),e.d(n,"buffer",(function(){return ic})),e.d(n,"dsv",(function(){return ac})),e.d(n,"csv",(function(){return sc})),e.d(n,"tsv",(function(){return fc})),e.d(n,"image",(function(){return lc})),e.d(n,"json",(function(){return dc})),e.d(n,"text",(function(){return uc})),e.d(n,"xml",(function(){return bc})),e.d(n,"html",(function(){return vc})),e.d(n,"svg",(function(){return yc})),e.d(n,"forceCenter",(function(){return gc})),e.d(n,"forceCollide",(function(){return Oc})),e.d(n,"forceLink",(function(){return Pc})),e.d(n,"forceManyBody",(function(){return Rc})),e.d(n,"forceRadial",(function(){return Bc})),e.d(n,"forceSimulation",(function(){return Vc})),e.d(n,"forceX",(function(){return Uc})),e.d(n,"forceY",(function(){return qc})),e.d(n,"formatDefaultLocale",(function(){return ia})),e.d(n,"format",(function(){return Zc})),e.d(n,"formatPrefix",(function(){return Qc})),e.d(n,"formatLocale",(function(){return ra})),e.d(n,"formatSpecifier",(function(){return Wc})),e.d(n,"FormatSpecifier",(function(){return Hc})),e.d(n,"precisionFixed",(function(){return oa})),e.d(n,"precisionPrefix",(function(){return ua})),e.d(n,"precisionRound",(function(){return ca})),e.d(n,"geoArea",(function(){return $a})),e.d(n,"geoBounds",(function(){return Ys})),e.d(n,"geoCentroid",(function(){return ef})),e.d(n,"geoCircle",(function(){return pf})),e.d(n,"geoClipAntimeridian",(function(){return Nf})),e.d(n,"geoClipCircle",(function(){return Ef})),e.d(n,"geoClipExtent",(function(){return jf})),e.d(n,"geoClipRectangle",(function(){return Cf})),e.d(n,"geoContains",(function(){return Zf})),e.d(n,"geoDistance",(function(){return Uf})),e.d(n,"geoGraticule",(function(){return Jf})),e.d(n,"geoGraticule10",(function(){return tl})),e.d(n,"geoInterpolate",(function(){return ol})),e.d(n,"geoLength",(function(){return Vf})),e.d(n,"geoPath",(function(){return rh})),e.d(n,"geoAlbers",(function(){return wh})),e.d(n,"geoAlbersUsa",(function(){return Mh})),e.d(n,"geoAzimuthalEqualArea",(function(){return Eh})),e.d(n,"geoAzimuthalEqualAreaRaw",(function(){return Nh})),e.d(n,"geoAzimuthalEquidistant",(function(){return Ah})),e.d(n,"geoAzimuthalEquidistantRaw",(function(){return Ch})),e.d(n,"geoConicConformal",(function(){return Fh})),e.d(n,"geoConicConformalRaw",(function(){return Ph})),e.d(n,"geoConicEqualArea",(function(){return xh})),e.d(n,"geoConicEqualAreaRaw",(function(){return mh})),e.d(n,"geoConicEquidistant",(function(){return Rh})),e.d(n,"geoConicEquidistantRaw",(function(){return Vh})),e.d(n,"geoEqualEarth",(function(){return Wh})),e.d(n,"geoEqualEarthRaw",(function(){return Gh})),e.d(n,"geoEquirectangular",(function(){return Dh})),e.d(n,"geoEquirectangularRaw",(function(){return zh})),e.d(n,"geoGnomonic",(function(){return Xh})),e.d(n,"geoGnomonicRaw",(function(){return Hh})),e.d(n,"geoIdentity",(function(){return Kh})),e.d(n,"geoProjection",(function(){return yh})),e.d(n,"geoProjectionMutator",(function(){return gh})),e.d(n,"geoMercator",(function(){return Oh})),e.d(n,"geoMercatorRaw",(function(){return kh})),e.d(n,"geoNaturalEarth1",(function(){return Qh})),e.d(n,"geoNaturalEarth1Raw",(function(){return Zh})),e.d(n,"geoOrthographic",(function(){return Jh})),e.d(n,"geoOrthographicRaw",(function(){return $h})),e.d(n,"geoStereographic",(function(){return nd})),e.d(n,"geoStereographicRaw",(function(){return td})),e.d(n,"geoTransverseMercator",(function(){return rd})),e.d(n,"geoTransverseMercatorRaw",(function(){return ed})),e.d(n,"geoRotation",(function(){return lf})),e.d(n,"geoStream",(function(){return Ya})),e.d(n,"geoTransform",(function(){return ih})),e.d(n,"cluster",(function(){return cd})),e.d(n,"hierarchy",(function(){return sd})),e.d(n,"pack",(function(){return Pd})),e.d(n,"packSiblings",(function(){return Cd})),e.d(n,"packEnclose",(function(){return bd})),e.d(n,"partition",(function(){return Bd})),e.d(n,"stratify",(function(){return Gd})),e.d(n,"tree",(function(){return $d})),e.d(n,"treemap",(function(){return rp})),e.d(n,"treemapBinary",(function(){return ip})),e.d(n,"treemapDice",(function(){return Rd})),e.d(n,"treemapSlice",(function(){return Jd})),e.d(n,"treemapSliceDice",(function(){return op})),e.d(n,"treemapSquarify",(function(){return ep})),e.d(n,"treemapResquarify",(function(){return up})),e.d(n,"interpolate",(function(){return Ae})),e.d(n,"interpolateArray",(function(){return _e})),e.d(n,"interpolateBasis",(function(){return ue})),e.d(n,"interpolateBasisClosed",(function(){return ce})),e.d(n,"interpolateDate",(function(){return xe})),e.d(n,"interpolateDiscrete",(function(){return cp})),e.d(n,"interpolateHue",(function(){return ap})),e.d(n,"interpolateNumber",(function(){return we})),e.d(n,"interpolateNumberArray",(function(){return ye})),e.d(n,"interpolateObject",(function(){return Me})),e.d(n,"interpolateRound",(function(){return sp})),e.d(n,"interpolateString",(function(){return Ce})),e.d(n,"interpolateTransformCss",(function(){return hr})),e.d(n,"interpolateTransformSvg",(function(){return dr})),e.d(n,"interpolateZoom",(function(){return hp})),e.d(n,"interpolateRgb",(function(){return de})),e.d(n,"interpolateRgbBasis",(function(){return be})),e.d(n,"interpolateRgbBasisClosed",(function(){return ve})),e.d(n,"interpolateHsl",(function(){return pp})),e.d(n,"interpolateHslLong",(function(){return bp})),e.d(n,"interpolateLab",(function(){return vp})),e.d(n,"interpolateHcl",(function(){return gp})),e.d(n,"interpolateHclLong",(function(){return _p})),e.d(n,"interpolateCubehelix",(function(){return xp})),e.d(n,"interpolateCubehelixLong",(function(){return wp})),e.d(n,"piecewise",(function(){return Mp})),e.d(n,"quantize",(function(){return Sp})),e.d(n,"path",(function(){return Li})),e.d(n,"polygonArea",(function(){return Tp})),e.d(n,"polygonCentroid",(function(){return Np})),e.d(n,"polygonHull",(function(){return Ap})),e.d(n,"polygonContains",(function(){return kp})),e.d(n,"polygonLength",(function(){return Op})),e.d(n,"quadtree",(function(){return Tc})),e.d(n,"randomUniform",(function(){return Ip})),e.d(n,"randomNormal",(function(){return Pp})),e.d(n,"randomLogNormal",(function(){return Fp})),e.d(n,"randomBates",(function(){return Dp})),e.d(n,"randomIrwinHall",(function(){return zp})),e.d(n,"randomExponential",(function(){return Vp})),e.d(n,"scaleBand",(function(){return Wp})),e.d(n,"scalePoint",(function(){return Xp})),e.d(n,"scaleIdentity",(function(){return ab})),e.d(n,"scaleLinear",(function(){return cb})),e.d(n,"scaleLog",(function(){return yb})),e.d(n,"scaleSymlog",(function(){return xb})),e.d(n,"scaleOrdinal",(function(){return Gp})),e.d(n,"scaleImplicit",(function(){return Yp})),e.d(n,"scalePow",(function(){return Nb})),e.d(n,"scaleSqrt",(function(){return Eb})),e.d(n,"scaleQuantile",(function(){return Cb})),e.d(n,"scaleQuantize",(function(){return Ab})),e.d(n,"scaleThreshold",(function(){return kb})),e.d(n,"scaleTime",(function(){return cg})),e.d(n,"scaleUtc",(function(){return yg})),e.d(n,"scaleSequential",(function(){return mg})),e.d(n,"scaleSequentialLog",(function(){return xg})),e.d(n,"scaleSequentialPow",(function(){return Mg})),e.d(n,"scaleSequentialSqrt",(function(){return Sg})),e.d(n,"scaleSequentialSymlog",(function(){return wg})),e.d(n,"scaleSequentialQuantile",(function(){return Tg})),e.d(n,"scaleDiverging",(function(){return Eg})),e.d(n,"scaleDivergingLog",(function(){return Cg})),e.d(n,"scaleDivergingPow",(function(){return kg})),e.d(n,"scaleDivergingSqrt",(function(){return Og})),e.d(n,"scaleDivergingSymlog",(function(){return Ag})),e.d(n,"tickFormat",(function(){return ob})),e.d(n,"schemeCategory10",(function(){return Ig})),e.d(n,"schemeAccent",(function(){return Pg})),e.d(n,"schemeDark2",(function(){return Fg})),e.d(n,"schemePaired",(function(){return zg})),e.d(n,"schemePastel1",(function(){return Dg})),e.d(n,"schemePastel2",(function(){return Vg})),e.d(n,"schemeSet1",(function(){return Rg})),e.d(n,"schemeSet2",(function(){return Bg})),e.d(n,"schemeSet3",(function(){return Ug})),e.d(n,"schemeTableau10",(function(){return qg})),e.d(n,"interpolateBrBG",(function(){return Gg})),e.d(n,"schemeBrBG",(function(){return Yg})),e.d(n,"interpolatePRGn",(function(){return Hg})),e.d(n,"schemePRGn",(function(){return Wg})),e.d(n,"interpolatePiYG",(function(){return Kg})),e.d(n,"schemePiYG",(function(){return Xg})),e.d(n,"interpolatePuOr",(function(){return Qg})),e.d(n,"schemePuOr",(function(){return Zg})),e.d(n,"interpolateRdBu",(function(){return Jg})),e.d(n,"schemeRdBu",(function(){return $g})),e.d(n,"interpolateRdGy",(function(){return n_})),e.d(n,"schemeRdGy",(function(){return t_})),e.d(n,"interpolateRdYlBu",(function(){return r_})),e.d(n,"schemeRdYlBu",(function(){return e_})),e.d(n,"interpolateRdYlGn",(function(){return o_})),e.d(n,"schemeRdYlGn",(function(){return i_})),e.d(n,"interpolateSpectral",(function(){return c_})),e.d(n,"schemeSpectral",(function(){return u_})),e.d(n,"interpolateBuGn",(function(){return s_})),e.d(n,"schemeBuGn",(function(){return a_})),e.d(n,"interpolateBuPu",(function(){return l_})),e.d(n,"schemeBuPu",(function(){return f_})),e.d(n,"interpolateGnBu",(function(){return d_})),e.d(n,"schemeGnBu",(function(){return h_})),e.d(n,"interpolateOrRd",(function(){return b_})),e.d(n,"schemeOrRd",(function(){return p_})),e.d(n,"interpolatePuBuGn",(function(){return y_})),e.d(n,"schemePuBuGn",(function(){return v_})),e.d(n,"interpolatePuBu",(function(){return __})),e.d(n,"schemePuBu",(function(){return g_})),e.d(n,"interpolatePuRd",(function(){return x_})),e.d(n,"schemePuRd",(function(){return m_})),e.d(n,"interpolateRdPu",(function(){return M_})),e.d(n,"schemeRdPu",(function(){return w_})),e.d(n,"interpolateYlGnBu",(function(){return T_})),e.d(n,"schemeYlGnBu",(function(){return S_})),e.d(n,"interpolateYlGn",(function(){return E_})),e.d(n,"schemeYlGn",(function(){return N_})),e.d(n,"interpolateYlOrBr",(function(){return A_})),e.d(n,"schemeYlOrBr",(function(){return C_})),e.d(n,"interpolateYlOrRd",(function(){return O_})),e.d(n,"schemeYlOrRd",(function(){return k_})),e.d(n,"interpolateBlues",(function(){return I_})),e.d(n,"schemeBlues",(function(){return j_})),e.d(n,"interpolateGreens",(function(){return F_})),e.d(n,"schemeGreens",(function(){return P_})),e.d(n,"interpolateGreys",(function(){return D_})),e.d(n,"schemeGreys",(function(){return z_})),e.d(n,"interpolatePurples",(function(){return R_})),e.d(n,"schemePurples",(function(){return V_})),e.d(n,"interpolateReds",(function(){return U_})),e.d(n,"schemeReds",(function(){return B_})),e.d(n,"interpolateOranges",(function(){return L_})),e.d(n,"schemeOranges",(function(){return q_})),e.d(n,"interpolateCividis",(function(){return Y_})),e.d(n,"interpolateCubehelixDefault",(function(){return G_})),e.d(n,"interpolateRainbow",(function(){return K_})),e.d(n,"interpolateWarm",(function(){return W_})),e.d(n,"interpolateCool",(function(){return H_})),e.d(n,"interpolateSinebow",(function(){return J_})),e.d(n,"interpolateTurbo",(function(){return tm})),e.d(n,"interpolateViridis",(function(){return em})),e.d(n,"interpolateMagma",(function(){return rm})),e.d(n,"interpolateInferno",(function(){return im})),e.d(n,"interpolatePlasma",(function(){return om})),e.d(n,"create",(function(){return um})),e.d(n,"creator",(function(){return rn})),e.d(n,"local",(function(){return am})),e.d(n,"matcher",(function(){return vt})),e.d(n,"mouse",(function(){return Ie})),e.d(n,"namespace",(function(){return St})),e.d(n,"namespaces",(function(){return Mt})),e.d(n,"clientPoint",(function(){return Oe})),e.d(n,"select",(function(){return Sn})),e.d(n,"selectAll",(function(){return fm})),e.d(n,"selection",(function(){return Mn})),e.d(n,"selector",(function(){return dt})),e.d(n,"selectorAll",(function(){return bt})),e.d(n,"style",(function(){return Ft})),e.d(n,"touch",(function(){return je})),e.d(n,"touches",(function(){return lm})),e.d(n,"window",(function(){return Ot})),e.d(n,"event",(function(){return fn})),e.d(n,"customEvent",(function(){return vn})),e.d(n,"arc",(function(){return jm})),e.d(n,"area",(function(){return Vm})),e.d(n,"line",(function(){return Dm})),e.d(n,"pie",(function(){return Um})),e.d(n,"areaRadial",(function(){return Hm})),e.d(n,"radialArea",(function(){return Hm})),e.d(n,"lineRadial",(function(){return Wm})),e.d(n,"radialLine",(function(){return Wm})),e.d(n,"pointRadial",(function(){return Xm})),e.d(n,"linkHorizontal",(function(){return ex})),e.d(n,"linkVertical",(function(){return rx})),e.d(n,"linkRadial",(function(){return ix})),e.d(n,"symbol",(function(){return wx})),e.d(n,"symbols",(function(){return xx})),e.d(n,"symbolCircle",(function(){return ox})),e.d(n,"symbolCross",(function(){return ux})),e.d(n,"symbolDiamond",(function(){return sx})),e.d(n,"symbolSquare",(function(){return px})),e.d(n,"symbolStar",(function(){return dx})),e.d(n,"symbolTriangle",(function(){return vx})),e.d(n,"symbolWye",(function(){return mx})),e.d(n,"curveBasisClosed",(function(){return Cx})),e.d(n,"curveBasisOpen",(function(){return kx})),e.d(n,"curveBasis",(function(){return Nx})),e.d(n,"curveBundle",(function(){return jx})),e.d(n,"curveCardinalClosed",(function(){return Dx})),e.d(n,"curveCardinalOpen",(function(){return Rx})),e.d(n,"curveCardinal",(function(){return Fx})),e.d(n,"curveCatmullRomClosed",(function(){return Yx})),e.d(n,"curveCatmullRomOpen",(function(){return Wx})),e.d(n,"curveCatmullRom",(function(){return qx})),e.d(n,"curveLinearClosed",(function(){return Xx})),e.d(n,"curveLinear",(function(){return Pm})),e.d(n,"curveMonotoneX",(function(){return ew})),e.d(n,"curveMonotoneY",(function(){return rw})),e.d(n,"curveNatural",(function(){return uw})),e.d(n,"curveStep",(function(){return aw})),e.d(n,"curveStepAfter",(function(){return fw})),e.d(n,"curveStepBefore",(function(){return sw})),e.d(n,"stack",(function(){return pw})),e.d(n,"stackOffsetExpand",(function(){return bw})),e.d(n,"stackOffsetDiverging",(function(){return vw})),e.d(n,"stackOffsetNone",(function(){return lw})),e.d(n,"stackOffsetSilhouette",(function(){return yw})),e.d(n,"stackOffsetWiggle",(function(){return gw})),e.d(n,"stackOrderAppearance",(function(){return _w})),e.d(n,"stackOrderAscending",(function(){return xw})),e.d(n,"stackOrderDescending",(function(){return Mw})),e.d(n,"stackOrderInsideOut",(function(){return Sw})),e.d(n,"stackOrderNone",(function(){return hw})),e.d(n,"stackOrderReverse",(function(){return Tw})),e.d(n,"timeInterval",(function(){return Ib})),e.d(n,"timeMillisecond",(function(){return pv})),e.d(n,"timeMilliseconds",(function(){return bv})),e.d(n,"utcMillisecond",(function(){return pv})),e.d(n,"utcMilliseconds",(function(){return bv})),e.d(n,"timeSecond",(function(){return lv})),e.d(n,"timeSeconds",(function(){return hv})),e.d(n,"utcSecond",(function(){return lv})),e.d(n,"utcSeconds",(function(){return hv})),e.d(n,"timeMinute",(function(){return av})),e.d(n,"timeMinutes",(function(){return sv})),e.d(n,"timeHour",(function(){return ov})),e.d(n,"timeHours",(function(){return uv})),e.d(n,"timeDay",(function(){return ev})),e.d(n,"timeDays",(function(){return rv})),e.d(n,"timeWeek",(function(){return Ub})),e.d(n,"timeWeeks",(function(){return Xb})),e.d(n,"timeSunday",(function(){return Ub})),e.d(n,"timeSundays",(function(){return Xb})),e.d(n,"timeMonday",(function(){return qb})),e.d(n,"timeMondays",(function(){return Kb})),e.d(n,"timeTuesday",(function(){return Lb})),e.d(n,"timeTuesdays",(function(){return Zb})),e.d(n,"timeWednesday",(function(){return Yb})),e.d(n,"timeWednesdays",(function(){return Qb})),e.d(n,"timeThursday",(function(){return Gb})),e.d(n,"timeThursdays",(function(){return $b})),e.d(n,"timeFriday",(function(){return Wb})),e.d(n,"timeFridays",(function(){return Jb})),e.d(n,"timeSaturday",(function(){return Hb})),e.d(n,"timeSaturdays",(function(){return tv})),e.d(n,"timeMonth",(function(){return Vb})),e.d(n,"timeMonths",(function(){return Rb})),e.d(n,"timeYear",(function(){return Fb})),e.d(n,"timeYears",(function(){return zb})),e.d(n,"utcMinute",(function(){return bg})),e.d(n,"utcMinutes",(function(){return vg})),e.d(n,"utcHour",(function(){return hg})),e.d(n,"utcHours",(function(){return dg})),e.d(n,"utcDay",(function(){return jv})),e.d(n,"utcDays",(function(){return Iv})),e.d(n,"utcWeek",(function(){return yv})),e.d(n,"utcWeeks",(function(){return Sv})),e.d(n,"utcSunday",(function(){return yv})),e.d(n,"utcSundays",(function(){return Sv})),e.d(n,"utcMonday",(function(){return gv})),e.d(n,"utcMondays",(function(){return Tv})),e.d(n,"utcTuesday",(function(){return _v})),e.d(n,"utcTuesdays",(function(){return Nv})),e.d(n,"utcWednesday",(function(){return mv})),e.d(n,"utcWednesdays",(function(){return Ev})),e.d(n,"utcThursday",(function(){return xv})),e.d(n,"utcThursdays",(function(){return Cv})),e.d(n,"utcFriday",(function(){return wv})),e.d(n,"utcFridays",(function(){return Av})),e.d(n,"utcSaturday",(function(){return Mv})),e.d(n,"utcSaturdays",(function(){return kv})),e.d(n,"utcMonth",(function(){return sg})),e.d(n,"utcMonths",(function(){return fg})),e.d(n,"utcYear",(function(){return Fv})),e.d(n,"utcYears",(function(){return zv})),e.d(n,"timeFormatDefaultLocale",(function(){return rg})),e.d(n,"timeFormat",(function(){return qv})),e.d(n,"timeParse",(function(){return Lv})),e.d(n,"utcFormat",(function(){return Yv})),e.d(n,"utcParse",(function(){return Gv})),e.d(n,"timeFormatLocale",(function(){return Bv})),e.d(n,"isoFormat",(function(){return Nw})),e.d(n,"isoParse",(function(){return Ew})),e.d(n,"now",(function(){return qe})),e.d(n,"timer",(function(){return Ge})),e.d(n,"timerFlush",(function(){return We})),e.d(n,"timeout",(function(){return Ze})),e.d(n,"interval",(function(){return Cw})),e.d(n,"transition",(function(){return qr})),e.d(n,"active",(function(){return Qr})),e.d(n,"interrupt",(function(){return cr})),e.d(n,"voronoi",(function(){return dM})),e.d(n,"zoom",(function(){return EM})),e.d(n,"zoomTransform",(function(){return gM})),e.d(n,"zoomIdentity",(function(){return yM}));var r="5.16.0",i=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},o=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return i(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}};var u=o(i),c=u.right,a=u.left,s=c,f=function(t,n){null==n&&(n=l);for(var e=0,r=t.length-1,i=t[0],o=new Array(r<0?0:r);e<r;)o[e]=n(i,i=t[++e]);return o};function l(t,n){return[t,n]}var h=function(t,n,e){var r,i,o,u,c=t.length,a=n.length,s=new Array(c*a);for(null==e&&(e=l),r=o=0;r<c;++r)for(u=t[r],i=0;i<a;++i,++o)s[o]=e(u,n[i]);return s},d=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN},p=function(t){return null===t?NaN:+t},b=function(t,n){var e,r,i=t.length,o=0,u=-1,c=0,a=0;if(null==n)for(;++u<i;)isNaN(e=p(t[u]))||(a+=(r=e-c)*(e-(c+=r/++o)));else for(;++u<i;)isNaN(e=p(n(t[u],u,t)))||(a+=(r=e-c)*(e-(c+=r/++o)));if(o>1)return a/(o-1)},v=function(t,n){var e=b(t,n);return e?Math.sqrt(e):e},y=function(t,n){var e,r,i,o=t.length,u=-1;if(null==n){for(;++u<o;)if(null!=(e=t[u])&&e>=e)for(r=i=e;++u<o;)null!=(e=t[u])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++u<o;)if(null!=(e=n(t[u],u,t))&&e>=e)for(r=i=e;++u<o;)null!=(e=n(t[u],u,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]},g=Array.prototype,_=g.slice,m=g.map,x=function(t){return function(){return t}},w=function(t){return t},M=function(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o},S=Math.sqrt(50),T=Math.sqrt(10),N=Math.sqrt(2),E=function(t,n,e){var r,i,o,u,c=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(u=C(t,n,e))||!isFinite(u))return[];if(u>0)for(t=Math.ceil(t/u),n=Math.floor(n/u),o=new Array(i=Math.ceil(n-t+1));++c<i;)o[c]=(t+c)*u;else for(t=Math.floor(t*u),n=Math.ceil(n*u),o=new Array(i=Math.ceil(t-n+1));++c<i;)o[c]=(t-c)/u;return r&&o.reverse(),o};function C(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=S?10:o>=T?5:o>=N?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=S?10:o>=T?5:o>=N?2:1)}function A(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=S?i*=10:o>=T?i*=5:o>=N&&(i*=2),n<t?-i:i}var k=function(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1},O=function(){var t=w,n=y,e=k;function r(r){var i,o,u=r.length,c=new Array(u);for(i=0;i<u;++i)c[i]=t(r[i],i,r);var a=n(c),f=a[0],l=a[1],h=e(c,f,l);Array.isArray(h)||(h=A(f,l,h),h=M(Math.ceil(f/h)*h,l,h));for(var d=h.length;h[0]<=f;)h.shift(),--d;for(;h[d-1]>l;)h.pop(),--d;var p,b=new Array(d+1);for(i=0;i<=d;++i)(p=b[i]=[]).x0=i>0?h[i-1]:f,p.x1=i<d?h[i]:l;for(i=0;i<u;++i)f<=(o=c[i])&&o<=l&&b[s(h,o,0,d)].push(r[i]);return b}return r.value=function(n){return arguments.length?(t="function"==typeof n?n:x(n),r):t},r.domain=function(t){return arguments.length?(n="function"==typeof t?t:x([t[0],t[1]]),r):n},r.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?x(_.call(t)):x(t),r):e},r},j=function(t,n,e){if(null==e&&(e=p),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,o=Math.floor(i),u=+e(t[o],o,t);return u+(+e(t[o+1],o+1,t)-u)*(i-o)}},I=function(t,n,e){return t=m.call(t,p).sort(i),Math.ceil((e-n)/(2*(j(t,.75)-j(t,.25))*Math.pow(t.length,-1/3)))},P=function(t,n,e){return Math.ceil((e-n)/(3.5*v(t)*Math.pow(t.length,-1/3)))},F=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r},z=function(t,n){var e,r=t.length,i=r,o=-1,u=0;if(null==n)for(;++o<r;)isNaN(e=p(t[o]))?--i:u+=e;else for(;++o<r;)isNaN(e=p(n(t[o],o,t)))?--i:u+=e;if(i)return u/i},D=function(t,n){var e,r=t.length,o=-1,u=[];if(null==n)for(;++o<r;)isNaN(e=p(t[o]))||u.push(e);else for(;++o<r;)isNaN(e=p(n(t[o],o,t)))||u.push(e);return j(u.sort(i),.5)},V=function(t){for(var n,e,r,i=t.length,o=-1,u=0;++o<i;)u+=t[o].length;for(e=new Array(u);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--u]=r[n];return e},R=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r},B=function(t,n){for(var e=n.length,r=new Array(e);e--;)r[e]=t[n[e]];return r},U=function(t,n){if(e=t.length){var e,r,o=0,u=0,c=t[u];for(null==n&&(n=i);++o<e;)(n(r=t[o],c)<0||0!==n(c,c))&&(c=r,u=o);return 0===n(c,c)?u:void 0}},q=function(t,n,e){for(var r,i,o=(null==e?t.length:e)-(n=null==n?0:+n);o;)i=Math.random()*o--|0,r=t[o+n],t[o+n]=t[i+n],t[i+n]=r;return t},L=function(t,n){var e,r=t.length,i=-1,o=0;if(null==n)for(;++i<r;)(e=+t[i])&&(o+=e);else for(;++i<r;)(e=+n(t[i],i,t))&&(o+=e);return o},Y=function(t){if(!(i=t.length))return[];for(var n=-1,e=R(t,G),r=new Array(e);++n<e;)for(var i,o=-1,u=r[n]=new Array(i);++o<i;)u[o]=t[o][n];return r};function G(t){return t.length}var W=function(){return Y(arguments)},H=Array.prototype.slice,X=function(t){return t};function K(t){return"translate("+(t+.5)+",0)"}function Z(t){return"translate(0,"+(t+.5)+")"}function Q(t){return function(n){return+t(n)}}function $(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}function J(){return!this.__axis}function tt(t,n){var e=[],r=null,i=null,o=6,u=6,c=3,a=1===t||4===t?-1:1,s=4===t||2===t?"x":"y",f=1===t||3===t?K:Z;function l(l){var h=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,d=null==i?n.tickFormat?n.tickFormat.apply(n,e):X:i,p=Math.max(o,0)+c,b=n.range(),v=+b[0]+.5,y=+b[b.length-1]+.5,g=(n.bandwidth?$:Q)(n.copy()),_=l.selection?l.selection():l,m=_.selectAll(".domain").data([null]),x=_.selectAll(".tick").data(h,n).order(),w=x.exit(),M=x.enter().append("g").attr("class","tick"),S=x.select("line"),T=x.select("text");m=m.merge(m.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),x=x.merge(M),S=S.merge(M.append("line").attr("stroke","currentColor").attr(s+"2",a*o)),T=T.merge(M.append("text").attr("fill","currentColor").attr(s,a*p).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),l!==_&&(m=m.transition(l),x=x.transition(l),S=S.transition(l),T=T.transition(l),w=w.transition(l).attr("opacity",1e-6).attr("transform",(function(t){return isFinite(t=g(t))?f(t):this.getAttribute("transform")})),M.attr("opacity",1e-6).attr("transform",(function(t){var n=this.parentNode.__axis;return f(n&&isFinite(n=n(t))?n:g(t))}))),w.remove(),m.attr("d",4===t||2==t?u?"M"+a*u+","+v+"H0.5V"+y+"H"+a*u:"M0.5,"+v+"V"+y:u?"M"+v+","+a*u+"V0.5H"+y+"V"+a*u:"M"+v+",0.5H"+y),x.attr("opacity",1).attr("transform",(function(t){return f(g(t))})),S.attr(s+"2",a*o),T.attr(s,a*p).text(d),_.filter(J).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),_.each((function(){this.__axis=g}))}return l.scale=function(t){return arguments.length?(n=t,l):n},l.ticks=function(){return e=H.call(arguments),l},l.tickArguments=function(t){return arguments.length?(e=null==t?[]:H.call(t),l):e.slice()},l.tickValues=function(t){return arguments.length?(r=null==t?null:H.call(t),l):r&&r.slice()},l.tickFormat=function(t){return arguments.length?(i=t,l):i},l.tickSize=function(t){return arguments.length?(o=u=+t,l):o},l.tickSizeInner=function(t){return arguments.length?(o=+t,l):o},l.tickSizeOuter=function(t){return arguments.length?(u=+t,l):u},l.tickPadding=function(t){return arguments.length?(c=+t,l):c},l}function nt(t){return tt(1,t)}function et(t){return tt(2,t)}function rt(t){return tt(3,t)}function it(t){return tt(4,t)}var ot={value:function(){}};function ut(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new ct(r)}function ct(t){this._=t}function at(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function st(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function ft(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=ot,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}ct.prototype=ut.prototype={constructor:ct,on:function(t,n){var e,r=this._,i=at(t+"",r),o=-1,u=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<u;)if(e=(t=i[o]).type)r[e]=ft(r[e],t.name,n);else if(null==n)for(e in r)r[e]=ft(r[e],t.name,null);return this}for(;++o<u;)if((e=(t=i[o]).type)&&(e=st(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new ct(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var lt=ut;function ht(){}var dt=function(t){return null==t?ht:function(){return this.querySelector(t)}};function pt(){return[]}var bt=function(t){return null==t?pt:function(){return this.querySelectorAll(t)}},vt=function(t){return function(){return this.matches(t)}},yt=function(t){return new Array(t.length)};function gt(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}gt.prototype={constructor:gt,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function _t(t,n,e,r,i,o){for(var u,c=0,a=n.length,s=o.length;c<s;++c)(u=n[c])?(u.__data__=o[c],r[c]=u):e[c]=new gt(t,o[c]);for(;c<a;++c)(u=n[c])&&(i[c]=u)}function mt(t,n,e,r,i,o,u){var c,a,s,f={},l=n.length,h=o.length,d=new Array(l);for(c=0;c<l;++c)(a=n[c])&&(d[c]=s="$"+u.call(a,a.__data__,c,n),s in f?i[c]=a:f[s]=a);for(c=0;c<h;++c)(a=f[s="$"+u.call(t,o[c],c,o)])?(r[c]=a,a.__data__=o[c],f[s]=null):e[c]=new gt(t,o[c]);for(c=0;c<l;++c)(a=n[c])&&f[d[c]]===a&&(i[c]=a)}function xt(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var wt="http://www.w3.org/1999/xhtml",Mt={svg:"http://www.w3.org/2000/svg",xhtml:wt,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},St=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),Mt.hasOwnProperty(n)?{space:Mt[n],local:t}:t};function Tt(t){return function(){this.removeAttribute(t)}}function Nt(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Et(t,n){return function(){this.setAttribute(t,n)}}function Ct(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function At(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function kt(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}var Ot=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function jt(t){return function(){this.style.removeProperty(t)}}function It(t,n,e){return function(){this.style.setProperty(t,n,e)}}function Pt(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function Ft(t,n){return t.style.getPropertyValue(n)||Ot(t).getComputedStyle(t,null).getPropertyValue(n)}function zt(t){return function(){delete this[t]}}function Dt(t,n){return function(){this[t]=n}}function Vt(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function Rt(t){return t.trim().split(/^|\s+/)}function Bt(t){return t.classList||new Ut(t)}function Ut(t){this._node=t,this._names=Rt(t.getAttribute("class")||"")}function qt(t,n){for(var e=Bt(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function Lt(t,n){for(var e=Bt(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function Yt(t){return function(){qt(this,t)}}function Gt(t){return function(){Lt(this,t)}}function Wt(t,n){return function(){(n.apply(this,arguments)?qt:Lt)(this,t)}}Ut.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function Ht(){this.textContent=""}function Xt(t){return function(){this.textContent=t}}function Kt(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function Zt(){this.innerHTML=""}function Qt(t){return function(){this.innerHTML=t}}function $t(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function Jt(){this.nextSibling&&this.parentNode.appendChild(this)}function tn(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function nn(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===wt&&n.documentElement.namespaceURI===wt?n.createElement(t):n.createElementNS(e,t)}}function en(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var rn=function(t){var n=St(t);return(n.local?en:nn)(n)};function on(){return null}function un(){var t=this.parentNode;t&&t.removeChild(this)}function cn(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function an(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}var sn={},fn=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(sn={mouseenter:"mouseover",mouseleave:"mouseout"}));function ln(t,n,e){return t=hn(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function hn(t,n,e){return function(r){var i=fn;fn=r;try{t.call(this,this.__data__,n,e)}finally{fn=i}}}function dn(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function pn(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function bn(t,n,e){var r=sn.hasOwnProperty(t.type)?ln:hn;return function(i,o,u){var c,a=this.__on,s=r(n,o,u);if(a)for(var f=0,l=a.length;f<l;++f)if((c=a[f]).type===t.type&&c.name===t.name)return this.removeEventListener(c.type,c.listener,c.capture),this.addEventListener(c.type,c.listener=s,c.capture=e),void(c.value=n);this.addEventListener(t.type,s,e),c={type:t.type,name:t.name,value:n,listener:s,capture:e},a?a.push(c):this.__on=[c]}}function vn(t,n,e,r){var i=fn;t.sourceEvent=fn,fn=t;try{return n.apply(e,r)}finally{fn=i}}function yn(t,n,e){var r=Ot(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function gn(t,n){return function(){return yn(this,t,n)}}function _n(t,n){return function(){return yn(this,t,n.apply(this,arguments))}}var mn=[null];function xn(t,n){this._groups=t,this._parents=n}function wn(){return new xn([[document.documentElement]],mn)}xn.prototype=wn.prototype={constructor:xn,select:function(t){"function"!=typeof t&&(t=dt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u,c=n[i],a=c.length,s=r[i]=new Array(a),f=0;f<a;++f)(o=c[f])&&(u=t.call(o,o.__data__,f,c))&&("__data__"in o&&(u.__data__=o.__data__),s[f]=u);return new xn(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=bt(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var u,c=n[o],a=c.length,s=0;s<a;++s)(u=c[s])&&(r.push(t.call(u,u.__data__,s,c)),i.push(u));return new xn(r,i)},filter:function(t){"function"!=typeof t&&(t=vt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],c=u.length,a=r[i]=[],s=0;s<c;++s)(o=u[s])&&t.call(o,o.__data__,s,u)&&a.push(o);return new xn(r,this._parents)},data:function(t,n){if(!t)return p=new Array(this.size()),f=-1,this.each((function(t){p[++f]=t})),p;var e,r=n?mt:_t,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var u=o.length,c=new Array(u),a=new Array(u),s=new Array(u),f=0;f<u;++f){var l=i[f],h=o[f],d=h.length,p=t.call(l,l&&l.__data__,f,i),b=p.length,v=a[f]=new Array(b),y=c[f]=new Array(b);r(l,h,v,y,s[f]=new Array(d),p,n);for(var g,_,m=0,x=0;m<b;++m)if(g=v[m]){for(m>=x&&(x=m+1);!(_=y[x])&&++x<b;);g._next=_||null}}return(c=new xn(c,i))._enter=a,c._exit=s,c},enter:function(){return new xn(this._enter||this._groups.map(yt),this._parents)},exit:function(){return new xn(this._exit||this._groups.map(yt),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),c=0;c<o;++c)for(var a,s=n[c],f=e[c],l=s.length,h=u[c]=new Array(l),d=0;d<l;++d)(a=s[d]||f[d])&&(h[d]=a);for(;c<r;++c)u[c]=n[c];return new xn(u,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,u=i[o];--o>=0;)(r=i[o])&&(u&&4^r.compareDocumentPosition(u)&&u.parentNode.insertBefore(r,u),u=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=xt);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var u,c=e[o],a=c.length,s=i[o]=new Array(a),f=0;f<a;++f)(u=c[f])&&(s[f]=u);s.sort(n)}return new xn(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var u=r[i];if(u)return u}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],u=0,c=o.length;u<c;++u)(i=o[u])&&t.call(i,i.__data__,u,o);return this},attr:function(t,n){var e=St(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?Nt:Tt:"function"==typeof n?e.local?kt:At:e.local?Ct:Et)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?jt:"function"==typeof n?Pt:It)(t,n,null==e?"":e)):Ft(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?zt:"function"==typeof n?Vt:Dt)(t,n)):this.node()[t]},classed:function(t,n){var e=Rt(t+"");if(arguments.length<2){for(var r=Bt(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?Wt:n?Yt:Gt)(e,n))},text:function(t){return arguments.length?this.each(null==t?Ht:("function"==typeof t?Kt:Xt)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Zt:("function"==typeof t?$t:Qt)(t)):this.node().innerHTML},raise:function(){return this.each(Jt)},lower:function(){return this.each(tn)},append:function(t){var n="function"==typeof t?t:rn(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:rn(t),r=null==n?on:"function"==typeof n?n:dt(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(un)},clone:function(t){return this.select(t?an:cn)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=dn(t+""),u=o.length;if(!(arguments.length<2)){for(c=n?bn:pn,null==e&&(e=!1),r=0;r<u;++r)this.each(c(o[r],n,e));return this}var c=this.node().__on;if(c)for(var a,s=0,f=c.length;s<f;++s)for(r=0,a=c[s];r<u;++r)if((i=o[r]).type===a.type&&i.name===a.name)return a.value},dispatch:function(t,n){return this.each(("function"==typeof n?_n:gn)(t,n))}};var Mn=wn,Sn=function(t){return"string"==typeof t?new xn([[document.querySelector(t)]],[document.documentElement]):new xn([[t]],mn)};function Tn(){fn.stopImmediatePropagation()}var Nn=function(){fn.preventDefault(),fn.stopImmediatePropagation()},En=function(t){var n=t.document.documentElement,e=Sn(t).on("dragstart.drag",Nn,!0);"onselectstart"in n?e.on("selectstart.drag",Nn,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")};function Cn(t,n){var e=t.document.documentElement,r=Sn(t).on("dragstart.drag",null);n&&(r.on("click.drag",Nn,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}var An=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function kn(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function On(){}var jn="\\s*([+-]?\\d+)\\s*",In="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Pn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Fn=/^#([0-9a-f]{3,8})$/,zn=new RegExp("^rgb\\("+[jn,jn,jn]+"\\)$"),Dn=new RegExp("^rgb\\("+[Pn,Pn,Pn]+"\\)$"),Vn=new RegExp("^rgba\\("+[jn,jn,jn,In]+"\\)$"),Rn=new RegExp("^rgba\\("+[Pn,Pn,Pn,In]+"\\)$"),Bn=new RegExp("^hsl\\("+[In,Pn,Pn]+"\\)$"),Un=new RegExp("^hsla\\("+[In,Pn,Pn,In]+"\\)$"),qn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Ln(){return this.rgb().formatHex()}function Yn(){return this.rgb().formatRgb()}function Gn(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=Fn.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?Wn(n):3===e?new Zn(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?Hn(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?Hn(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=zn.exec(t))?new Zn(n[1],n[2],n[3],1):(n=Dn.exec(t))?new Zn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=Vn.exec(t))?Hn(n[1],n[2],n[3],n[4]):(n=Rn.exec(t))?Hn(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=Bn.exec(t))?te(n[1],n[2]/100,n[3]/100,1):(n=Un.exec(t))?te(n[1],n[2]/100,n[3]/100,n[4]):qn.hasOwnProperty(t)?Wn(qn[t]):"transparent"===t?new Zn(NaN,NaN,NaN,0):null}function Wn(t){return new Zn(t>>16&255,t>>8&255,255&t,1)}function Hn(t,n,e,r){return r<=0&&(t=n=e=NaN),new Zn(t,n,e,r)}function Xn(t){return t instanceof On||(t=Gn(t)),t?new Zn((t=t.rgb()).r,t.g,t.b,t.opacity):new Zn}function Kn(t,n,e,r){return 1===arguments.length?Xn(t):new Zn(t,n,e,null==r?1:r)}function Zn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function Qn(){return"#"+Jn(this.r)+Jn(this.g)+Jn(this.b)}function $n(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Jn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function te(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new re(t,n,e,r)}function ne(t){if(t instanceof re)return new re(t.h,t.s,t.l,t.opacity);if(t instanceof On||(t=Gn(t)),!t)return new re;if(t instanceof re)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),u=NaN,c=o-i,a=(o+i)/2;return c?(u=n===o?(e-r)/c+6*(e<r):e===o?(r-n)/c+2:(n-e)/c+4,c/=a<.5?o+i:2-o-i,u*=60):c=a>0&&a<1?0:u,new re(u,c,a,t.opacity)}function ee(t,n,e,r){return 1===arguments.length?ne(t):new re(t,n,e,null==r?1:r)}function re(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function ie(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function oe(t,n,e,r,i){var o=t*t,u=o*t;return((1-3*t+3*o-u)*n+(4-6*o+3*u)*e+(1+3*t+3*o-3*u)*r+u*i)/6}An(On,Gn,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:Ln,formatHex:Ln,formatHsl:function(){return ne(this).formatHsl()},formatRgb:Yn,toString:Yn}),An(Zn,Kn,kn(On,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Zn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Zn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Qn,formatHex:Qn,formatRgb:$n,toString:$n})),An(re,ee,kn(On,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new re(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new re(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Zn(ie(t>=240?t-240:t+120,i,r),ie(t,i,r),ie(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var ue=function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],u=r>0?t[r-1]:2*i-o,c=r<n-1?t[r+2]:2*o-i;return oe((e-r/n)*n,u,i,o,c)}},ce=function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],u=t[(r+1)%n],c=t[(r+2)%n];return oe((e-r/n)*n,i,o,u,c)}},ae=function(t){return function(){return t}};function se(t,n){return function(e){return t+e*n}}function fe(t,n){var e=n-t;return e?se(t,e>180||e<-180?e-360*Math.round(e/360):e):ae(isNaN(t)?n:t)}function le(t){return 1==(t=+t)?he:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):ae(isNaN(n)?e:n)}}function he(t,n){var e=n-t;return e?se(t,e):ae(isNaN(t)?n:t)}var de=function t(n){var e=le(n);function r(t,n){var r=e((t=Kn(t)).r,(n=Kn(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),u=he(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=u(n),t+""}}return r.gamma=t,r}(1);function pe(t){return function(n){var e,r,i=n.length,o=new Array(i),u=new Array(i),c=new Array(i);for(e=0;e<i;++e)r=Kn(n[e]),o[e]=r.r||0,u[e]=r.g||0,c[e]=r.b||0;return o=t(o),u=t(u),c=t(c),r.opacity=1,function(t){return r.r=o(t),r.g=u(t),r.b=c(t),r+""}}}var be=pe(ue),ve=pe(ce),ye=function(t,n){n||(n=[]);var e,r=t?Math.min(n.length,t.length):0,i=n.slice();return function(o){for(e=0;e<r;++e)i[e]=t[e]*(1-o)+n[e]*o;return i}};function ge(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}var _e=function(t,n){return(ge(n)?ye:me)(t,n)};function me(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),u=new Array(r);for(e=0;e<i;++e)o[e]=Ae(t[e],n[e]);for(;e<r;++e)u[e]=n[e];return function(t){for(e=0;e<i;++e)u[e]=o[e](t);return u}}var xe=function(t,n){var e=new Date;return t=+t,n=+n,function(r){return e.setTime(t*(1-r)+n*r),e}},we=function(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}},Me=function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=Ae(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}},Se=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Te=new RegExp(Se.source,"g");var Ne,Ee,Ce=function(t,n){var e,r,i,o=Se.lastIndex=Te.lastIndex=0,u=-1,c=[],a=[];for(t+="",n+="";(e=Se.exec(t))&&(r=Te.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),c[u]?c[u]+=i:c[++u]=i),(e=e[0])===(r=r[0])?c[u]?c[u]+=r:c[++u]=r:(c[++u]=null,a.push({i:u,x:we(e,r)})),o=Te.lastIndex;return o<n.length&&(i=n.slice(o),c[u]?c[u]+=i:c[++u]=i),c.length<2?a[0]?function(t){return function(n){return t(n)+""}}(a[0].x):function(t){return function(){return t}}(n):(n=a.length,function(t){for(var e,r=0;r<n;++r)c[(e=a[r]).i]=e.x(t);return c.join("")})},Ae=function(t,n){var e,r=typeof n;return null==n||"boolean"===r?ae(n):("number"===r?we:"string"===r?(e=Gn(n))?(n=e,de):Ce:n instanceof Gn?de:n instanceof Date?xe:ge(n)?ye:Array.isArray(n)?me:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?Me:we)(t,n)},ke=function(){for(var t,n=fn;t=n.sourceEvent;)n=t;return n},Oe=function(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]},je=function(t,n,e){arguments.length<3&&(e=n,n=ke().changedTouches);for(var r,i=0,o=n?n.length:0;i<o;++i)if((r=n[i]).identifier===e)return Oe(t,r);return null},Ie=function(t){var n=ke();return n.changedTouches&&(n=n.changedTouches[0]),Oe(t,n)},Pe=0,Fe=0,ze=0,De=0,Ve=0,Re=0,Be="object"==typeof performance&&performance.now?performance:Date,Ue="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function qe(){return Ve||(Ue(Le),Ve=Be.now()+Re)}function Le(){Ve=0}function Ye(){this._call=this._time=this._next=null}function Ge(t,n,e){var r=new Ye;return r.restart(t,n,e),r}function We(){qe(),++Pe;for(var t,n=Ne;n;)(t=Ve-n._time)>=0&&n._call.call(null,t),n=n._next;--Pe}function He(){Ve=(De=Be.now())+Re,Pe=Fe=0;try{We()}finally{Pe=0,function(){var t,n,e=Ne,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:Ne=n);Ee=t,Ke(r)}(),Ve=0}}function Xe(){var t=Be.now(),n=t-De;n>1e3&&(Re-=n,De=t)}function Ke(t){Pe||(Fe&&(Fe=clearTimeout(Fe)),t-Ve>24?(t<1/0&&(Fe=setTimeout(He,t-Be.now()-Re)),ze&&(ze=clearInterval(ze))):(ze||(De=Be.now(),ze=setInterval(Xe,1e3)),Pe=1,Ue(He)))}Ye.prototype=Ge.prototype={constructor:Ye,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?qe():+e)+(null==n?0:+n),this._next||Ee===this||(Ee?Ee._next=this:Ne=this,Ee=this),this._call=t,this._time=e,Ke()},stop:function(){this._call&&(this._call=null,this._time=1/0,Ke())}};var Ze=function(t,n,e){var r=new Ye;return n=null==n?0:+n,r.restart((function(e){r.stop(),t(e+n)}),n,e),r},Qe=lt("start","end","cancel","interrupt"),$e=[],Je=function(t,n,e,r,i,o){var u=t.__transition;if(u){if(e in u)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(a){var s,f,l,h;if(1!==e.state)return c();for(s in i)if((h=i[s]).name===e.name){if(3===h.state)return Ze(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[s]):+s<n&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[s])}if(Ze((function(){3===e.state&&(e.state=4,e.timer.restart(u,e.delay,e.time),u(a))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(l=e.tween.length),s=0,f=-1;s<l;++s)(h=e.tween[s].value.call(t,t.__data__,e.index,e.group))&&(r[++f]=h);r.length=f+1}}function u(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(c),e.state=5,1),o=-1,u=r.length;++o<u;)r[o].call(t,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),c())}function c(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Ge((function(t){e.state=1,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:Qe,tween:$e,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})};function tr(t,n){var e=er(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function nr(t,n){var e=er(t,n);if(e.state>3)throw new Error("too late; already running");return e}function er(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var rr,ir,or,ur,cr=function(t,n){var e,r,i,o=t.__transition,u=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):u=!1;u&&delete t.__transition}},ar=180/Math.PI,sr={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},fr=function(t,n,e,r,i,o){var u,c,a;return(u=Math.sqrt(t*t+n*n))&&(t/=u,n/=u),(a=t*e+n*r)&&(e-=t*a,r-=n*a),(c=Math.sqrt(e*e+r*r))&&(e/=c,r/=c,a/=c),t*r<n*e&&(t=-t,n=-n,a=-a,u=-u),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*ar,skewX:Math.atan(a)*ar,scaleX:u,scaleY:c}};function lr(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,u){var c=[],a=[];return o=t(o),u=t(u),function(t,r,i,o,u,c){if(t!==i||r!==o){var a=u.push("translate(",null,n,null,e);c.push({i:a-4,x:we(t,i)},{i:a-2,x:we(r,o)})}else(i||o)&&u.push("translate("+i+n+o+e)}(o.translateX,o.translateY,u.translateX,u.translateY,c,a),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:we(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,u.rotate,c,a),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:we(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,u.skewX,c,a),function(t,n,e,r,o,u){if(t!==e||n!==r){var c=o.push(i(o)+"scale(",null,",",null,")");u.push({i:c-4,x:we(t,e)},{i:c-2,x:we(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,u.scaleX,u.scaleY,c,a),o=u=null,function(t){for(var n,e=-1,r=a.length;++e<r;)c[(n=a[e]).i]=n.x(t);return c.join("")}}}var hr=lr((function(t){return"none"===t?sr:(rr||(rr=document.createElement("DIV"),ir=document.documentElement,or=document.defaultView),rr.style.transform=t,t=or.getComputedStyle(ir.appendChild(rr),null).getPropertyValue("transform"),ir.removeChild(rr),t=t.slice(7,-1).split(","),fr(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),dr=lr((function(t){return null==t?sr:(ur||(ur=document.createElementNS("http://www.w3.org/2000/svg","g")),ur.setAttribute("transform",t),(t=ur.transform.baseVal.consolidate())?(t=t.matrix,fr(t.a,t.b,t.c,t.d,t.e,t.f)):sr)}),", ",")",")");function pr(t,n){var e,r;return function(){var i=nr(this,t),o=i.tween;if(o!==e)for(var u=0,c=(r=e=o).length;u<c;++u)if(r[u].name===n){(r=r.slice()).splice(u,1);break}i.tween=r}}function br(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=nr(this,t),u=o.tween;if(u!==r){i=(r=u).slice();for(var c={name:n,value:e},a=0,s=i.length;a<s;++a)if(i[a].name===n){i[a]=c;break}a===s&&i.push(c)}o.tween=i}}function vr(t,n,e){var r=t._id;return t.each((function(){var t=nr(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return er(t,r).value[n]}}var yr=function(t,n){var e;return("number"==typeof n?we:n instanceof Gn?de:(e=Gn(n))?(n=e,de):Ce)(t,n)};function gr(t){return function(){this.removeAttribute(t)}}function _r(t){return function(){this.removeAttributeNS(t.space,t.local)}}function mr(t,n,e){var r,i,o=e+"";return function(){var u=this.getAttribute(t);return u===o?null:u===r?i:i=n(r=u,e)}}function xr(t,n,e){var r,i,o=e+"";return function(){var u=this.getAttributeNS(t.space,t.local);return u===o?null:u===r?i:i=n(r=u,e)}}function wr(t,n,e){var r,i,o;return function(){var u,c,a=e(this);if(null!=a)return(u=this.getAttribute(t))===(c=a+"")?null:u===r&&c===i?o:(i=c,o=n(r=u,a));this.removeAttribute(t)}}function Mr(t,n,e){var r,i,o;return function(){var u,c,a=e(this);if(null!=a)return(u=this.getAttributeNS(t.space,t.local))===(c=a+"")?null:u===r&&c===i?o:(i=c,o=n(r=u,a));this.removeAttributeNS(t.space,t.local)}}function Sr(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function Tr(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function Nr(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&Tr(t,i)),e}return i._value=n,i}function Er(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&Sr(t,i)),e}return i._value=n,i}function Cr(t,n){return function(){tr(this,t).delay=+n.apply(this,arguments)}}function Ar(t,n){return n=+n,function(){tr(this,t).delay=n}}function kr(t,n){return function(){nr(this,t).duration=+n.apply(this,arguments)}}function Or(t,n){return n=+n,function(){nr(this,t).duration=n}}function jr(t,n){if("function"!=typeof n)throw new Error;return function(){nr(this,t).ease=n}}function Ir(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?tr:nr;return function(){var u=o(this,t),c=u.on;c!==r&&(i=(r=c).copy()).on(n,e),u.on=i}}var Pr=Mn.prototype.constructor;function Fr(t){return function(){this.style.removeProperty(t)}}function zr(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function Dr(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&zr(t,o,e)),r}return o._value=n,o}function Vr(t){return function(n){this.textContent=t.call(this,n)}}function Rr(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&Vr(r)),n}return r._value=t,r}var Br=0;function Ur(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function qr(t){return Mn().transition(t)}function Lr(){return++Br}var Yr=Mn.prototype;function Gr(t){return t*t*t}function Wr(t){return--t*t*t+1}function Hr(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}Ur.prototype=qr.prototype={constructor:Ur,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=dt(t));for(var r=this._groups,i=r.length,o=new Array(i),u=0;u<i;++u)for(var c,a,s=r[u],f=s.length,l=o[u]=new Array(f),h=0;h<f;++h)(c=s[h])&&(a=t.call(c,c.__data__,h,s))&&("__data__"in c&&(a.__data__=c.__data__),l[h]=a,Je(l[h],n,e,h,l,er(c,e)));return new Ur(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=bt(t));for(var r=this._groups,i=r.length,o=[],u=[],c=0;c<i;++c)for(var a,s=r[c],f=s.length,l=0;l<f;++l)if(a=s[l]){for(var h,d=t.call(a,a.__data__,l,s),p=er(a,e),b=0,v=d.length;b<v;++b)(h=d[b])&&Je(h,n,e,b,d,p);o.push(d),u.push(a)}return new Ur(o,u,n,e)},filter:function(t){"function"!=typeof t&&(t=vt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],c=u.length,a=r[i]=[],s=0;s<c;++s)(o=u[s])&&t.call(o,o.__data__,s,u)&&a.push(o);return new Ur(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),c=0;c<o;++c)for(var a,s=n[c],f=e[c],l=s.length,h=u[c]=new Array(l),d=0;d<l;++d)(a=s[d]||f[d])&&(h[d]=a);for(;c<r;++c)u[c]=n[c];return new Ur(u,this._parents,this._name,this._id)},selection:function(){return new Pr(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=Lr(),r=this._groups,i=r.length,o=0;o<i;++o)for(var u,c=r[o],a=c.length,s=0;s<a;++s)if(u=c[s]){var f=er(u,n);Je(u,t,e,s,c,{time:f.time+f.delay+f.duration,delay:0,duration:f.duration,ease:f.ease})}return new Ur(r,this._parents,t,e)},call:Yr.call,nodes:Yr.nodes,node:Yr.node,size:Yr.size,empty:Yr.empty,each:Yr.each,on:function(t,n){var e=this._id;return arguments.length<2?er(this.node(),e).on.on(t):this.each(Ir(e,t,n))},attr:function(t,n){var e=St(t),r="transform"===e?dr:yr;return this.attrTween(t,"function"==typeof n?(e.local?Mr:wr)(e,r,vr(this,"attr."+t,n)):null==n?(e.local?_r:gr)(e):(e.local?xr:mr)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=St(t);return this.tween(e,(r.local?Nr:Er)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?hr:yr;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=Ft(this,t),u=(this.style.removeProperty(t),Ft(this,t));return o===u?null:o===e&&u===r?i:i=n(e=o,r=u)}}(t,r)).on("end.style."+t,Fr(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var u=Ft(this,t),c=e(this),a=c+"";return null==c&&(this.style.removeProperty(t),a=c=Ft(this,t)),u===a?null:u===r&&a===i?o:(i=a,o=n(r=u,c))}}(t,r,vr(this,"style."+t,n))).each(function(t,n){var e,r,i,o,u="style."+n,c="end."+u;return function(){var a=nr(this,t),s=a.on,f=null==a.value[u]?o||(o=Fr(n)):void 0;s===e&&i===f||(r=(e=s).copy()).on(c,i=f),a.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var u=Ft(this,t);return u===o?null:u===r?i:i=n(r=u,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,Dr(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(vr(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,Rr(t))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=er(this.node(),e).tween,o=0,u=i.length;o<u;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?pr:br)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Cr:Ar)(n,t)):er(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?kr:Or)(n,t)):er(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(jr(n,t)):er(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(o,u){var c={value:u},a={value:function(){0==--i&&o()}};e.each((function(){var e=nr(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(c),n._.interrupt.push(c),n._.end.push(a)),e.on=n}))}))}};var Xr={time:null,delay:0,duration:250,ease:Hr};function Kr(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return Xr.time=qe(),Xr;return e}Mn.prototype.interrupt=function(t){return this.each((function(){cr(this,t)}))},Mn.prototype.transition=function(t){var n,e;t instanceof Ur?(n=t._id,t=t._name):(n=Lr(),(e=Xr).time=qe(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var u,c=r[o],a=c.length,s=0;s<a;++s)(u=c[s])&&Je(u,t,n,s,c,e||Kr(u,n));return new Ur(r,this._parents,t,n)};var Zr=[null],Qr=function(t,n){var e,r,i=t.__transition;if(i)for(r in n=null==n?null:n+"",i)if((e=i[r]).state>1&&e.name===n)return new Ur([[t]],Zr,n,+r);return null},$r=function(t){return function(){return t}},Jr=function(t,n,e){this.target=t,this.type=n,this.selection=e};function ti(){fn.stopImmediatePropagation()}var ni=function(){fn.preventDefault(),fn.stopImmediatePropagation()},ei={name:"drag"},ri={name:"space"},ii={name:"handle"},oi={name:"center"};function ui(t){return[+t[0],+t[1]]}function ci(t){return[ui(t[0]),ui(t[1])]}function ai(t){return function(n){return je(n,fn.touches,t)}}var si={name:"x",handles:["w","e"].map(yi),input:function(t,n){return null==t?null:[[+t[0],n[0][1]],[+t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},fi={name:"y",handles:["n","s"].map(yi),input:function(t,n){return null==t?null:[[n[0][0],+t[0]],[n[1][0],+t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},li={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(yi),input:function(t){return null==t?null:ci(t)},output:function(t){return t}},hi={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},di={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},pi={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},bi={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},vi={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function yi(t){return{type:t}}function gi(){return!fn.ctrlKey&&!fn.button}function _i(){var t=this.ownerSVGElement||this;return t.hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function mi(){return navigator.maxTouchPoints||"ontouchstart"in this}function xi(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function wi(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Mi(t){var n=t.__brush;return n?n.dim.output(n.selection):null}function Si(){return Ei(si)}function Ti(){return Ei(fi)}var Ni=function(){return Ei(li)};function Ei(t){var n,e=_i,r=gi,i=mi,o=!0,u=lt("start","brush","end"),c=6;function a(n){var e=n.property("__brush",b).selectAll(".overlay").data([yi("overlay")]);e.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",hi.overlay).merge(e).each((function(){var t=xi(this).extent;Sn(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])})),n.selectAll(".selection").data([yi("selection")]).enter().append("rect").attr("class","selection").attr("cursor",hi.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=n.selectAll(".handle").data(t.handles,(function(t){return t.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(t){return"handle handle--"+t.type})).attr("cursor",(function(t){return hi[t.type]})),n.each(s).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",h).filter(i).on("touchstart.brush",h).on("touchmove.brush",d).on("touchend.brush touchcancel.brush",p).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function s(){var t=Sn(this),n=xi(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",(function(t){return"e"===t.type[t.type.length-1]?n[1][0]-c/2:n[0][0]-c/2})).attr("y",(function(t){return"s"===t.type[0]?n[1][1]-c/2:n[0][1]-c/2})).attr("width",(function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+c:c})).attr("height",(function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+c:c}))):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function f(t,n,e){return!e&&t.__brush.emitter||new l(t,n)}function l(t,n){this.that=t,this.args=n,this.state=t.__brush,this.active=0}function h(){if((!n||fn.touches)&&r.apply(this,arguments)){var e,i,u,c,a,l,h,d,p,b,v,y=this,g=fn.target.__data__.type,_="selection"===(o&&fn.metaKey?g="overlay":g)?ei:o&&fn.altKey?oi:ii,m=t===fi?null:bi[g],x=t===si?null:vi[g],w=xi(y),M=w.extent,S=w.selection,T=M[0][0],N=M[0][1],E=M[1][0],C=M[1][1],A=0,k=0,O=m&&x&&o&&fn.shiftKey,j=fn.touches?ai(fn.changedTouches[0].identifier):Ie,I=j(y),P=I,F=f(y,arguments,!0).beforestart();"overlay"===g?(S&&(p=!0),w.selection=S=[[e=t===fi?T:I[0],u=t===si?N:I[1]],[a=t===fi?E:e,h=t===si?C:u]]):(e=S[0][0],u=S[0][1],a=S[1][0],h=S[1][1]),i=e,c=u,l=a,d=h;var z=Sn(y).attr("pointer-events","none"),D=z.selectAll(".overlay").attr("cursor",hi[g]);if(fn.touches)F.moved=R,F.ended=U;else{var V=Sn(fn.view).on("mousemove.brush",R,!0).on("mouseup.brush",U,!0);o&&V.on("keydown.brush",q,!0).on("keyup.brush",L,!0),En(fn.view)}ti(),cr(y),s.call(y),F.start()}function R(){var t=j(y);!O||b||v||(Math.abs(t[0]-P[0])>Math.abs(t[1]-P[1])?v=!0:b=!0),P=t,p=!0,ni(),B()}function B(){var t;switch(A=P[0]-I[0],k=P[1]-I[1],_){case ri:case ei:m&&(A=Math.max(T-e,Math.min(E-a,A)),i=e+A,l=a+A),x&&(k=Math.max(N-u,Math.min(C-h,k)),c=u+k,d=h+k);break;case ii:m<0?(A=Math.max(T-e,Math.min(E-e,A)),i=e+A,l=a):m>0&&(A=Math.max(T-a,Math.min(E-a,A)),i=e,l=a+A),x<0?(k=Math.max(N-u,Math.min(C-u,k)),c=u+k,d=h):x>0&&(k=Math.max(N-h,Math.min(C-h,k)),c=u,d=h+k);break;case oi:m&&(i=Math.max(T,Math.min(E,e-A*m)),l=Math.max(T,Math.min(E,a+A*m))),x&&(c=Math.max(N,Math.min(C,u-k*x)),d=Math.max(N,Math.min(C,h+k*x)))}l<i&&(m*=-1,t=e,e=a,a=t,t=i,i=l,l=t,g in di&&D.attr("cursor",hi[g=di[g]])),d<c&&(x*=-1,t=u,u=h,h=t,t=c,c=d,d=t,g in pi&&D.attr("cursor",hi[g=pi[g]])),w.selection&&(S=w.selection),b&&(i=S[0][0],l=S[1][0]),v&&(c=S[0][1],d=S[1][1]),S[0][0]===i&&S[0][1]===c&&S[1][0]===l&&S[1][1]===d||(w.selection=[[i,c],[l,d]],s.call(y),F.brush())}function U(){if(ti(),fn.touches){if(fn.touches.length)return;n&&clearTimeout(n),n=setTimeout((function(){n=null}),500)}else Cn(fn.view,p),V.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);z.attr("pointer-events","all"),D.attr("cursor",hi.overlay),w.selection&&(S=w.selection),wi(S)&&(w.selection=null,s.call(y)),F.end()}function q(){switch(fn.keyCode){case 16:O=m&&x;break;case 18:_===ii&&(m&&(a=l-A*m,e=i+A*m),x&&(h=d-k*x,u=c+k*x),_=oi,B());break;case 32:_!==ii&&_!==oi||(m<0?a=l-A:m>0&&(e=i-A),x<0?h=d-k:x>0&&(u=c-k),_=ri,D.attr("cursor",hi.selection),B());break;default:return}ni()}function L(){switch(fn.keyCode){case 16:O&&(b=v=O=!1,B());break;case 18:_===oi&&(m<0?a=l:m>0&&(e=i),x<0?h=d:x>0&&(u=c),_=ii,B());break;case 32:_===ri&&(fn.altKey?(m&&(a=l-A*m,e=i+A*m),x&&(h=d-k*x,u=c+k*x),_=oi):(m<0?a=l:m>0&&(e=i),x<0?h=d:x>0&&(u=c),_=ii),D.attr("cursor",hi[g]),B());break;default:return}ni()}}function d(){f(this,arguments).moved()}function p(){f(this,arguments).ended()}function b(){var n=this.__brush||{selection:null};return n.extent=ci(e.apply(this,arguments)),n.dim=t,n}return a.move=function(n,e){n.selection?n.on("start.brush",(function(){f(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){f(this,arguments).end()})).tween("brush",(function(){var n=this,r=n.__brush,i=f(n,arguments),o=r.selection,u=t.input("function"==typeof e?e.apply(this,arguments):e,r.extent),c=Ae(o,u);function a(t){r.selection=1===t&&null===u?null:c(t),s.call(n),i.brush()}return null!==o&&null!==u?a:a(1)})):n.each((function(){var n=this,r=arguments,i=n.__brush,o=t.input("function"==typeof e?e.apply(n,r):e,i.extent),u=f(n,r).beforestart();cr(n),i.selection=null===o?null:o,s.call(n),u.start().brush().end()}))},a.clear=function(t){a.move(t,null)},l.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting?(this.starting=!1,this.emit("start")):this.emit("brush"),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(n){vn(new Jr(a,n,t.output(this.state.selection)),u.apply,u,[n,this.that,this.args])}},a.extent=function(t){return arguments.length?(e="function"==typeof t?t:$r(ci(t)),a):e},a.filter=function(t){return arguments.length?(r="function"==typeof t?t:$r(!!t),a):r},a.touchable=function(t){return arguments.length?(i="function"==typeof t?t:$r(!!t),a):i},a.handleSize=function(t){return arguments.length?(c=+t,a):c},a.keyModifiers=function(t){return arguments.length?(o=!!t,a):o},a.on=function(){var t=u.on.apply(u,arguments);return t===u?a:t},a}var Ci=Math.cos,Ai=Math.sin,ki=Math.PI,Oi=ki/2,ji=2*ki,Ii=Math.max;function Pi(t){return function(n,e){return t(n.source.value+n.target.value,e.source.value+e.target.value)}}var Fi=function(){var t=0,n=null,e=null,r=null;function i(i){var o,u,c,a,s,f,l=i.length,h=[],d=M(l),p=[],b=[],v=b.groups=new Array(l),y=new Array(l*l);for(o=0,s=-1;++s<l;){for(u=0,f=-1;++f<l;)u+=i[s][f];h.push(u),p.push(M(l)),o+=u}for(n&&d.sort((function(t,e){return n(h[t],h[e])})),e&&p.forEach((function(t,n){t.sort((function(t,r){return e(i[n][t],i[n][r])}))})),a=(o=Ii(0,ji-t*l)/o)?t:ji/l,u=0,s=-1;++s<l;){for(c=u,f=-1;++f<l;){var g=d[s],_=p[g][f],m=i[g][_],x=u,w=u+=m*o;y[_*l+g]={index:g,subindex:_,startAngle:x,endAngle:w,value:m}}v[g]={index:g,startAngle:c,endAngle:u,value:h[g]},u+=a}for(s=-1;++s<l;)for(f=s-1;++f<l;){var S=y[f*l+s],T=y[s*l+f];(S.value||T.value)&&b.push(S.value<T.value?{source:T,target:S}:{source:S,target:T})}return r?b.sort(r):b}return i.padAngle=function(n){return arguments.length?(t=Ii(0,n),i):t},i.sortGroups=function(t){return arguments.length?(n=t,i):n},i.sortSubgroups=function(t){return arguments.length?(e=t,i):e},i.sortChords=function(t){return arguments.length?(null==t?r=null:(r=Pi(t))._=t,i):r&&r._},i},zi=Array.prototype.slice,Di=function(t){return function(){return t}},Vi=Math.PI,Ri=2*Vi,Bi=Ri-1e-6;function Ui(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function qi(){return new Ui}Ui.prototype=qi.prototype={constructor:Ui,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,u=this._y1,c=e-t,a=r-n,s=o-t,f=u-n,l=s*s+f*f;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(l>1e-6)if(Math.abs(f*c-a*s)>1e-6&&i){var h=e-o,d=r-u,p=c*c+a*a,b=h*h+d*d,v=Math.sqrt(p),y=Math.sqrt(l),g=i*Math.tan((Vi-Math.acos((p+l-b)/(2*v*y)))/2),_=g/y,m=g/v;Math.abs(_-1)>1e-6&&(this._+="L"+(t+_*s)+","+(n+_*f)),this._+="A"+i+","+i+",0,0,"+ +(f*h>s*d)+","+(this._x1=t+m*c)+","+(this._y1=n+m*a)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,o){t=+t,n=+n,o=!!o;var u=(e=+e)*Math.cos(r),c=e*Math.sin(r),a=t+u,s=n+c,f=1^o,l=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+a+","+s:(Math.abs(this._x1-a)>1e-6||Math.abs(this._y1-s)>1e-6)&&(this._+="L"+a+","+s),e&&(l<0&&(l=l%Ri+Ri),l>Bi?this._+="A"+e+","+e+",0,1,"+f+","+(t-u)+","+(n-c)+"A"+e+","+e+",0,1,"+f+","+(this._x1=a)+","+(this._y1=s):l>1e-6&&(this._+="A"+e+","+e+",0,"+ +(l>=Vi)+","+f+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};var Li=qi;function Yi(t){return t.source}function Gi(t){return t.target}function Wi(t){return t.radius}function Hi(t){return t.startAngle}function Xi(t){return t.endAngle}var Ki=function(){var t=Yi,n=Gi,e=Wi,r=Hi,i=Xi,o=null;function u(){var u,c=zi.call(arguments),a=t.apply(this,c),s=n.apply(this,c),f=+e.apply(this,(c[0]=a,c)),l=r.apply(this,c)-Oi,h=i.apply(this,c)-Oi,d=f*Ci(l),p=f*Ai(l),b=+e.apply(this,(c[0]=s,c)),v=r.apply(this,c)-Oi,y=i.apply(this,c)-Oi;if(o||(o=u=Li()),o.moveTo(d,p),o.arc(0,0,f,l,h),l===v&&h===y||(o.quadraticCurveTo(0,0,b*Ci(v),b*Ai(v)),o.arc(0,0,b,v,y)),o.quadraticCurveTo(0,0,d,p),o.closePath(),u)return o=null,u+""||null}return u.radius=function(t){return arguments.length?(e="function"==typeof t?t:Di(+t),u):e},u.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Di(+t),u):r},u.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:Di(+t),u):i},u.source=function(n){return arguments.length?(t=n,u):t},u.target=function(t){return arguments.length?(n=t,u):n},u.context=function(t){return arguments.length?(o=null==t?null:t,u):o},u};function Zi(){}function Qi(t,n){var e=new Zi;if(t instanceof Zi)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var u in t)e.set(u,t[u]);return e}Zi.prototype=Qi.prototype={constructor:Zi,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var $i=Qi,Ji=function(){var t,n,e,r=[],i=[];function o(e,i,u,c){if(i>=r.length)return null!=t&&e.sort(t),null!=n?n(e):e;for(var a,s,f,l=-1,h=e.length,d=r[i++],p=$i(),b=u();++l<h;)(f=p.get(a=d(s=e[l])+""))?f.push(s):p.set(a,[s]);return p.each((function(t,n){c(b,n,o(t,i,u,c))})),b}return e={object:function(t){return o(t,0,to,no)},map:function(t){return o(t,0,eo,ro)},entries:function(t){return function t(e,o){if(++o>r.length)return e;var u,c=i[o-1];return null!=n&&o>=r.length?u=e.entries():(u=[],e.each((function(n,e){u.push({key:e,values:t(n,o)})}))),null!=c?u.sort((function(t,n){return c(t.key,n.key)})):u}(o(t,0,eo,ro),0)},key:function(t){return r.push(t),e},sortKeys:function(t){return i[r.length-1]=t,e},sortValues:function(n){return t=n,e},rollup:function(t){return n=t,e}}};function to(){return{}}function no(t,n,e){t[n]=e}function eo(){return $i()}function ro(t,n,e){t.set(n,e)}function io(){}var oo=$i.prototype;function uo(t,n){var e=new io;if(t instanceof io)t.each((function(t){e.add(t)}));else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}io.prototype=uo.prototype={constructor:io,has:oo.has,add:function(t){return this["$"+(t+="")]=t,this},remove:oo.remove,clear:oo.clear,values:oo.keys,size:oo.size,empty:oo.empty,each:oo.each};var co=uo,ao=function(t){var n=[];for(var e in t)n.push(e);return n},so=function(t){var n=[];for(var e in t)n.push(t[e]);return n},fo=function(t){var n=[];for(var e in t)n.push({key:e,value:t[e]});return n},lo=Math.PI/180,ho=180/Math.PI;function po(t){if(t instanceof yo)return new yo(t.l,t.a,t.b,t.opacity);if(t instanceof To)return No(t);t instanceof Zn||(t=Xn(t));var n,e,r=xo(t.r),i=xo(t.g),o=xo(t.b),u=go((.2225045*r+.7168786*i+.0606169*o)/1);return r===i&&i===o?n=e=u:(n=go((.4360747*r+.3850649*i+.1430804*o)/.96422),e=go((.0139322*r+.0971045*i+.7141733*o)/.82521)),new yo(116*u-16,500*(n-u),200*(u-e),t.opacity)}function bo(t,n){return new yo(t,0,0,null==n?1:n)}function vo(t,n,e,r){return 1===arguments.length?po(t):new yo(t,n,e,null==r?1:r)}function yo(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function go(t){return t>6/29*(6/29)*(6/29)?Math.pow(t,1/3):t/(6/29*3*(6/29))+4/29}function _o(t){return t>6/29?t*t*t:6/29*3*(6/29)*(t-4/29)}function mo(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function xo(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function wo(t){if(t instanceof To)return new To(t.h,t.c,t.l,t.opacity);if(t instanceof yo||(t=po(t)),0===t.a&&0===t.b)return new To(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*ho;return new To(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Mo(t,n,e,r){return 1===arguments.length?wo(t):new To(e,n,t,null==r?1:r)}function So(t,n,e,r){return 1===arguments.length?wo(t):new To(t,n,e,null==r?1:r)}function To(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}function No(t){if(isNaN(t.h))return new yo(t.l,0,0,t.opacity);var n=t.h*lo;return new yo(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}An(yo,vo,kn(On,{brighter:function(t){return new yo(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new yo(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new Zn(mo(3.1338561*(n=.96422*_o(n))-1.6168667*(t=1*_o(t))-.4906146*(e=.82521*_o(e))),mo(-.9787684*n+1.9161415*t+.033454*e),mo(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),An(To,So,kn(On,{brighter:function(t){return new To(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new To(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return No(this).rgb()}}));var Eo=-.29227,Co=-1.7884503806,Ao=3.5172982438,ko=-.6557636667999999;function Oo(t){if(t instanceof Io)return new Io(t.h,t.s,t.l,t.opacity);t instanceof Zn||(t=Xn(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(ko*r+Co*n-Ao*e)/(ko+Co-Ao),o=r-i,u=(1.97294*(e-i)-Eo*o)/-.90649,c=Math.sqrt(u*u+o*o)/(1.97294*i*(1-i)),a=c?Math.atan2(u,o)*ho-120:NaN;return new Io(a<0?a+360:a,c,i,t.opacity)}function jo(t,n,e,r){return 1===arguments.length?Oo(t):new Io(t,n,e,null==r?1:r)}function Io(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}An(Io,jo,kn(On,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Io(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Io(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*lo,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new Zn(255*(n+e*(-.14861*r+1.78277*i)),255*(n+e*(Eo*r+-.90649*i)),255*(n+e*(1.97294*r)),this.opacity)}}));var Po=Array.prototype.slice,Fo=function(t,n){return t-n},zo=function(t){return function(){return t}},Do=function(t,n){for(var e,r=-1,i=n.length;++r<i;)if(e=Vo(t,n[r]))return e;return 0};function Vo(t,n){for(var e=n[0],r=n[1],i=-1,o=0,u=t.length,c=u-1;o<u;c=o++){var a=t[o],s=a[0],f=a[1],l=t[c],h=l[0],d=l[1];if(Ro(a,l,n))return 0;f>r!=d>r&&e<(h-s)*(r-f)/(d-f)+s&&(i=-i)}return i}function Ro(t,n,e){var r,i,o,u;return function(t,n,e){return(n[0]-t[0])*(e[1]-t[1])==(e[0]-t[0])*(n[1]-t[1])}(t,n,e)&&(i=t[r=+(t[0]===n[0])],o=e[r],u=n[r],i<=o&&o<=u||u<=o&&o<=i)}var Bo=function(){},Uo=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]],qo=function(){var t=1,n=1,e=k,r=c;function i(t){var n=e(t);if(Array.isArray(n))n=n.slice().sort(Fo);else{var r=y(t),i=r[0],u=r[1];n=A(i,u,n),n=M(Math.floor(i/n)*n,Math.floor(u/n)*n,n)}return n.map((function(n){return o(t,n)}))}function o(e,i){var o=[],c=[];return function(e,r,i){var o,c,a,s,f,l,h=new Array,d=new Array;o=c=-1,s=e[0]>=r,Uo[s<<1].forEach(p);for(;++o<t-1;)a=s,s=e[o+1]>=r,Uo[a|s<<1].forEach(p);Uo[s<<0].forEach(p);for(;++c<n-1;){for(o=-1,s=e[c*t+t]>=r,f=e[c*t]>=r,Uo[s<<1|f<<2].forEach(p);++o<t-1;)a=s,s=e[c*t+t+o+1]>=r,l=f,f=e[c*t+o+1]>=r,Uo[a|s<<1|f<<2|l<<3].forEach(p);Uo[s|f<<3].forEach(p)}o=-1,f=e[c*t]>=r,Uo[f<<2].forEach(p);for(;++o<t-1;)l=f,f=e[c*t+o+1]>=r,Uo[f<<2|l<<3].forEach(p);function p(t){var n,e,r=[t[0][0]+o,t[0][1]+c],a=[t[1][0]+o,t[1][1]+c],s=u(r),f=u(a);(n=d[s])?(e=h[f])?(delete d[n.end],delete h[e.start],n===e?(n.ring.push(a),i(n.ring)):h[n.start]=d[e.end]={start:n.start,end:e.end,ring:n.ring.concat(e.ring)}):(delete d[n.end],n.ring.push(a),d[n.end=f]=n):(n=h[f])?(e=d[s])?(delete h[n.start],delete d[e.end],n===e?(n.ring.push(a),i(n.ring)):h[e.start]=d[n.end]={start:e.start,end:n.end,ring:e.ring.concat(n.ring)}):(delete h[n.start],n.ring.unshift(r),h[n.start=s]=n):h[s]=d[f]={start:s,end:f,ring:[r,a]}}Uo[f<<3].forEach(p)}(e,i,(function(t){r(t,e,i),function(t){for(var n=0,e=t.length,r=t[e-1][1]*t[0][0]-t[e-1][0]*t[0][1];++n<e;)r+=t[n-1][1]*t[n][0]-t[n-1][0]*t[n][1];return r}(t)>0?o.push([t]):c.push(t)})),c.forEach((function(t){for(var n,e=0,r=o.length;e<r;++e)if(-1!==Do((n=o[e])[0],t))return void n.push(t)})),{type:"MultiPolygon",value:i,coordinates:o}}function u(n){return 2*n[0]+n[1]*(t+1)*4}function c(e,r,i){e.forEach((function(e){var o,u=e[0],c=e[1],a=0|u,s=0|c,f=r[s*t+a];u>0&&u<t&&a===u&&(o=r[s*t+a-1],e[0]=u+(i-o)/(f-o)-.5),c>0&&c<n&&s===c&&(o=r[(s-1)*t+a],e[1]=c+(i-o)/(f-o)-.5)}))}return i.contour=o,i.size=function(e){if(!arguments.length)return[t,n];var r=Math.ceil(e[0]),o=Math.ceil(e[1]);if(!(r>0&&o>0))throw new Error("invalid size");return t=r,n=o,i},i.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?zo(Po.call(t)):zo(t),i):e},i.smooth=function(t){return arguments.length?(r=t?c:Bo,i):r===c},i};function Lo(t,n,e){for(var r=t.width,i=t.height,o=1+(e<<1),u=0;u<i;++u)for(var c=0,a=0;c<r+e;++c)c<r&&(a+=t.data[c+u*r]),c>=e&&(c>=o&&(a-=t.data[c-o+u*r]),n.data[c-e+u*r]=a/Math.min(c+1,r-1+o-c,o))}function Yo(t,n,e){for(var r=t.width,i=t.height,o=1+(e<<1),u=0;u<r;++u)for(var c=0,a=0;c<i+e;++c)c<i&&(a+=t.data[u+c*r]),c>=e&&(c>=o&&(a-=t.data[u+(c-o)*r]),n.data[u+(c-e)*r]=a/Math.min(c+1,i-1+o-c,o))}function Go(t){return t[0]}function Wo(t){return t[1]}function Ho(){return 1}var Xo=function(){var t=Go,n=Wo,e=Ho,r=960,i=500,o=20,u=2,c=3*o,a=r+2*c>>u,s=i+2*c>>u,f=zo(20);function l(r){var i=new Float32Array(a*s),l=new Float32Array(a*s);r.forEach((function(r,o,f){var l=+t(r,o,f)+c>>u,h=+n(r,o,f)+c>>u,d=+e(r,o,f);l>=0&&l<a&&h>=0&&h<s&&(i[l+h*a]+=d)})),Lo({width:a,height:s,data:i},{width:a,height:s,data:l},o>>u),Yo({width:a,height:s,data:l},{width:a,height:s,data:i},o>>u),Lo({width:a,height:s,data:i},{width:a,height:s,data:l},o>>u),Yo({width:a,height:s,data:l},{width:a,height:s,data:i},o>>u),Lo({width:a,height:s,data:i},{width:a,height:s,data:l},o>>u),Yo({width:a,height:s,data:l},{width:a,height:s,data:i},o>>u);var d=f(i);if(!Array.isArray(d)){var p=F(i);d=A(0,p,d),(d=M(0,Math.floor(p/d)*d,d)).shift()}return qo().thresholds(d).size([a,s])(i).map(h)}function h(t){return t.value*=Math.pow(2,-2*u),t.coordinates.forEach(d),t}function d(t){t.forEach(p)}function p(t){t.forEach(b)}function b(t){t[0]=t[0]*Math.pow(2,u)-c,t[1]=t[1]*Math.pow(2,u)-c}function v(){return a=r+2*(c=3*o)>>u,s=i+2*c>>u,l}return l.x=function(n){return arguments.length?(t="function"==typeof n?n:zo(+n),l):t},l.y=function(t){return arguments.length?(n="function"==typeof t?t:zo(+t),l):n},l.weight=function(t){return arguments.length?(e="function"==typeof t?t:zo(+t),l):e},l.size=function(t){if(!arguments.length)return[r,i];var n=Math.ceil(t[0]),e=Math.ceil(t[1]);if(!(n>=0||n>=0))throw new Error("invalid size");return r=n,i=e,v()},l.cellSize=function(t){if(!arguments.length)return 1<<u;if(!((t=+t)>=1))throw new Error("invalid cell size");return u=Math.floor(Math.log(t)/Math.LN2),v()},l.thresholds=function(t){return arguments.length?(f="function"==typeof t?t:Array.isArray(t)?zo(Po.call(t)):zo(t),l):f},l.bandwidth=function(t){if(!arguments.length)return Math.sqrt(o*(o+1));if(!((t=+t)>=0))throw new Error("invalid bandwidth");return o=Math.round((Math.sqrt(4*t*t+1)-1)/2),v()},l},Ko=function(t){return function(){return t}};function Zo(t,n,e,r,i,o,u,c,a,s){this.target=t,this.type=n,this.subject=e,this.identifier=r,this.active=i,this.x=o,this.y=u,this.dx=c,this.dy=a,this._=s}function Qo(){return!fn.ctrlKey&&!fn.button}function $o(){return this.parentNode}function Jo(t){return null==t?{x:fn.x,y:fn.y}:t}function tu(){return navigator.maxTouchPoints||"ontouchstart"in this}Zo.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var nu=function(){var t,n,e,r,i=Qo,o=$o,u=Jo,c=tu,a={},s=lt("start","drag","end"),f=0,l=0;function h(t){t.on("mousedown.drag",d).filter(c).on("touchstart.drag",v).on("touchmove.drag",y).on("touchend.drag touchcancel.drag",g).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function d(){if(!r&&i.apply(this,arguments)){var u=_("mouse",o.apply(this,arguments),Ie,this,arguments);u&&(Sn(fn.view).on("mousemove.drag",p,!0).on("mouseup.drag",b,!0),En(fn.view),Tn(),e=!1,t=fn.clientX,n=fn.clientY,u("start"))}}function p(){if(Nn(),!e){var r=fn.clientX-t,i=fn.clientY-n;e=r*r+i*i>l}a.mouse("drag")}function b(){Sn(fn.view).on("mousemove.drag mouseup.drag",null),Cn(fn.view,e),Nn(),a.mouse("end")}function v(){if(i.apply(this,arguments)){var t,n,e=fn.changedTouches,r=o.apply(this,arguments),u=e.length;for(t=0;t<u;++t)(n=_(e[t].identifier,r,je,this,arguments))&&(Tn(),n("start"))}}function y(){var t,n,e=fn.changedTouches,r=e.length;for(t=0;t<r;++t)(n=a[e[t].identifier])&&(Nn(),n("drag"))}function g(){var t,n,e=fn.changedTouches,i=e.length;for(r&&clearTimeout(r),r=setTimeout((function(){r=null}),500),t=0;t<i;++t)(n=a[e[t].identifier])&&(Tn(),n("end"))}function _(t,n,e,r,i){var o,c,l,d=e(n,t),p=s.copy();if(vn(new Zo(h,"beforestart",o,t,f,d[0],d[1],0,0,p),(function(){return null!=(fn.subject=o=u.apply(r,i))&&(c=o.x-d[0]||0,l=o.y-d[1]||0,!0)})))return function u(s){var b,v=d;switch(s){case"start":a[t]=u,b=f++;break;case"end":delete a[t],--f;case"drag":d=e(n,t),b=f}vn(new Zo(h,s,o,t,b,d[0]+c,d[1]+l,d[0]-v[0],d[1]-v[1],p),p.apply,p,[s,r,i])}}return h.filter=function(t){return arguments.length?(i="function"==typeof t?t:Ko(!!t),h):i},h.container=function(t){return arguments.length?(o="function"==typeof t?t:Ko(t),h):o},h.subject=function(t){return arguments.length?(u="function"==typeof t?t:Ko(t),h):u},h.touchable=function(t){return arguments.length?(c="function"==typeof t?t:Ko(!!t),h):c},h.on=function(){var t=s.on.apply(s,arguments);return t===s?h:t},h.clickDistance=function(t){return arguments.length?(l=(t=+t)*t,h):Math.sqrt(l)},h},eu={},ru={};function iu(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+'] || ""'})).join(",")+"}")}function ou(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var r in t)r in n||e.push(n[r]=r)})),e}function uu(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function cu(t){var n,e=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((n=t.getUTCFullYear())<0?"-"+uu(-n,6):n>9999?"+"+uu(n,6):uu(n,4))+"-"+uu(t.getUTCMonth()+1,2)+"-"+uu(t.getUTCDate(),2)+(o?"T"+uu(e,2)+":"+uu(r,2)+":"+uu(i,2)+"."+uu(o,3)+"Z":i?"T"+uu(e,2)+":"+uu(r,2)+":"+uu(i,2)+"Z":r||e?"T"+uu(e,2)+":"+uu(r,2)+"Z":"")}var au=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],o=t.length,u=0,c=0,a=o<=0,s=!1;function f(){if(a)return ru;if(s)return s=!1,eu;var n,r,i=u;if(34===t.charCodeAt(i)){for(;u++<o&&34!==t.charCodeAt(u)||34===t.charCodeAt(++u););return(n=u)>=o?a=!0:10===(r=t.charCodeAt(u++))?s=!0:13===r&&(s=!0,10===t.charCodeAt(u)&&++u),t.slice(i+1,n-1).replace(/""/g,'"')}for(;u<o;){if(10===(r=t.charCodeAt(n=u++)))s=!0;else if(13===r)s=!0,10===t.charCodeAt(u)&&++u;else if(r!==e)continue;return t.slice(i,n)}return a=!0,t.slice(i,o)}for(10===t.charCodeAt(o-1)&&--o,13===t.charCodeAt(o-1)&&--o;(r=f())!==ru;){for(var l=[];r!==eu&&r!==ru;)l.push(r),r=f();n&&null==(l=n(l,c++))||i.push(l)}return i}function i(n,e){return n.map((function(n){return e.map((function(t){return u(n[t])})).join(t)}))}function o(n){return n.map(u).join(t)}function u(t){return null==t?"":t instanceof Date?cu(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,o=r(t,(function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=iu(t);return function(r,i){return n(e(r),i,t)}}(t,n):iu(t)}));return o.columns=i||[],o},parseRows:r,format:function(n,e){return null==e&&(e=ou(n)),[e.map(u).join(t)].concat(i(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=ou(t)),i(t,n).join("\n")},formatRows:function(t){return t.map(o).join("\n")},formatRow:o,formatValue:u}},su=au(","),fu=su.parse,lu=su.parseRows,hu=su.format,du=su.formatBody,pu=su.formatRows,bu=su.formatRow,vu=su.formatValue,yu=au("\t"),gu=yu.parse,_u=yu.parseRows,mu=yu.format,xu=yu.formatBody,wu=yu.formatRows,Mu=yu.formatRow,Su=yu.formatValue;function Tu(t){for(var n in t){var e,r,i=t[n].trim();if(i)if("true"===i)i=!0;else if("false"===i)i=!1;else if("NaN"===i)i=NaN;else if(isNaN(e=+i)){if(!(r=i.match(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/)))continue;Nu&&r[4]&&!r[7]&&(i=i.replace(/-/g,"/").replace(/T/," ")),i=new Date(i)}else i=e;else i=null;t[n]=i}return t}var Nu=new Date("2019-01-01T00:00").getHours()||new Date("2019-07-01T00:00").getHours();function Eu(t){return+t}function Cu(t){return t*t}function Au(t){return t*(2-t)}function ku(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}var Ou=function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e}(3),ju=function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),Iu=function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Pu=Math.PI,Fu=Pu/2;function zu(t){return 1-Math.cos(t*Fu)}function Du(t){return Math.sin(t*Fu)}function Vu(t){return(1-Math.cos(Pu*t))/2}function Ru(t){return Math.pow(2,10*t-10)}function Bu(t){return 1-Math.pow(2,-10*t)}function Uu(t){return((t*=2)<=1?Math.pow(2,10*t-10):2-Math.pow(2,10-10*t))/2}function qu(t){return 1-Math.sqrt(1-t*t)}function Lu(t){return Math.sqrt(1- --t*t)}function Yu(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}function Gu(t){return 1-Wu(1-t)}function Wu(t){return(t=+t)<4/11?7.5625*t*t:t<8/11?7.5625*(t-=6/11)*t+3/4:t<10/11?7.5625*(t-=9/11)*t+15/16:7.5625*(t-=21/22)*t+63/64}function Hu(t){return((t*=2)<=1?1-Wu(1-t):Wu(t-1)+1)/2}var Xu=function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e}(1.70158),Ku=function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(1.70158),Zu=function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158),Qu=2*Math.PI,$u=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Qu);function i(t){return n*Math.pow(2,10*--t)*Math.sin((r-t)/e)}return i.amplitude=function(n){return t(n,e*Qu)},i.period=function(e){return t(n,e)},i}(1,.3),Ju=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Qu);function i(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/e)}return i.amplitude=function(n){return t(n,e*Qu)},i.period=function(e){return t(n,e)},i}(1,.3),tc=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Qu);function i(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((r-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((r+t)/e))/2}return i.amplitude=function(n){return t(n,e*Qu)},i.period=function(e){return t(n,e)},i}(1,.3);function nc(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.blob()}var ec=function(t,n){return fetch(t,n).then(nc)};function rc(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.arrayBuffer()}var ic=function(t,n){return fetch(t,n).then(rc)};function oc(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var uc=function(t,n){return fetch(t,n).then(oc)};function cc(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),uc(n,e).then((function(n){return t(n,r)}))}}function ac(t,n,e,r){3===arguments.length&&"function"==typeof e&&(r=e,e=void 0);var i=au(t);return uc(n,e).then((function(t){return i.parse(t,r)}))}var sc=cc(fu),fc=cc(gu),lc=function(t,n){return new Promise((function(e,r){var i=new Image;for(var o in n)i[o]=n[o];i.onerror=r,i.onload=function(){e(i)},i.src=t}))};function hc(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);if(204!==t.status&&205!==t.status)return t.json()}var dc=function(t,n){return fetch(t,n).then(hc)};function pc(t){return function(n,e){return uc(n,e).then((function(n){return(new DOMParser).parseFromString(n,t)}))}}var bc=pc("application/xml"),vc=pc("text/html"),yc=pc("image/svg+xml"),gc=function(t,n){var e;function r(){var r,i,o=e.length,u=0,c=0;for(r=0;r<o;++r)u+=(i=e[r]).x,c+=i.y;for(u=u/o-t,c=c/o-n,r=0;r<o;++r)(i=e[r]).x-=u,i.y-=c}return null==t&&(t=0),null==n&&(n=0),r.initialize=function(t){e=t},r.x=function(n){return arguments.length?(t=+n,r):t},r.y=function(t){return arguments.length?(n=+t,r):n},r},_c=function(t){return function(){return t}},mc=function(){return 1e-6*(Math.random()-.5)};function xc(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,o,u,c,a,s,f,l,h,d=t._root,p={data:r},b=t._x0,v=t._y0,y=t._x1,g=t._y1;if(!d)return t._root=p,t;for(;d.length;)if((s=n>=(o=(b+y)/2))?b=o:y=o,(f=e>=(u=(v+g)/2))?v=u:g=u,i=d,!(d=d[l=f<<1|s]))return i[l]=p,t;if(c=+t._x.call(null,d.data),a=+t._y.call(null,d.data),n===c&&e===a)return p.next=d,i?i[l]=p:t._root=p,t;do{i=i?i[l]=new Array(4):t._root=new Array(4),(s=n>=(o=(b+y)/2))?b=o:y=o,(f=e>=(u=(v+g)/2))?v=u:g=u}while((l=f<<1|s)==(h=(a>=u)<<1|c>=o));return i[h]=d,i[l]=p,t}var wc=function(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i};function Mc(t){return t[0]}function Sc(t){return t[1]}function Tc(t,n,e){var r=new Nc(null==n?Mc:n,null==e?Sc:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function Nc(t,n,e,r,i,o){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function Ec(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var Cc=Tc.prototype=Nc.prototype;function Ac(t){return t.x+t.vx}function kc(t){return t.y+t.vy}Cc.copy=function(){var t,n,e=new Nc(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=Ec(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=Ec(n));return e},Cc.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return xc(this.cover(n,e),n,e,t)},Cc.addAll=function(t){var n,e,r,i,o=t.length,u=new Array(o),c=new Array(o),a=1/0,s=1/0,f=-1/0,l=-1/0;for(e=0;e<o;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(u[e]=r,c[e]=i,r<a&&(a=r),r>f&&(f=r),i<s&&(s=i),i>l&&(l=i));if(a>f||s>l)return this;for(this.cover(a,s).cover(f,l),e=0;e<o;++e)xc(this,u[e],c[e],t[e]);return this},Cc.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,o=(r=Math.floor(n))+1;else{for(var u,c,a=i-e,s=this._root;e>t||t>=i||r>n||n>=o;)switch(c=(n<r)<<1|t<e,(u=new Array(4))[c]=s,s=u,a*=2,c){case 0:i=e+a,o=r+a;break;case 1:e=i-a,o=r+a;break;case 2:i=e+a,r=o-a;break;case 3:e=i-a,r=o-a}this._root&&this._root.length&&(this._root=s)}return this._x0=e,this._y0=r,this._x1=i,this._y1=o,this},Cc.data=function(){var t=[];return this.visit((function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)})),t},Cc.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Cc.find=function(t,n,e){var r,i,o,u,c,a,s,f=this._x0,l=this._y0,h=this._x1,d=this._y1,p=[],b=this._root;for(b&&p.push(new wc(b,f,l,h,d)),null==e?e=1/0:(f=t-e,l=n-e,h=t+e,d=n+e,e*=e);a=p.pop();)if(!(!(b=a.node)||(i=a.x0)>h||(o=a.y0)>d||(u=a.x1)<f||(c=a.y1)<l))if(b.length){var v=(i+u)/2,y=(o+c)/2;p.push(new wc(b[3],v,y,u,c),new wc(b[2],i,y,v,c),new wc(b[1],v,o,u,y),new wc(b[0],i,o,v,y)),(s=(n>=y)<<1|t>=v)&&(a=p[p.length-1],p[p.length-1]=p[p.length-1-s],p[p.length-1-s]=a)}else{var g=t-+this._x.call(null,b.data),_=n-+this._y.call(null,b.data),m=g*g+_*_;if(m<e){var x=Math.sqrt(e=m);f=t-x,l=n-x,h=t+x,d=n+x,r=b.data}}return r},Cc.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(u=+this._y.call(null,t)))return this;var n,e,r,i,o,u,c,a,s,f,l,h,d=this._root,p=this._x0,b=this._y0,v=this._x1,y=this._y1;if(!d)return this;if(d.length)for(;;){if((s=o>=(c=(p+v)/2))?p=c:v=c,(f=u>=(a=(b+y)/2))?b=a:y=a,n=d,!(d=d[l=f<<1|s]))return this;if(!d.length)break;(n[l+1&3]||n[l+2&3]||n[l+3&3])&&(e=n,h=l)}for(;d.data!==t;)if(r=d,!(d=d.next))return this;return(i=d.next)&&delete d.next,r?(i?r.next=i:delete r.next,this):n?(i?n[l]=i:delete n[l],(d=n[0]||n[1]||n[2]||n[3])&&d===(n[3]||n[2]||n[1]||n[0])&&!d.length&&(e?e[h]=d:this._root=d),this):(this._root=i,this)},Cc.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},Cc.root=function(){return this._root},Cc.size=function(){var t=0;return this.visit((function(n){if(!n.length)do{++t}while(n=n.next)})),t},Cc.visit=function(t){var n,e,r,i,o,u,c=[],a=this._root;for(a&&c.push(new wc(a,this._x0,this._y0,this._x1,this._y1));n=c.pop();)if(!t(a=n.node,r=n.x0,i=n.y0,o=n.x1,u=n.y1)&&a.length){var s=(r+o)/2,f=(i+u)/2;(e=a[3])&&c.push(new wc(e,s,f,o,u)),(e=a[2])&&c.push(new wc(e,r,f,s,u)),(e=a[1])&&c.push(new wc(e,s,i,o,f)),(e=a[0])&&c.push(new wc(e,r,i,s,f))}return this},Cc.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new wc(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var o,u=n.x0,c=n.y0,a=n.x1,s=n.y1,f=(u+a)/2,l=(c+s)/2;(o=i[0])&&e.push(new wc(o,u,c,f,l)),(o=i[1])&&e.push(new wc(o,f,c,a,l)),(o=i[2])&&e.push(new wc(o,u,l,f,s)),(o=i[3])&&e.push(new wc(o,f,l,a,s))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},Cc.x=function(t){return arguments.length?(this._x=t,this):this._x},Cc.y=function(t){return arguments.length?(this._y=t,this):this._y};var Oc=function(t){var n,e,r=1,i=1;function o(){for(var t,o,c,a,s,f,l,h=n.length,d=0;d<i;++d)for(o=Tc(n,Ac,kc).visitAfter(u),t=0;t<h;++t)c=n[t],f=e[c.index],l=f*f,a=c.x+c.vx,s=c.y+c.vy,o.visit(p);function p(t,n,e,i,o){var u=t.data,h=t.r,d=f+h;if(!u)return n>a+d||i<a-d||e>s+d||o<s-d;if(u.index>c.index){var p=a-u.x-u.vx,b=s-u.y-u.vy,v=p*p+b*b;v<d*d&&(0===p&&(v+=(p=mc())*p),0===b&&(v+=(b=mc())*b),v=(d-(v=Math.sqrt(v)))/v*r,c.vx+=(p*=v)*(d=(h*=h)/(l+h)),c.vy+=(b*=v)*d,u.vx-=p*(d=1-d),u.vy-=b*d)}}}function u(t){if(t.data)return t.r=e[t.data.index];for(var n=t.r=0;n<4;++n)t[n]&&t[n].r>t.r&&(t.r=t[n].r)}function c(){if(n){var r,i,o=n.length;for(e=new Array(o),r=0;r<o;++r)i=n[r],e[i.index]=+t(i,r,n)}}return"function"!=typeof t&&(t=_c(null==t?1:+t)),o.initialize=function(t){n=t,c()},o.iterations=function(t){return arguments.length?(i=+t,o):i},o.strength=function(t){return arguments.length?(r=+t,o):r},o.radius=function(n){return arguments.length?(t="function"==typeof n?n:_c(+n),c(),o):t},o};function jc(t){return t.index}function Ic(t,n){var e=t.get(n);if(!e)throw new Error("missing: "+n);return e}var Pc=function(t){var n,e,r,i,o,u=jc,c=function(t){return 1/Math.min(i[t.source.index],i[t.target.index])},a=_c(30),s=1;function f(r){for(var i=0,u=t.length;i<s;++i)for(var c,a,f,l,h,d,p,b=0;b<u;++b)a=(c=t[b]).source,l=(f=c.target).x+f.vx-a.x-a.vx||mc(),h=f.y+f.vy-a.y-a.vy||mc(),l*=d=((d=Math.sqrt(l*l+h*h))-e[b])/d*r*n[b],h*=d,f.vx-=l*(p=o[b]),f.vy-=h*p,a.vx+=l*(p=1-p),a.vy+=h*p}function l(){if(r){var c,a,s=r.length,f=t.length,l=$i(r,u);for(c=0,i=new Array(s);c<f;++c)(a=t[c]).index=c,"object"!=typeof a.source&&(a.source=Ic(l,a.source)),"object"!=typeof a.target&&(a.target=Ic(l,a.target)),i[a.source.index]=(i[a.source.index]||0)+1,i[a.target.index]=(i[a.target.index]||0)+1;for(c=0,o=new Array(f);c<f;++c)a=t[c],o[c]=i[a.source.index]/(i[a.source.index]+i[a.target.index]);n=new Array(f),h(),e=new Array(f),d()}}function h(){if(r)for(var e=0,i=t.length;e<i;++e)n[e]=+c(t[e],e,t)}function d(){if(r)for(var n=0,i=t.length;n<i;++n)e[n]=+a(t[n],n,t)}return null==t&&(t=[]),f.initialize=function(t){r=t,l()},f.links=function(n){return arguments.length?(t=n,l(),f):t},f.id=function(t){return arguments.length?(u=t,f):u},f.iterations=function(t){return arguments.length?(s=+t,f):s},f.strength=function(t){return arguments.length?(c="function"==typeof t?t:_c(+t),h(),f):c},f.distance=function(t){return arguments.length?(a="function"==typeof t?t:_c(+t),d(),f):a},f};function Fc(t){return t.x}function zc(t){return t.y}var Dc=Math.PI*(3-Math.sqrt(5)),Vc=function(t){var n,e=1,r=.001,i=1-Math.pow(r,1/300),o=0,u=.6,c=$i(),a=Ge(f),s=lt("tick","end");function f(){l(),s.call("tick",n),e<r&&(a.stop(),s.call("end",n))}function l(r){var a,s,f=t.length;void 0===r&&(r=1);for(var l=0;l<r;++l)for(e+=(o-e)*i,c.each((function(t){t(e)})),a=0;a<f;++a)null==(s=t[a]).fx?s.x+=s.vx*=u:(s.x=s.fx,s.vx=0),null==s.fy?s.y+=s.vy*=u:(s.y=s.fy,s.vy=0);return n}function h(){for(var n,e=0,r=t.length;e<r;++e){if((n=t[e]).index=e,null!=n.fx&&(n.x=n.fx),null!=n.fy&&(n.y=n.fy),isNaN(n.x)||isNaN(n.y)){var i=10*Math.sqrt(e),o=e*Dc;n.x=i*Math.cos(o),n.y=i*Math.sin(o)}(isNaN(n.vx)||isNaN(n.vy))&&(n.vx=n.vy=0)}}function d(n){return n.initialize&&n.initialize(t),n}return null==t&&(t=[]),h(),n={tick:l,restart:function(){return a.restart(f),n},stop:function(){return a.stop(),n},nodes:function(e){return arguments.length?(t=e,h(),c.each(d),n):t},alpha:function(t){return arguments.length?(e=+t,n):e},alphaMin:function(t){return arguments.length?(r=+t,n):r},alphaDecay:function(t){return arguments.length?(i=+t,n):+i},alphaTarget:function(t){return arguments.length?(o=+t,n):o},velocityDecay:function(t){return arguments.length?(u=1-t,n):1-u},force:function(t,e){return arguments.length>1?(null==e?c.remove(t):c.set(t,d(e)),n):c.get(t)},find:function(n,e,r){var i,o,u,c,a,s=0,f=t.length;for(null==r?r=1/0:r*=r,s=0;s<f;++s)(u=(i=n-(c=t[s]).x)*i+(o=e-c.y)*o)<r&&(a=c,r=u);return a},on:function(t,e){return arguments.length>1?(s.on(t,e),n):s.on(t)}}},Rc=function(){var t,n,e,r,i=_c(-30),o=1,u=1/0,c=.81;function a(r){var i,o=t.length,u=Tc(t,Fc,zc).visitAfter(f);for(e=r,i=0;i<o;++i)n=t[i],u.visit(l)}function s(){if(t){var n,e,o=t.length;for(r=new Array(o),n=0;n<o;++n)e=t[n],r[e.index]=+i(e,n,t)}}function f(t){var n,e,i,o,u,c=0,a=0;if(t.length){for(i=o=u=0;u<4;++u)(n=t[u])&&(e=Math.abs(n.value))&&(c+=n.value,a+=e,i+=e*n.x,o+=e*n.y);t.x=i/a,t.y=o/a}else{(n=t).x=n.data.x,n.y=n.data.y;do{c+=r[n.data.index]}while(n=n.next)}t.value=c}function l(t,i,a,s){if(!t.value)return!0;var f=t.x-n.x,l=t.y-n.y,h=s-i,d=f*f+l*l;if(h*h/c<d)return d<u&&(0===f&&(d+=(f=mc())*f),0===l&&(d+=(l=mc())*l),d<o&&(d=Math.sqrt(o*d)),n.vx+=f*t.value*e/d,n.vy+=l*t.value*e/d),!0;if(!(t.length||d>=u)){(t.data!==n||t.next)&&(0===f&&(d+=(f=mc())*f),0===l&&(d+=(l=mc())*l),d<o&&(d=Math.sqrt(o*d)));do{t.data!==n&&(h=r[t.data.index]*e/d,n.vx+=f*h,n.vy+=l*h)}while(t=t.next)}}return a.initialize=function(n){t=n,s()},a.strength=function(t){return arguments.length?(i="function"==typeof t?t:_c(+t),s(),a):i},a.distanceMin=function(t){return arguments.length?(o=t*t,a):Math.sqrt(o)},a.distanceMax=function(t){return arguments.length?(u=t*t,a):Math.sqrt(u)},a.theta=function(t){return arguments.length?(c=t*t,a):Math.sqrt(c)},a},Bc=function(t,n,e){var r,i,o,u=_c(.1);function c(t){for(var u=0,c=r.length;u<c;++u){var a=r[u],s=a.x-n||1e-6,f=a.y-e||1e-6,l=Math.sqrt(s*s+f*f),h=(o[u]-l)*i[u]*t/l;a.vx+=s*h,a.vy+=f*h}}function a(){if(r){var n,e=r.length;for(i=new Array(e),o=new Array(e),n=0;n<e;++n)o[n]=+t(r[n],n,r),i[n]=isNaN(o[n])?0:+u(r[n],n,r)}}return"function"!=typeof t&&(t=_c(+t)),null==n&&(n=0),null==e&&(e=0),c.initialize=function(t){r=t,a()},c.strength=function(t){return arguments.length?(u="function"==typeof t?t:_c(+t),a(),c):u},c.radius=function(n){return arguments.length?(t="function"==typeof n?n:_c(+n),a(),c):t},c.x=function(t){return arguments.length?(n=+t,c):n},c.y=function(t){return arguments.length?(e=+t,c):e},c},Uc=function(t){var n,e,r,i=_c(.1);function o(t){for(var i,o=0,u=n.length;o<u;++o)(i=n[o]).vx+=(r[o]-i.x)*e[o]*t}function u(){if(n){var o,u=n.length;for(e=new Array(u),r=new Array(u),o=0;o<u;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=_c(null==t?0:+t)),o.initialize=function(t){n=t,u()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:_c(+t),u(),o):i},o.x=function(n){return arguments.length?(t="function"==typeof n?n:_c(+n),u(),o):t},o},qc=function(t){var n,e,r,i=_c(.1);function o(t){for(var i,o=0,u=n.length;o<u;++o)(i=n[o]).vy+=(r[o]-i.y)*e[o]*t}function u(){if(n){var o,u=n.length;for(e=new Array(u),r=new Array(u),o=0;o<u;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=_c(null==t?0:+t)),o.initialize=function(t){n=t,u()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:_c(+t),u(),o):i},o.y=function(n){return arguments.length?(t="function"==typeof n?n:_c(+n),u(),o):t},o},Lc=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},Yc=function(t){return(t=Lc(Math.abs(t)))?t[1]:NaN},Gc=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Wc(t){if(!(n=Gc.exec(t)))throw new Error("invalid format: "+t);var n;return new Hc({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function Hc(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}Wc.prototype=Hc.prototype,Hc.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Xc,Kc,Zc,Qc,$c=function(t,n){var e=Lc(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Jc={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return $c(100*t,n)},r:$c,s:function(t,n){var e=Lc(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(Xc=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,u=r.length;return o===u?r:o>u?r+new Array(o-u+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Lc(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},ta=function(t){return t},na=Array.prototype.map,ea=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"],ra=function(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?ta:(n=na.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var i=t.length,o=[],u=0,c=n[0],a=0;i>0&&c>0&&(a+c+1>r&&(c=Math.max(1,r-a)),o.push(t.substring(i-=c,i+c)),!((a+=c+1)>r));)c=n[u=(u+1)%n.length];return o.reverse().join(e)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",u=void 0===t.decimal?".":t.decimal+"",c=void 0===t.numerals?ta:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(na.call(t.numerals,String)),a=void 0===t.percent?"%":t.percent+"",s=void 0===t.minus?"-":t.minus+"",f=void 0===t.nan?"NaN":t.nan+"";function l(t){var n=(t=Wc(t)).fill,e=t.align,l=t.sign,h=t.symbol,d=t.zero,p=t.width,b=t.comma,v=t.precision,y=t.trim,g=t.type;"n"===g?(b=!0,g="g"):Jc[g]||(void 0===v&&(v=12),y=!0,g="g"),(d||"0"===n&&"="===e)&&(d=!0,n="0",e="=");var _="$"===h?i:"#"===h&&/[boxX]/.test(g)?"0"+g.toLowerCase():"",m="$"===h?o:/[%p]/.test(g)?a:"",x=Jc[g],w=/[defgprs%]/.test(g);function M(t){var i,o,a,h=_,M=m;if("c"===g)M=x(t)+M,t="";else{var S=(t=+t)<0||1/t<0;if(t=isNaN(t)?f:x(Math.abs(t),v),y&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),S&&0==+t&&"+"!==l&&(S=!1),h=(S?"("===l?l:s:"-"===l||"("===l?"":l)+h,M=("s"===g?ea[8+Xc/3]:"")+M+(S&&"("===l?")":""),w)for(i=-1,o=t.length;++i<o;)if(48>(a=t.charCodeAt(i))||a>57){M=(46===a?u+t.slice(i+1):t.slice(i))+M,t=t.slice(0,i);break}}b&&!d&&(t=r(t,1/0));var T=h.length+t.length+M.length,N=T<p?new Array(p-T+1).join(n):"";switch(b&&d&&(t=r(N+t,N.length?p-M.length:1/0),N=""),e){case"<":t=h+t+M+N;break;case"=":t=h+N+t+M;break;case"^":t=N.slice(0,T=N.length>>1)+h+t+M+N.slice(T);break;default:t=N+h+t+M}return c(t)}return v=void 0===v?6:/[gprs]/.test(g)?Math.max(1,Math.min(21,v)):Math.max(0,Math.min(20,v)),M.toString=function(){return t+""},M}return{format:l,formatPrefix:function(t,n){var e=l(((t=Wc(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Yc(n)/3))),i=Math.pow(10,-r),o=ea[8+r/3];return function(t){return e(i*t)+o}}}};function ia(t){return Kc=ra(t),Zc=Kc.format,Qc=Kc.formatPrefix,Kc}ia({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"});var oa=function(t){return Math.max(0,-Yc(Math.abs(t)))},ua=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Yc(n)/3)))-Yc(Math.abs(t)))},ca=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,Yc(n)-Yc(t))+1},aa=function(){return new sa};function sa(){this.reset()}sa.prototype={constructor:sa,reset:function(){this.s=this.t=0},add:function(t){la(fa,t,this.t),la(this,fa.s,this.s),this.s?this.t+=fa.t:this.s=fa.t},valueOf:function(){return this.s}};var fa=new sa;function la(t,n,e){var r=t.s=n+e,i=r-n,o=r-i;t.t=n-o+(e-i)}var ha=Math.PI,da=ha/2,pa=ha/4,ba=2*ha,va=180/ha,ya=ha/180,ga=Math.abs,_a=Math.atan,ma=Math.atan2,xa=Math.cos,wa=Math.ceil,Ma=Math.exp,Sa=(Math.floor,Math.log),Ta=Math.pow,Na=Math.sin,Ea=Math.sign||function(t){return t>0?1:t<0?-1:0},Ca=Math.sqrt,Aa=Math.tan;function ka(t){return t>1?0:t<-1?ha:Math.acos(t)}function Oa(t){return t>1?da:t<-1?-da:Math.asin(t)}function ja(t){return(t=Na(t/2))*t}function Ia(){}function Pa(t,n){t&&za.hasOwnProperty(t.type)&&za[t.type](t,n)}var Fa={Feature:function(t,n){Pa(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)Pa(e[r].geometry,n)}},za={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){Da(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)Da(e[r],n,0)},Polygon:function(t,n){Va(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)Va(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)Pa(e[r],n)}};function Da(t,n,e){var r,i=-1,o=t.length-e;for(n.lineStart();++i<o;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function Va(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)Da(t[e],n,1);n.polygonEnd()}var Ra,Ba,Ua,qa,La,Ya=function(t,n){t&&Fa.hasOwnProperty(t.type)?Fa[t.type](t,n):Pa(t,n)},Ga=aa(),Wa=aa(),Ha={point:Ia,lineStart:Ia,lineEnd:Ia,polygonStart:function(){Ga.reset(),Ha.lineStart=Xa,Ha.lineEnd=Ka},polygonEnd:function(){var t=+Ga;Wa.add(t<0?ba+t:t),this.lineStart=this.lineEnd=this.point=Ia},sphere:function(){Wa.add(ba)}};function Xa(){Ha.point=Za}function Ka(){Qa(Ra,Ba)}function Za(t,n){Ha.point=Qa,Ra=t,Ba=n,Ua=t*=ya,qa=xa(n=(n*=ya)/2+pa),La=Na(n)}function Qa(t,n){var e=(t*=ya)-Ua,r=e>=0?1:-1,i=r*e,o=xa(n=(n*=ya)/2+pa),u=Na(n),c=La*u,a=qa*o+c*xa(i),s=c*r*Na(i);Ga.add(ma(s,a)),Ua=t,qa=o,La=u}var $a=function(t){return Wa.reset(),Ya(t,Ha),2*Wa};function Ja(t){return[ma(t[1],t[0]),Oa(t[2])]}function ts(t){var n=t[0],e=t[1],r=xa(e);return[r*xa(n),r*Na(n),Na(e)]}function ns(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function es(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function rs(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function is(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function os(t){var n=Ca(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}var us,cs,as,ss,fs,ls,hs,ds,ps,bs,vs=aa(),ys={point:gs,lineStart:ms,lineEnd:xs,polygonStart:function(){ys.point=ws,ys.lineStart=Ms,ys.lineEnd=Ss,vs.reset(),Ha.polygonStart()},polygonEnd:function(){Ha.polygonEnd(),ys.point=gs,ys.lineStart=ms,ys.lineEnd=xs,Ga<0?(us=-(as=180),cs=-(ss=90)):vs>1e-6?ss=90:vs<-1e-6&&(cs=-90),bs[0]=us,bs[1]=as},sphere:function(){us=-(as=180),cs=-(ss=90)}};function gs(t,n){ps.push(bs=[us=t,as=t]),n<cs&&(cs=n),n>ss&&(ss=n)}function _s(t,n){var e=ts([t*ya,n*ya]);if(ds){var r=es(ds,e),i=es([r[1],-r[0],0],r);os(i),i=Ja(i);var o,u=t-fs,c=u>0?1:-1,a=i[0]*va*c,s=ga(u)>180;s^(c*fs<a&&a<c*t)?(o=i[1]*va)>ss&&(ss=o):s^(c*fs<(a=(a+360)%360-180)&&a<c*t)?(o=-i[1]*va)<cs&&(cs=o):(n<cs&&(cs=n),n>ss&&(ss=n)),s?t<fs?Ts(us,t)>Ts(us,as)&&(as=t):Ts(t,as)>Ts(us,as)&&(us=t):as>=us?(t<us&&(us=t),t>as&&(as=t)):t>fs?Ts(us,t)>Ts(us,as)&&(as=t):Ts(t,as)>Ts(us,as)&&(us=t)}else ps.push(bs=[us=t,as=t]);n<cs&&(cs=n),n>ss&&(ss=n),ds=e,fs=t}function ms(){ys.point=_s}function xs(){bs[0]=us,bs[1]=as,ys.point=gs,ds=null}function ws(t,n){if(ds){var e=t-fs;vs.add(ga(e)>180?e+(e>0?360:-360):e)}else ls=t,hs=n;Ha.point(t,n),_s(t,n)}function Ms(){Ha.lineStart()}function Ss(){ws(ls,hs),Ha.lineEnd(),ga(vs)>1e-6&&(us=-(as=180)),bs[0]=us,bs[1]=as,ds=null}function Ts(t,n){return(n-=t)<0?n+360:n}function Ns(t,n){return t[0]-n[0]}function Es(t,n){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}var Cs,As,ks,Os,js,Is,Ps,Fs,zs,Ds,Vs,Rs,Bs,Us,qs,Ls,Ys=function(t){var n,e,r,i,o,u,c;if(ss=as=-(us=cs=1/0),ps=[],Ya(t,ys),e=ps.length){for(ps.sort(Ns),n=1,o=[r=ps[0]];n<e;++n)Es(r,(i=ps[n])[0])||Es(r,i[1])?(Ts(r[0],i[1])>Ts(r[0],r[1])&&(r[1]=i[1]),Ts(i[0],r[1])>Ts(r[0],r[1])&&(r[0]=i[0])):o.push(r=i);for(u=-1/0,n=0,r=o[e=o.length-1];n<=e;r=i,++n)i=o[n],(c=Ts(r[1],i[0]))>u&&(u=c,us=i[0],as=r[1])}return ps=bs=null,us===1/0||cs===1/0?[[NaN,NaN],[NaN,NaN]]:[[us,cs],[as,ss]]},Gs={sphere:Ia,point:Ws,lineStart:Xs,lineEnd:Qs,polygonStart:function(){Gs.lineStart=$s,Gs.lineEnd=Js},polygonEnd:function(){Gs.lineStart=Xs,Gs.lineEnd=Qs}};function Ws(t,n){t*=ya;var e=xa(n*=ya);Hs(e*xa(t),e*Na(t),Na(n))}function Hs(t,n,e){++Cs,ks+=(t-ks)/Cs,Os+=(n-Os)/Cs,js+=(e-js)/Cs}function Xs(){Gs.point=Ks}function Ks(t,n){t*=ya;var e=xa(n*=ya);Us=e*xa(t),qs=e*Na(t),Ls=Na(n),Gs.point=Zs,Hs(Us,qs,Ls)}function Zs(t,n){t*=ya;var e=xa(n*=ya),r=e*xa(t),i=e*Na(t),o=Na(n),u=ma(Ca((u=qs*o-Ls*i)*u+(u=Ls*r-Us*o)*u+(u=Us*i-qs*r)*u),Us*r+qs*i+Ls*o);As+=u,Is+=u*(Us+(Us=r)),Ps+=u*(qs+(qs=i)),Fs+=u*(Ls+(Ls=o)),Hs(Us,qs,Ls)}function Qs(){Gs.point=Ws}function $s(){Gs.point=tf}function Js(){nf(Rs,Bs),Gs.point=Ws}function tf(t,n){Rs=t,Bs=n,t*=ya,n*=ya,Gs.point=nf;var e=xa(n);Us=e*xa(t),qs=e*Na(t),Ls=Na(n),Hs(Us,qs,Ls)}function nf(t,n){t*=ya;var e=xa(n*=ya),r=e*xa(t),i=e*Na(t),o=Na(n),u=qs*o-Ls*i,c=Ls*r-Us*o,a=Us*i-qs*r,s=Ca(u*u+c*c+a*a),f=Oa(s),l=s&&-f/s;zs+=l*u,Ds+=l*c,Vs+=l*a,As+=f,Is+=f*(Us+(Us=r)),Ps+=f*(qs+(qs=i)),Fs+=f*(Ls+(Ls=o)),Hs(Us,qs,Ls)}var ef=function(t){Cs=As=ks=Os=js=Is=Ps=Fs=zs=Ds=Vs=0,Ya(t,Gs);var n=zs,e=Ds,r=Vs,i=n*n+e*e+r*r;return i<1e-12&&(n=Is,e=Ps,r=Fs,As<1e-6&&(n=ks,e=Os,r=js),(i=n*n+e*e+r*r)<1e-12)?[NaN,NaN]:[ma(e,n)*va,Oa(r/Ca(i))*va]},rf=function(t){return function(){return t}},of=function(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e};function uf(t,n){return[ga(t)>ha?t+Math.round(-t/ba)*ba:t,n]}function cf(t,n,e){return(t%=ba)?n||e?of(sf(t),ff(n,e)):sf(t):n||e?ff(n,e):uf}function af(t){return function(n,e){return[(n+=t)>ha?n-ba:n<-ha?n+ba:n,e]}}function sf(t){var n=af(t);return n.invert=af(-t),n}function ff(t,n){var e=xa(t),r=Na(t),i=xa(n),o=Na(n);function u(t,n){var u=xa(n),c=xa(t)*u,a=Na(t)*u,s=Na(n),f=s*e+c*r;return[ma(a*i-f*o,c*e-s*r),Oa(f*i+a*o)]}return u.invert=function(t,n){var u=xa(n),c=xa(t)*u,a=Na(t)*u,s=Na(n),f=s*i-a*o;return[ma(a*i+s*o,c*e+f*r),Oa(f*e-c*r)]},u}uf.invert=uf;var lf=function(t){function n(n){return(n=t(n[0]*ya,n[1]*ya))[0]*=va,n[1]*=va,n}return t=cf(t[0]*ya,t[1]*ya,t.length>2?t[2]*ya:0),n.invert=function(n){return(n=t.invert(n[0]*ya,n[1]*ya))[0]*=va,n[1]*=va,n},n};function hf(t,n,e,r,i,o){if(e){var u=xa(n),c=Na(n),a=r*e;null==i?(i=n+r*ba,o=n-a/2):(i=df(u,i),o=df(u,o),(r>0?i<o:i>o)&&(i+=r*ba));for(var s,f=i;r>0?f>o:f<o;f-=a)s=Ja([u,-c*xa(f),-c*Na(f)]),t.point(s[0],s[1])}}function df(t,n){(n=ts(n))[0]-=t,os(n);var e=ka(-n[1]);return((-n[2]<0?-e:e)+ba-1e-6)%ba}var pf=function(){var t,n,e=rf([0,0]),r=rf(90),i=rf(6),o={point:function(e,r){t.push(e=n(e,r)),e[0]*=va,e[1]*=va}};function u(){var u=e.apply(this,arguments),c=r.apply(this,arguments)*ya,a=i.apply(this,arguments)*ya;return t=[],n=cf(-u[0]*ya,-u[1]*ya,0).invert,hf(o,c,a,1),u={type:"Polygon",coordinates:[t]},t=n=null,u}return u.center=function(t){return arguments.length?(e="function"==typeof t?t:rf([+t[0],+t[1]]),u):e},u.radius=function(t){return arguments.length?(r="function"==typeof t?t:rf(+t),u):r},u.precision=function(t){return arguments.length?(i="function"==typeof t?t:rf(+t),u):i},u},bf=function(){var t,n=[];return{point:function(n,e,r){t.push([n,e,r])},lineStart:function(){n.push(t=[])},lineEnd:Ia,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}},vf=function(t,n){return ga(t[0]-n[0])<1e-6&&ga(t[1]-n[1])<1e-6};function yf(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}var gf=function(t,n,e,r,i){var o,u,c=[],a=[];if(t.forEach((function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],u=t[n];if(vf(r,u)){if(!r[2]&&!u[2]){for(i.lineStart(),o=0;o<n;++o)i.point((r=t[o])[0],r[1]);return void i.lineEnd()}u[0]+=2e-6}c.push(e=new yf(r,t,null,!0)),a.push(e.o=new yf(r,null,e,!1)),c.push(e=new yf(u,t,null,!1)),a.push(e.o=new yf(u,null,e,!0))}})),c.length){for(a.sort(n),_f(c),_f(a),o=0,u=a.length;o<u;++o)a[o].e=e=!e;for(var s,f,l=c[0];;){for(var h=l,d=!0;h.v;)if((h=h.n)===l)return;s=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(d)for(o=0,u=s.length;o<u;++o)i.point((f=s[o])[0],f[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(d)for(s=h.p.z,o=s.length-1;o>=0;--o)i.point((f=s[o])[0],f[1]);else r(h.x,h.p.x,-1,i);h=h.p}s=(h=h.o).z,d=!d}while(!h.v);i.lineEnd()}}};function _f(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}var mf=aa();function xf(t){return ga(t[0])<=ha?t[0]:Ea(t[0])*((ga(t[0])+ha)%ba-ha)}var wf=function(t,n){var e=xf(n),r=n[1],i=Na(r),o=[Na(e),-xa(e),0],u=0,c=0;mf.reset(),1===i?r=da+1e-6:-1===i&&(r=-da-1e-6);for(var a=0,s=t.length;a<s;++a)if(l=(f=t[a]).length)for(var f,l,h=f[l-1],d=xf(h),p=h[1]/2+pa,b=Na(p),v=xa(p),y=0;y<l;++y,d=_,b=x,v=w,h=g){var g=f[y],_=xf(g),m=g[1]/2+pa,x=Na(m),w=xa(m),M=_-d,S=M>=0?1:-1,T=S*M,N=T>ha,E=b*x;if(mf.add(ma(E*S*Na(T),v*w+E*xa(T))),u+=N?M+S*ba:M,N^d>=e^_>=e){var C=es(ts(h),ts(g));os(C);var A=es(o,C);os(A);var k=(N^M>=0?-1:1)*Oa(A[2]);(r>k||r===k&&(C[0]||C[1]))&&(c+=N^M>=0?1:-1)}}return(u<-1e-6||u<1e-6&&mf<-1e-6)^1&c},Mf=function(t,n,e,r){return function(i){var o,u,c,a=n(i),s=bf(),f=n(s),l=!1,h={point:d,lineStart:b,lineEnd:v,polygonStart:function(){h.point=y,h.lineStart=g,h.lineEnd=_,u=[],o=[]},polygonEnd:function(){h.point=d,h.lineStart=b,h.lineEnd=v,u=V(u);var t=wf(o,r);u.length?(l||(i.polygonStart(),l=!0),gf(u,Tf,t,e,i)):t&&(l||(i.polygonStart(),l=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),l&&(i.polygonEnd(),l=!1),u=o=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function d(n,e){t(n,e)&&i.point(n,e)}function p(t,n){a.point(t,n)}function b(){h.point=p,a.lineStart()}function v(){h.point=d,a.lineEnd()}function y(t,n){c.push([t,n]),f.point(t,n)}function g(){f.lineStart(),c=[]}function _(){y(c[0][0],c[0][1]),f.lineEnd();var t,n,e,r,a=f.clean(),h=s.result(),d=h.length;if(c.pop(),o.push(c),c=null,d)if(1&a){if((n=(e=h[0]).length-1)>0){for(l||(i.polygonStart(),l=!0),i.lineStart(),t=0;t<n;++t)i.point((r=e[t])[0],r[1]);i.lineEnd()}}else d>1&&2&a&&h.push(h.pop().concat(h.shift())),u.push(h.filter(Sf))}return h}};function Sf(t){return t.length>1}function Tf(t,n){return((t=t.x)[0]<0?t[1]-da-1e-6:da-t[1])-((n=n.x)[0]<0?n[1]-da-1e-6:da-n[1])}var Nf=Mf((function(){return!0}),(function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(o,u){var c=o>0?ha:-ha,a=ga(o-e);ga(a-ha)<1e-6?(t.point(e,r=(r+u)/2>0?da:-da),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(c,r),t.point(o,r),n=0):i!==c&&a>=ha&&(ga(e-i)<1e-6&&(e-=1e-6*i),ga(o-c)<1e-6&&(o-=1e-6*c),r=function(t,n,e,r){var i,o,u=Na(t-e);return ga(u)>1e-6?_a((Na(n)*(o=xa(r))*Na(e)-Na(r)*(i=xa(n))*Na(t))/(i*o*u)):(n+r)/2}(e,r,o,u),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(c,r),n=0),t.point(e=o,r=u),i=c},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}}),(function(t,n,e,r){var i;if(null==t)i=e*da,r.point(-ha,i),r.point(0,i),r.point(ha,i),r.point(ha,0),r.point(ha,-i),r.point(0,-i),r.point(-ha,-i),r.point(-ha,0),r.point(-ha,i);else if(ga(t[0]-n[0])>1e-6){var o=t[0]<n[0]?ha:-ha;i=e*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(n[0],n[1])}),[-ha,-da]);var Ef=function(t){var n=xa(t),e=6*ya,r=n>0,i=ga(n)>1e-6;function o(t,e){return xa(t)*xa(e)>n}function u(t,e,r){var i=[1,0,0],o=es(ts(t),ts(e)),u=ns(o,o),c=o[0],a=u-c*c;if(!a)return!r&&t;var s=n*u/a,f=-n*c/a,l=es(i,o),h=is(i,s);rs(h,is(o,f));var d=l,p=ns(h,d),b=ns(d,d),v=p*p-b*(ns(h,h)-1);if(!(v<0)){var y=Ca(v),g=is(d,(-p-y)/b);if(rs(g,h),g=Ja(g),!r)return g;var _,m=t[0],x=e[0],w=t[1],M=e[1];x<m&&(_=m,m=x,x=_);var S=x-m,T=ga(S-ha)<1e-6;if(!T&&M<w&&(_=w,w=M,M=_),T||S<1e-6?T?w+M>0^g[1]<(ga(g[0]-m)<1e-6?w:M):w<=g[1]&&g[1]<=M:S>ha^(m<=g[0]&&g[0]<=x)){var N=is(d,(-p+y)/b);return rs(N,h),[g,Ja(N)]}}}function c(n,e){var i=r?t:ha-t,o=0;return n<-i?o|=1:n>i&&(o|=2),e<-i?o|=4:e>i&&(o|=8),o}return Mf(o,(function(t){var n,e,a,s,f;return{lineStart:function(){s=a=!1,f=1},point:function(l,h){var d,p=[l,h],b=o(l,h),v=r?b?0:c(l,h):b?c(l+(l<0?ha:-ha),h):0;if(!n&&(s=a=b)&&t.lineStart(),b!==a&&(!(d=u(n,p))||vf(n,d)||vf(p,d))&&(p[2]=1),b!==a)f=0,b?(t.lineStart(),d=u(p,n),t.point(d[0],d[1])):(d=u(n,p),t.point(d[0],d[1],2),t.lineEnd()),n=d;else if(i&&n&&r^b){var y;v&e||!(y=u(p,n,!0))||(f=0,r?(t.lineStart(),t.point(y[0][0],y[0][1]),t.point(y[1][0],y[1][1]),t.lineEnd()):(t.point(y[1][0],y[1][1]),t.lineEnd(),t.lineStart(),t.point(y[0][0],y[0][1],3)))}!b||n&&vf(n,p)||t.point(p[0],p[1]),n=p,a=b,e=v},lineEnd:function(){a&&t.lineEnd(),n=null},clean:function(){return f|(s&&a)<<1}}}),(function(n,r,i,o){hf(o,t,e,i,n,r)}),r?[0,-t]:[-ha,t-ha])};function Cf(t,n,e,r){function i(i,o){return t<=i&&i<=e&&n<=o&&o<=r}function o(i,o,c,s){var f=0,l=0;if(null==i||(f=u(i,c))!==(l=u(o,c))||a(i,o)<0^c>0)do{s.point(0===f||3===f?t:e,f>1?r:n)}while((f=(f+c+4)%4)!==l);else s.point(o[0],o[1])}function u(r,i){return ga(r[0]-t)<1e-6?i>0?0:3:ga(r[0]-e)<1e-6?i>0?2:1:ga(r[1]-n)<1e-6?i>0?1:0:i>0?3:2}function c(t,n){return a(t.x,n.x)}function a(t,n){var e=u(t,1),r=u(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(u){var a,s,f,l,h,d,p,b,v,y,g,_=u,m=bf(),x={point:w,lineStart:function(){x.point=M,s&&s.push(f=[]);y=!0,v=!1,p=b=NaN},lineEnd:function(){a&&(M(l,h),d&&v&&m.rejoin(),a.push(m.result()));x.point=w,v&&_.lineEnd()},polygonStart:function(){_=m,a=[],s=[],g=!0},polygonEnd:function(){var n=function(){for(var n=0,e=0,i=s.length;e<i;++e)for(var o,u,c=s[e],a=1,f=c.length,l=c[0],h=l[0],d=l[1];a<f;++a)o=h,u=d,l=c[a],h=l[0],d=l[1],u<=r?d>r&&(h-o)*(r-u)>(d-u)*(t-o)&&++n:d<=r&&(h-o)*(r-u)<(d-u)*(t-o)&&--n;return n}(),e=g&&n,i=(a=V(a)).length;(e||i)&&(u.polygonStart(),e&&(u.lineStart(),o(null,null,1,u),u.lineEnd()),i&&gf(a,c,n,o,u),u.polygonEnd());_=u,a=s=f=null}};function w(t,n){i(t,n)&&_.point(t,n)}function M(o,u){var c=i(o,u);if(s&&f.push([o,u]),y)l=o,h=u,d=c,y=!1,c&&(_.lineStart(),_.point(o,u));else if(c&&v)_.point(o,u);else{var a=[p=Math.max(-1e9,Math.min(1e9,p)),b=Math.max(-1e9,Math.min(1e9,b))],m=[o=Math.max(-1e9,Math.min(1e9,o)),u=Math.max(-1e9,Math.min(1e9,u))];!function(t,n,e,r,i,o){var u,c=t[0],a=t[1],s=0,f=1,l=n[0]-c,h=n[1]-a;if(u=e-c,l||!(u>0)){if(u/=l,l<0){if(u<s)return;u<f&&(f=u)}else if(l>0){if(u>f)return;u>s&&(s=u)}if(u=i-c,l||!(u<0)){if(u/=l,l<0){if(u>f)return;u>s&&(s=u)}else if(l>0){if(u<s)return;u<f&&(f=u)}if(u=r-a,h||!(u>0)){if(u/=h,h<0){if(u<s)return;u<f&&(f=u)}else if(h>0){if(u>f)return;u>s&&(s=u)}if(u=o-a,h||!(u<0)){if(u/=h,h<0){if(u>f)return;u>s&&(s=u)}else if(h>0){if(u<s)return;u<f&&(f=u)}return s>0&&(t[0]=c+s*l,t[1]=a+s*h),f<1&&(n[0]=c+f*l,n[1]=a+f*h),!0}}}}}(a,m,t,n,e,r)?c&&(_.lineStart(),_.point(o,u),g=!1):(v||(_.lineStart(),_.point(a[0],a[1])),_.point(m[0],m[1]),c||_.lineEnd(),g=!1)}p=o,b=u,v=c}return x}}var Af,kf,Of,jf=function(){var t,n,e,r=0,i=0,o=960,u=500;return e={stream:function(e){return t&&n===e?t:t=Cf(r,i,o,u)(n=e)},extent:function(c){return arguments.length?(r=+c[0][0],i=+c[0][1],o=+c[1][0],u=+c[1][1],t=n=null,e):[[r,i],[o,u]]}}},If=aa(),Pf={sphere:Ia,point:Ia,lineStart:function(){Pf.point=zf,Pf.lineEnd=Ff},lineEnd:Ia,polygonStart:Ia,polygonEnd:Ia};function Ff(){Pf.point=Pf.lineEnd=Ia}function zf(t,n){Af=t*=ya,kf=Na(n*=ya),Of=xa(n),Pf.point=Df}function Df(t,n){t*=ya;var e=Na(n*=ya),r=xa(n),i=ga(t-Af),o=xa(i),u=r*Na(i),c=Of*e-kf*r*o,a=kf*e+Of*r*o;If.add(ma(Ca(u*u+c*c),a)),Af=t,kf=e,Of=r}var Vf=function(t){return If.reset(),Ya(t,Pf),+If},Rf=[null,null],Bf={type:"LineString",coordinates:Rf},Uf=function(t,n){return Rf[0]=t,Rf[1]=n,Vf(Bf)},qf={Feature:function(t,n){return Yf(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)if(Yf(e[r].geometry,n))return!0;return!1}},Lf={Sphere:function(){return!0},Point:function(t,n){return Gf(t.coordinates,n)},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(Gf(e[r],n))return!0;return!1},LineString:function(t,n){return Wf(t.coordinates,n)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(Wf(e[r],n))return!0;return!1},Polygon:function(t,n){return Hf(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(Hf(e[r],n))return!0;return!1},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)if(Yf(e[r],n))return!0;return!1}};function Yf(t,n){return!(!t||!Lf.hasOwnProperty(t.type))&&Lf[t.type](t,n)}function Gf(t,n){return 0===Uf(t,n)}function Wf(t,n){for(var e,r,i,o=0,u=t.length;o<u;o++){if(0===(r=Uf(t[o],n)))return!0;if(o>0&&(i=Uf(t[o],t[o-1]))>0&&e<=i&&r<=i&&(e+r-i)*(1-Math.pow((e-r)/i,2))<1e-12*i)return!0;e=r}return!1}function Hf(t,n){return!!wf(t.map(Xf),Kf(n))}function Xf(t){return(t=t.map(Kf)).pop(),t}function Kf(t){return[t[0]*ya,t[1]*ya]}var Zf=function(t,n){return(t&&qf.hasOwnProperty(t.type)?qf[t.type]:Yf)(t,n)};function Qf(t,n,e){var r=M(t,n-1e-6,e).concat(n);return function(t){return r.map((function(n){return[t,n]}))}}function $f(t,n,e){var r=M(t,n-1e-6,e).concat(n);return function(t){return r.map((function(n){return[n,t]}))}}function Jf(){var t,n,e,r,i,o,u,c,a,s,f,l,h=10,d=h,p=90,b=360,v=2.5;function y(){return{type:"MultiLineString",coordinates:g()}}function g(){return M(wa(r/p)*p,e,p).map(f).concat(M(wa(c/b)*b,u,b).map(l)).concat(M(wa(n/h)*h,t,h).filter((function(t){return ga(t%p)>1e-6})).map(a)).concat(M(wa(o/d)*d,i,d).filter((function(t){return ga(t%b)>1e-6})).map(s))}return y.lines=function(){return g().map((function(t){return{type:"LineString",coordinates:t}}))},y.outline=function(){return{type:"Polygon",coordinates:[f(r).concat(l(u).slice(1),f(e).reverse().slice(1),l(c).reverse().slice(1))]}},y.extent=function(t){return arguments.length?y.extentMajor(t).extentMinor(t):y.extentMinor()},y.extentMajor=function(t){return arguments.length?(r=+t[0][0],e=+t[1][0],c=+t[0][1],u=+t[1][1],r>e&&(t=r,r=e,e=t),c>u&&(t=c,c=u,u=t),y.precision(v)):[[r,c],[e,u]]},y.extentMinor=function(e){return arguments.length?(n=+e[0][0],t=+e[1][0],o=+e[0][1],i=+e[1][1],n>t&&(e=n,n=t,t=e),o>i&&(e=o,o=i,i=e),y.precision(v)):[[n,o],[t,i]]},y.step=function(t){return arguments.length?y.stepMajor(t).stepMinor(t):y.stepMinor()},y.stepMajor=function(t){return arguments.length?(p=+t[0],b=+t[1],y):[p,b]},y.stepMinor=function(t){return arguments.length?(h=+t[0],d=+t[1],y):[h,d]},y.precision=function(h){return arguments.length?(v=+h,a=Qf(o,i,90),s=$f(n,t,v),f=Qf(c,u,90),l=$f(r,e,v),y):v},y.extentMajor([[-180,-89.999999],[180,89.999999]]).extentMinor([[-180,-80.000001],[180,80.000001]])}function tl(){return Jf()()}var nl,el,rl,il,ol=function(t,n){var e=t[0]*ya,r=t[1]*ya,i=n[0]*ya,o=n[1]*ya,u=xa(r),c=Na(r),a=xa(o),s=Na(o),f=u*xa(e),l=u*Na(e),h=a*xa(i),d=a*Na(i),p=2*Oa(Ca(ja(o-r)+u*a*ja(i-e))),b=Na(p),v=p?function(t){var n=Na(t*=p)/b,e=Na(p-t)/b,r=e*f+n*h,i=e*l+n*d,o=e*c+n*s;return[ma(i,r)*va,ma(o,Ca(r*r+i*i))*va]}:function(){return[e*va,r*va]};return v.distance=p,v},ul=function(t){return t},cl=aa(),al=aa(),sl={point:Ia,lineStart:Ia,lineEnd:Ia,polygonStart:function(){sl.lineStart=fl,sl.lineEnd=dl},polygonEnd:function(){sl.lineStart=sl.lineEnd=sl.point=Ia,cl.add(ga(al)),al.reset()},result:function(){var t=cl/2;return cl.reset(),t}};function fl(){sl.point=ll}function ll(t,n){sl.point=hl,nl=rl=t,el=il=n}function hl(t,n){al.add(il*t-rl*n),rl=t,il=n}function dl(){hl(nl,el)}var pl=sl,bl=1/0,vl=bl,yl=-bl,gl=yl;var _l,ml,xl,wl,Ml={point:function(t,n){t<bl&&(bl=t);t>yl&&(yl=t);n<vl&&(vl=n);n>gl&&(gl=n)},lineStart:Ia,lineEnd:Ia,polygonStart:Ia,polygonEnd:Ia,result:function(){var t=[[bl,vl],[yl,gl]];return yl=gl=-(vl=bl=1/0),t}},Sl=0,Tl=0,Nl=0,El=0,Cl=0,Al=0,kl=0,Ol=0,jl=0,Il={point:Pl,lineStart:Fl,lineEnd:Vl,polygonStart:function(){Il.lineStart=Rl,Il.lineEnd=Bl},polygonEnd:function(){Il.point=Pl,Il.lineStart=Fl,Il.lineEnd=Vl},result:function(){var t=jl?[kl/jl,Ol/jl]:Al?[El/Al,Cl/Al]:Nl?[Sl/Nl,Tl/Nl]:[NaN,NaN];return Sl=Tl=Nl=El=Cl=Al=kl=Ol=jl=0,t}};function Pl(t,n){Sl+=t,Tl+=n,++Nl}function Fl(){Il.point=zl}function zl(t,n){Il.point=Dl,Pl(xl=t,wl=n)}function Dl(t,n){var e=t-xl,r=n-wl,i=Ca(e*e+r*r);El+=i*(xl+t)/2,Cl+=i*(wl+n)/2,Al+=i,Pl(xl=t,wl=n)}function Vl(){Il.point=Pl}function Rl(){Il.point=Ul}function Bl(){ql(_l,ml)}function Ul(t,n){Il.point=ql,Pl(_l=xl=t,ml=wl=n)}function ql(t,n){var e=t-xl,r=n-wl,i=Ca(e*e+r*r);El+=i*(xl+t)/2,Cl+=i*(wl+n)/2,Al+=i,kl+=(i=wl*t-xl*n)*(xl+t),Ol+=i*(wl+n),jl+=3*i,Pl(xl=t,wl=n)}var Ll=Il;function Yl(t){this._context=t}Yl.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,ba)}},result:Ia};var Gl,Wl,Hl,Xl,Kl,Zl=aa(),Ql={point:Ia,lineStart:function(){Ql.point=$l},lineEnd:function(){Gl&&Jl(Wl,Hl),Ql.point=Ia},polygonStart:function(){Gl=!0},polygonEnd:function(){Gl=null},result:function(){var t=+Zl;return Zl.reset(),t}};function $l(t,n){Ql.point=Jl,Wl=Xl=t,Hl=Kl=n}function Jl(t,n){Xl-=t,Kl-=n,Zl.add(Ca(Xl*Xl+Kl*Kl)),Xl=t,Kl=n}var th=Ql;function nh(){this._string=[]}function eh(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}nh.prototype={_radius:4.5,_circle:eh(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=eh(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};var rh=function(t,n){var e,r,i=4.5;function o(t){return t&&("function"==typeof i&&r.pointRadius(+i.apply(this,arguments)),Ya(t,e(r))),r.result()}return o.area=function(t){return Ya(t,e(pl)),pl.result()},o.measure=function(t){return Ya(t,e(th)),th.result()},o.bounds=function(t){return Ya(t,e(Ml)),Ml.result()},o.centroid=function(t){return Ya(t,e(Ll)),Ll.result()},o.projection=function(n){return arguments.length?(e=null==n?(t=null,ul):(t=n).stream,o):t},o.context=function(t){return arguments.length?(r=null==t?(n=null,new nh):new Yl(n=t),"function"!=typeof i&&r.pointRadius(i),o):n},o.pointRadius=function(t){return arguments.length?(i="function"==typeof t?t:(r.pointRadius(+t),+t),o):i},o.projection(t).context(n)},ih=function(t){return{stream:oh(t)}};function oh(t){return function(n){var e=new uh;for(var r in t)e[r]=t[r];return e.stream=n,e}}function uh(){}function ch(t,n,e){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),Ya(e,t.stream(Ml)),n(Ml.result()),null!=r&&t.clipExtent(r),t}function ah(t,n,e){return ch(t,(function(e){var r=n[1][0]-n[0][0],i=n[1][1]-n[0][1],o=Math.min(r/(e[1][0]-e[0][0]),i/(e[1][1]-e[0][1])),u=+n[0][0]+(r-o*(e[1][0]+e[0][0]))/2,c=+n[0][1]+(i-o*(e[1][1]+e[0][1]))/2;t.scale(150*o).translate([u,c])}),e)}function sh(t,n,e){return ah(t,[[0,0],n],e)}function fh(t,n,e){return ch(t,(function(e){var r=+n,i=r/(e[1][0]-e[0][0]),o=(r-i*(e[1][0]+e[0][0]))/2,u=-i*e[0][1];t.scale(150*i).translate([o,u])}),e)}function lh(t,n,e){return ch(t,(function(e){var r=+n,i=r/(e[1][1]-e[0][1]),o=-i*e[0][0],u=(r-i*(e[1][1]+e[0][1]))/2;t.scale(150*i).translate([o,u])}),e)}uh.prototype={constructor:uh,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var hh=xa(30*ya),dh=function(t,n){return+n?function(t,n){function e(r,i,o,u,c,a,s,f,l,h,d,p,b,v){var y=s-r,g=f-i,_=y*y+g*g;if(_>4*n&&b--){var m=u+h,x=c+d,w=a+p,M=Ca(m*m+x*x+w*w),S=Oa(w/=M),T=ga(ga(w)-1)<1e-6||ga(o-l)<1e-6?(o+l)/2:ma(x,m),N=t(T,S),E=N[0],C=N[1],A=E-r,k=C-i,O=g*A-y*k;(O*O/_>n||ga((y*A+g*k)/_-.5)>.3||u*h+c*d+a*p<hh)&&(e(r,i,o,u,c,a,E,C,T,m/=M,x/=M,w,b,v),v.point(E,C),e(E,C,T,m,x,w,s,f,l,h,d,p,b,v))}}return function(n){var r,i,o,u,c,a,s,f,l,h,d,p,b={point:v,lineStart:y,lineEnd:_,polygonStart:function(){n.polygonStart(),b.lineStart=m},polygonEnd:function(){n.polygonEnd(),b.lineStart=y}};function v(e,r){e=t(e,r),n.point(e[0],e[1])}function y(){f=NaN,b.point=g,n.lineStart()}function g(r,i){var o=ts([r,i]),u=t(r,i);e(f,l,s,h,d,p,f=u[0],l=u[1],s=r,h=o[0],d=o[1],p=o[2],16,n),n.point(f,l)}function _(){b.point=v,n.lineEnd()}function m(){y(),b.point=x,b.lineEnd=w}function x(t,n){g(r=t,n),i=f,o=l,u=h,c=d,a=p,b.point=g}function w(){e(f,l,s,h,d,p,i,o,r,u,c,a,16,n),b.lineEnd=_,_()}return b}}(t,n):function(t){return oh({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}(t)};var ph=oh({point:function(t,n){this.stream.point(t*ya,n*ya)}});function bh(t,n,e,r,i){function o(o,u){return[n+t*(o*=r),e-t*(u*=i)]}return o.invert=function(o,u){return[(o-n)/t*r,(e-u)/t*i]},o}function vh(t,n,e,r,i,o){var u=xa(o),c=Na(o),a=u*t,s=c*t,f=u/t,l=c/t,h=(c*e-u*n)/t,d=(c*n+u*e)/t;function p(t,o){return[a*(t*=r)-s*(o*=i)+n,e-s*t-a*o]}return p.invert=function(t,n){return[r*(f*t-l*n+h),i*(d-l*t-f*n)]},p}function yh(t){return gh((function(){return t}))()}function gh(t){var n,e,r,i,o,u,c,a,s,f,l=150,h=480,d=250,p=0,b=0,v=0,y=0,g=0,_=0,m=1,x=1,w=null,M=Nf,S=null,T=ul,N=.5;function E(t){return a(t[0]*ya,t[1]*ya)}function C(t){return(t=a.invert(t[0],t[1]))&&[t[0]*va,t[1]*va]}function A(){var t=vh(l,0,0,m,x,_).apply(null,n(p,b)),r=(_?vh:bh)(l,h-t[0],d-t[1],m,x,_);return e=cf(v,y,g),c=of(n,r),a=of(e,c),u=dh(c,N),k()}function k(){return s=f=null,E}return E.stream=function(t){return s&&f===t?s:s=ph(function(t){return oh({point:function(n,e){var r=t(n,e);return this.stream.point(r[0],r[1])}})}(e)(M(u(T(f=t)))))},E.preclip=function(t){return arguments.length?(M=t,w=void 0,k()):M},E.postclip=function(t){return arguments.length?(T=t,S=r=i=o=null,k()):T},E.clipAngle=function(t){return arguments.length?(M=+t?Ef(w=t*ya):(w=null,Nf),k()):w*va},E.clipExtent=function(t){return arguments.length?(T=null==t?(S=r=i=o=null,ul):Cf(S=+t[0][0],r=+t[0][1],i=+t[1][0],o=+t[1][1]),k()):null==S?null:[[S,r],[i,o]]},E.scale=function(t){return arguments.length?(l=+t,A()):l},E.translate=function(t){return arguments.length?(h=+t[0],d=+t[1],A()):[h,d]},E.center=function(t){return arguments.length?(p=t[0]%360*ya,b=t[1]%360*ya,A()):[p*va,b*va]},E.rotate=function(t){return arguments.length?(v=t[0]%360*ya,y=t[1]%360*ya,g=t.length>2?t[2]%360*ya:0,A()):[v*va,y*va,g*va]},E.angle=function(t){return arguments.length?(_=t%360*ya,A()):_*va},E.reflectX=function(t){return arguments.length?(m=t?-1:1,A()):m<0},E.reflectY=function(t){return arguments.length?(x=t?-1:1,A()):x<0},E.precision=function(t){return arguments.length?(u=dh(c,N=t*t),k()):Ca(N)},E.fitExtent=function(t,n){return ah(E,t,n)},E.fitSize=function(t,n){return sh(E,t,n)},E.fitWidth=function(t,n){return fh(E,t,n)},E.fitHeight=function(t,n){return lh(E,t,n)},function(){return n=t.apply(this,arguments),E.invert=n.invert&&C,A()}}function _h(t){var n=0,e=ha/3,r=gh(t),i=r(n,e);return i.parallels=function(t){return arguments.length?r(n=t[0]*ya,e=t[1]*ya):[n*va,e*va]},i}function mh(t,n){var e=Na(t),r=(e+Na(n))/2;if(ga(r)<1e-6)return function(t){var n=xa(t);function e(t,e){return[t*n,Na(e)/n]}return e.invert=function(t,e){return[t/n,Oa(e*n)]},e}(t);var i=1+e*(2*r-e),o=Ca(i)/r;function u(t,n){var e=Ca(i-2*r*Na(n))/r;return[e*Na(t*=r),o-e*xa(t)]}return u.invert=function(t,n){var e=o-n,u=ma(t,ga(e))*Ea(e);return e*r<0&&(u-=ha*Ea(t)*Ea(e)),[u/r,Oa((i-(t*t+e*e)*r*r)/(2*r))]},u}var xh=function(){return _h(mh).scale(155.424).center([0,33.6442])},wh=function(){return xh().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])};var Mh=function(){var t,n,e,r,i,o,u=wh(),c=xh().rotate([154,0]).center([-2,58.5]).parallels([55,65]),a=xh().rotate([157,0]).center([-3,19.9]).parallels([8,18]),s={point:function(t,n){o=[t,n]}};function f(t){var n=t[0],u=t[1];return o=null,e.point(n,u),o||(r.point(n,u),o)||(i.point(n,u),o)}function l(){return t=n=null,f}return f.invert=function(t){var n=u.scale(),e=u.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?c:i>=.166&&i<.234&&r>=-.214&&r<-.115?a:u).invert(t)},f.stream=function(e){return t&&n===e?t:(r=[u.stream(n=e),c.stream(e),a.stream(e)],i=r.length,t={point:function(t,n){for(var e=-1;++e<i;)r[e].point(t,n)},sphere:function(){for(var t=-1;++t<i;)r[t].sphere()},lineStart:function(){for(var t=-1;++t<i;)r[t].lineStart()},lineEnd:function(){for(var t=-1;++t<i;)r[t].lineEnd()},polygonStart:function(){for(var t=-1;++t<i;)r[t].polygonStart()},polygonEnd:function(){for(var t=-1;++t<i;)r[t].polygonEnd()}});var r,i},f.precision=function(t){return arguments.length?(u.precision(t),c.precision(t),a.precision(t),l()):u.precision()},f.scale=function(t){return arguments.length?(u.scale(t),c.scale(.35*t),a.scale(t),f.translate(u.translate())):u.scale()},f.translate=function(t){if(!arguments.length)return u.translate();var n=u.scale(),o=+t[0],f=+t[1];return e=u.translate(t).clipExtent([[o-.455*n,f-.238*n],[o+.455*n,f+.238*n]]).stream(s),r=c.translate([o-.307*n,f+.201*n]).clipExtent([[o-.425*n+1e-6,f+.12*n+1e-6],[o-.214*n-1e-6,f+.234*n-1e-6]]).stream(s),i=a.translate([o-.205*n,f+.212*n]).clipExtent([[o-.214*n+1e-6,f+.166*n+1e-6],[o-.115*n-1e-6,f+.234*n-1e-6]]).stream(s),l()},f.fitExtent=function(t,n){return ah(f,t,n)},f.fitSize=function(t,n){return sh(f,t,n)},f.fitWidth=function(t,n){return fh(f,t,n)},f.fitHeight=function(t,n){return lh(f,t,n)},f.scale(1070)};function Sh(t){return function(n,e){var r=xa(n),i=xa(e),o=t(r*i);return[o*i*Na(n),o*Na(e)]}}function Th(t){return function(n,e){var r=Ca(n*n+e*e),i=t(r),o=Na(i),u=xa(i);return[ma(n*o,r*u),Oa(r&&e*o/r)]}}var Nh=Sh((function(t){return Ca(2/(1+t))}));Nh.invert=Th((function(t){return 2*Oa(t/2)}));var Eh=function(){return yh(Nh).scale(124.75).clipAngle(179.999)},Ch=Sh((function(t){return(t=ka(t))&&t/Na(t)}));Ch.invert=Th((function(t){return t}));var Ah=function(){return yh(Ch).scale(79.4188).clipAngle(179.999)};function kh(t,n){return[t,Sa(Aa((da+n)/2))]}kh.invert=function(t,n){return[t,2*_a(Ma(n))-da]};var Oh=function(){return jh(kh).scale(961/ba)};function jh(t){var n,e,r,i=yh(t),o=i.center,u=i.scale,c=i.translate,a=i.clipExtent,s=null;function f(){var o=ha*u(),c=i(lf(i.rotate()).invert([0,0]));return a(null==s?[[c[0]-o,c[1]-o],[c[0]+o,c[1]+o]]:t===kh?[[Math.max(c[0]-o,s),n],[Math.min(c[0]+o,e),r]]:[[s,Math.max(c[1]-o,n)],[e,Math.min(c[1]+o,r)]])}return i.scale=function(t){return arguments.length?(u(t),f()):u()},i.translate=function(t){return arguments.length?(c(t),f()):c()},i.center=function(t){return arguments.length?(o(t),f()):o()},i.clipExtent=function(t){return arguments.length?(null==t?s=n=e=r=null:(s=+t[0][0],n=+t[0][1],e=+t[1][0],r=+t[1][1]),f()):null==s?null:[[s,n],[e,r]]},f()}function Ih(t){return Aa((da+t)/2)}function Ph(t,n){var e=xa(t),r=t===n?Na(t):Sa(e/xa(n))/Sa(Ih(n)/Ih(t)),i=e*Ta(Ih(t),r)/r;if(!r)return kh;function o(t,n){i>0?n<1e-6-da&&(n=1e-6-da):n>da-1e-6&&(n=da-1e-6);var e=i/Ta(Ih(n),r);return[e*Na(r*t),i-e*xa(r*t)]}return o.invert=function(t,n){var e=i-n,o=Ea(r)*Ca(t*t+e*e),u=ma(t,ga(e))*Ea(e);return e*r<0&&(u-=ha*Ea(t)*Ea(e)),[u/r,2*_a(Ta(i/o,1/r))-da]},o}var Fh=function(){return _h(Ph).scale(109.5).parallels([30,30])};function zh(t,n){return[t,n]}zh.invert=zh;var Dh=function(){return yh(zh).scale(152.63)};function Vh(t,n){var e=xa(t),r=t===n?Na(t):(e-xa(n))/(n-t),i=e/r+t;if(ga(r)<1e-6)return zh;function o(t,n){var e=i-n,o=r*t;return[e*Na(o),i-e*xa(o)]}return o.invert=function(t,n){var e=i-n,o=ma(t,ga(e))*Ea(e);return e*r<0&&(o-=ha*Ea(t)*Ea(e)),[o/r,i-Ea(r)*Ca(t*t+e*e)]},o}var Rh=function(){return _h(Vh).scale(131.154).center([0,13.9389])},Bh=1.340264,Uh=-.081106,qh=893e-6,Lh=.003796,Yh=Ca(3)/2;function Gh(t,n){var e=Oa(Yh*Na(n)),r=e*e,i=r*r*r;return[t*xa(e)/(Yh*(Bh+3*Uh*r+i*(7*qh+9*Lh*r))),e*(Bh+Uh*r+i*(qh+Lh*r))]}Gh.invert=function(t,n){for(var e,r=n,i=r*r,o=i*i*i,u=0;u<12&&(o=(i=(r-=e=(r*(Bh+Uh*i+o*(qh+Lh*i))-n)/(Bh+3*Uh*i+o*(7*qh+9*Lh*i)))*r)*i*i,!(ga(e)<1e-12));++u);return[Yh*t*(Bh+3*Uh*i+o*(7*qh+9*Lh*i))/xa(r),Oa(Na(r)/Yh)]};var Wh=function(){return yh(Gh).scale(177.158)};function Hh(t,n){var e=xa(n),r=xa(t)*e;return[e*Na(t)/r,Na(n)/r]}Hh.invert=Th(_a);var Xh=function(){return yh(Hh).scale(144.049).clipAngle(60)},Kh=function(){var t,n,e,r,i,o,u,c=1,a=0,s=0,f=1,l=1,h=0,d=null,p=1,b=1,v=oh({point:function(t,n){var e=_([t,n]);this.stream.point(e[0],e[1])}}),y=ul;function g(){return p=c*f,b=c*l,o=u=null,_}function _(e){var r=e[0]*p,i=e[1]*b;if(h){var o=i*t-r*n;r=r*t+i*n,i=o}return[r+a,i+s]}return _.invert=function(e){var r=e[0]-a,i=e[1]-s;if(h){var o=i*t+r*n;r=r*t-i*n,i=o}return[r/p,i/b]},_.stream=function(t){return o&&u===t?o:o=v(y(u=t))},_.postclip=function(t){return arguments.length?(y=t,d=e=r=i=null,g()):y},_.clipExtent=function(t){return arguments.length?(y=null==t?(d=e=r=i=null,ul):Cf(d=+t[0][0],e=+t[0][1],r=+t[1][0],i=+t[1][1]),g()):null==d?null:[[d,e],[r,i]]},_.scale=function(t){return arguments.length?(c=+t,g()):c},_.translate=function(t){return arguments.length?(a=+t[0],s=+t[1],g()):[a,s]},_.angle=function(e){return arguments.length?(n=Na(h=e%360*ya),t=xa(h),g()):h*va},_.reflectX=function(t){return arguments.length?(f=t?-1:1,g()):f<0},_.reflectY=function(t){return arguments.length?(l=t?-1:1,g()):l<0},_.fitExtent=function(t,n){return ah(_,t,n)},_.fitSize=function(t,n){return sh(_,t,n)},_.fitWidth=function(t,n){return fh(_,t,n)},_.fitHeight=function(t,n){return lh(_,t,n)},_};function Zh(t,n){var e=n*n,r=e*e;return[t*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),n*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}Zh.invert=function(t,n){var e,r=n,i=25;do{var o=r*r,u=o*o;r-=e=(r*(1.007226+o*(.015085+u*(.028874*o-.044475-.005916*u)))-n)/(1.007226+o*(.045255+u*(.259866*o-.311325-.005916*11*u)))}while(ga(e)>1e-6&&--i>0);return[t/(.8707+(o=r*r)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),r]};var Qh=function(){return yh(Zh).scale(175.295)};function $h(t,n){return[xa(n)*Na(t),Na(n)]}$h.invert=Th(Oa);var Jh=function(){return yh($h).scale(249.5).clipAngle(90.000001)};function td(t,n){var e=xa(n),r=1+xa(t)*e;return[e*Na(t)/r,Na(n)/r]}td.invert=Th((function(t){return 2*_a(t)}));var nd=function(){return yh(td).scale(250).clipAngle(142)};function ed(t,n){return[Sa(Aa((da+n)/2)),-t]}ed.invert=function(t,n){return[-n,2*_a(Ma(t))-da]};var rd=function(){var t=jh(ed),n=t.center,e=t.rotate;return t.center=function(t){return arguments.length?n([-t[1],t[0]]):[(t=n())[1],-t[0]]},t.rotate=function(t){return arguments.length?e([t[0],t[1],t.length>2?t[2]+90:90]):[(t=e())[0],t[1],t[2]-90]},e([0,0,90]).scale(159.155)};function id(t,n){return t.parent===n.parent?1:2}function od(t,n){return t+n.x}function ud(t,n){return Math.max(t,n.y)}var cd=function(){var t=id,n=1,e=1,r=!1;function i(i){var o,u=0;i.eachAfter((function(n){var e=n.children;e?(n.x=function(t){return t.reduce(od,0)/t.length}(e),n.y=function(t){return 1+t.reduce(ud,0)}(e)):(n.x=o?u+=t(n,o):0,n.y=0,o=n)}));var c=function(t){for(var n;n=t.children;)t=n[0];return t}(i),a=function(t){for(var n;n=t.children;)t=n[n.length-1];return t}(i),s=c.x-t(c,a)/2,f=a.x+t(a,c)/2;return i.eachAfter(r?function(t){t.x=(t.x-i.x)*n,t.y=(i.y-t.y)*e}:function(t){t.x=(t.x-s)/(f-s)*n,t.y=(1-(i.y?t.y/i.y:1))*e})}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i};function ad(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function sd(t,n){var e,r,i,o,u,c=new dd(t),a=+t.value&&(c.value=t.value),s=[c];for(null==n&&(n=fd);e=s.pop();)if(a&&(e.value=+e.data.value),(i=n(e.data))&&(u=i.length))for(e.children=new Array(u),o=u-1;o>=0;--o)s.push(r=e.children[o]=new dd(i[o])),r.parent=e,r.depth=e.depth+1;return c.eachBefore(hd)}function fd(t){return t.children}function ld(t){t.data=t.data.data}function hd(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function dd(t){this.data=t,this.depth=this.height=0,this.parent=null}dd.prototype=sd.prototype={constructor:dd,count:function(){return this.eachAfter(ad)},each:function(t){var n,e,r,i,o=this,u=[o];do{for(n=u.reverse(),u=[];o=n.pop();)if(t(o),e=o.children)for(r=0,i=e.length;r<i;++r)u.push(e[r])}while(u.length);return this},eachAfter:function(t){for(var n,e,r,i=this,o=[i],u=[];i=o.pop();)if(u.push(i),n=i.children)for(e=0,r=n.length;e<r;++e)o.push(n[e]);for(;i=u.pop();)t(i);return this},eachBefore:function(t){for(var n,e,r=this,i=[r];r=i.pop();)if(t(r),n=r.children)for(e=n.length-1;e>=0;--e)i.push(n[e]);return this},sum:function(t){return this.eachAfter((function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e}))},sort:function(t){return this.eachBefore((function(n){n.children&&n.children.sort(t)}))},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;t=e.pop(),n=r.pop();for(;t===n;)i=t,t=e.pop(),n=r.pop();return i}(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){var t=[];return this.each((function(n){t.push(n)})),t},leaves:function(){var t=[];return this.eachBefore((function(n){n.children||t.push(n)})),t},links:function(){var t=this,n=[];return t.each((function(e){e!==t&&n.push({source:e.parent,target:e})})),n},copy:function(){return sd(this).eachBefore(ld)}};var pd=Array.prototype.slice;var bd=function(t){for(var n,e,r=0,i=(t=function(t){for(var n,e,r=t.length;r;)e=Math.random()*r--|0,n=t[r],t[r]=t[e],t[e]=n;return t}(pd.call(t))).length,o=[];r<i;)n=t[r],e&&gd(e,n)?++r:(e=md(o=vd(o,n)),r=0);return e};function vd(t,n){var e,r;if(_d(n,t))return[n];for(e=0;e<t.length;++e)if(yd(n,t[e])&&_d(xd(t[e],n),t))return[t[e],n];for(e=0;e<t.length-1;++e)for(r=e+1;r<t.length;++r)if(yd(xd(t[e],t[r]),n)&&yd(xd(t[e],n),t[r])&&yd(xd(t[r],n),t[e])&&_d(wd(t[e],t[r],n),t))return[t[e],t[r],n];throw new Error}function yd(t,n){var e=t.r-n.r,r=n.x-t.x,i=n.y-t.y;return e<0||e*e<r*r+i*i}function gd(t,n){var e=t.r-n.r+1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function _d(t,n){for(var e=0;e<n.length;++e)if(!gd(t,n[e]))return!1;return!0}function md(t){switch(t.length){case 1:return{x:(n=t[0]).x,y:n.y,r:n.r};case 2:return xd(t[0],t[1]);case 3:return wd(t[0],t[1],t[2])}var n}function xd(t,n){var e=t.x,r=t.y,i=t.r,o=n.x,u=n.y,c=n.r,a=o-e,s=u-r,f=c-i,l=Math.sqrt(a*a+s*s);return{x:(e+o+a/l*f)/2,y:(r+u+s/l*f)/2,r:(l+i+c)/2}}function wd(t,n,e){var r=t.x,i=t.y,o=t.r,u=n.x,c=n.y,a=n.r,s=e.x,f=e.y,l=e.r,h=r-u,d=r-s,p=i-c,b=i-f,v=a-o,y=l-o,g=r*r+i*i-o*o,_=g-u*u-c*c+a*a,m=g-s*s-f*f+l*l,x=d*p-h*b,w=(p*m-b*_)/(2*x)-r,M=(b*v-p*y)/x,S=(d*_-h*m)/(2*x)-i,T=(h*y-d*v)/x,N=M*M+T*T-1,E=2*(o+w*M+S*T),C=w*w+S*S-o*o,A=-(N?(E+Math.sqrt(E*E-4*N*C))/(2*N):C/E);return{x:r+w+M*A,y:i+S+T*A,r:A}}function Md(t,n,e){var r,i,o,u,c=t.x-n.x,a=t.y-n.y,s=c*c+a*a;s?(i=n.r+e.r,i*=i,u=t.r+e.r,i>(u*=u)?(r=(s+u-i)/(2*s),o=Math.sqrt(Math.max(0,u/s-r*r)),e.x=t.x-r*c-o*a,e.y=t.y-r*a+o*c):(r=(s+i-u)/(2*s),o=Math.sqrt(Math.max(0,i/s-r*r)),e.x=n.x+r*c-o*a,e.y=n.y+r*a+o*c)):(e.x=n.x+e.r,e.y=n.y)}function Sd(t,n){var e=t.r+n.r-1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function Td(t){var n=t._,e=t.next._,r=n.r+e.r,i=(n.x*e.r+e.x*n.r)/r,o=(n.y*e.r+e.y*n.r)/r;return i*i+o*o}function Nd(t){this._=t,this.next=null,this.previous=null}function Ed(t){if(!(i=t.length))return 0;var n,e,r,i,o,u,c,a,s,f,l;if((n=t[0]).x=0,n.y=0,!(i>1))return n.r;if(e=t[1],n.x=-e.r,e.x=n.r,e.y=0,!(i>2))return n.r+e.r;Md(e,n,r=t[2]),n=new Nd(n),e=new Nd(e),r=new Nd(r),n.next=r.previous=e,e.next=n.previous=r,r.next=e.previous=n;t:for(c=3;c<i;++c){Md(n._,e._,r=t[c]),r=new Nd(r),a=e.next,s=n.previous,f=e._.r,l=n._.r;do{if(f<=l){if(Sd(a._,r._)){e=a,n.next=e,e.previous=n,--c;continue t}f+=a._.r,a=a.next}else{if(Sd(s._,r._)){(n=s).next=e,e.previous=n,--c;continue t}l+=s._.r,s=s.previous}}while(a!==s.next);for(r.previous=n,r.next=e,n.next=e.previous=e=r,o=Td(n);(r=r.next)!==e;)(u=Td(r))<o&&(n=r,o=u);e=n.next}for(n=[e._],r=e;(r=r.next)!==e;)n.push(r._);for(r=bd(n),c=0;c<i;++c)(n=t[c]).x-=r.x,n.y-=r.y;return r.r}var Cd=function(t){return Ed(t),t};function Ad(t){return null==t?null:kd(t)}function kd(t){if("function"!=typeof t)throw new Error;return t}function Od(){return 0}var jd=function(t){return function(){return t}};function Id(t){return Math.sqrt(t.value)}var Pd=function(){var t=null,n=1,e=1,r=Od;function i(i){return i.x=n/2,i.y=e/2,t?i.eachBefore(Fd(t)).eachAfter(zd(r,.5)).eachBefore(Dd(1)):i.eachBefore(Fd(Id)).eachAfter(zd(Od,1)).eachAfter(zd(r,i.r/Math.min(n,e))).eachBefore(Dd(Math.min(n,e)/(2*i.r))),i}return i.radius=function(n){return arguments.length?(t=Ad(n),i):t},i.size=function(t){return arguments.length?(n=+t[0],e=+t[1],i):[n,e]},i.padding=function(t){return arguments.length?(r="function"==typeof t?t:jd(+t),i):r},i};function Fd(t){return function(n){n.children||(n.r=Math.max(0,+t(n)||0))}}function zd(t,n){return function(e){if(r=e.children){var r,i,o,u=r.length,c=t(e)*n||0;if(c)for(i=0;i<u;++i)r[i].r+=c;if(o=Ed(r),c)for(i=0;i<u;++i)r[i].r-=c;e.r=o+c}}}function Dd(t){return function(n){var e=n.parent;n.r*=t,e&&(n.x=e.x+t*n.x,n.y=e.y+t*n.y)}}var Vd=function(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)},Rd=function(t,n,e,r,i){for(var o,u=t.children,c=-1,a=u.length,s=t.value&&(r-n)/t.value;++c<a;)(o=u[c]).y0=e,o.y1=i,o.x0=n,o.x1=n+=o.value*s},Bd=function(){var t=1,n=1,e=0,r=!1;function i(i){var o=i.height+1;return i.x0=i.y0=e,i.x1=t,i.y1=n/o,i.eachBefore(function(t,n){return function(r){r.children&&Rd(r,r.x0,t*(r.depth+1)/n,r.x1,t*(r.depth+2)/n);var i=r.x0,o=r.y0,u=r.x1-e,c=r.y1-e;u<i&&(i=u=(i+u)/2),c<o&&(o=c=(o+c)/2),r.x0=i,r.y0=o,r.x1=u,r.y1=c}}(n,o)),r&&i.eachBefore(Vd),i}return i.round=function(t){return arguments.length?(r=!!t,i):r},i.size=function(e){return arguments.length?(t=+e[0],n=+e[1],i):[t,n]},i.padding=function(t){return arguments.length?(e=+t,i):e},i},Ud={depth:-1},qd={};function Ld(t){return t.id}function Yd(t){return t.parentId}var Gd=function(){var t=Ld,n=Yd;function e(e){var r,i,o,u,c,a,s,f=e.length,l=new Array(f),h={};for(i=0;i<f;++i)r=e[i],c=l[i]=new dd(r),null!=(a=t(r,i,e))&&(a+="")&&(h[s="$"+(c.id=a)]=s in h?qd:c);for(i=0;i<f;++i)if(c=l[i],null!=(a=n(e[i],i,e))&&(a+="")){if(!(u=h["$"+a]))throw new Error("missing: "+a);if(u===qd)throw new Error("ambiguous: "+a);u.children?u.children.push(c):u.children=[c],c.parent=u}else{if(o)throw new Error("multiple roots");o=c}if(!o)throw new Error("no root");if(o.parent=Ud,o.eachBefore((function(t){t.depth=t.parent.depth+1,--f})).eachBefore(hd),o.parent=null,f>0)throw new Error("cycle");return o}return e.id=function(n){return arguments.length?(t=kd(n),e):t},e.parentId=function(t){return arguments.length?(n=kd(t),e):n},e};function Wd(t,n){return t.parent===n.parent?1:2}function Hd(t){var n=t.children;return n?n[0]:t.t}function Xd(t){var n=t.children;return n?n[n.length-1]:t.t}function Kd(t,n,e){var r=e/(n.i-t.i);n.c-=r,n.s+=e,t.c+=r,n.z+=e,n.m+=e}function Zd(t,n,e){return t.a.parent===n.parent?t.a:e}function Qd(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}Qd.prototype=Object.create(dd.prototype);var $d=function(){var t=Wd,n=1,e=1,r=null;function i(i){var a=function(t){for(var n,e,r,i,o,u=new Qd(t,0),c=[u];n=c.pop();)if(r=n._.children)for(n.children=new Array(o=r.length),i=o-1;i>=0;--i)c.push(e=n.children[i]=new Qd(r[i],i)),e.parent=n;return(u.parent=new Qd(null,0)).children=[u],u}(i);if(a.eachAfter(o),a.parent.m=-a.z,a.eachBefore(u),r)i.eachBefore(c);else{var s=i,f=i,l=i;i.eachBefore((function(t){t.x<s.x&&(s=t),t.x>f.x&&(f=t),t.depth>l.depth&&(l=t)}));var h=s===f?1:t(s,f)/2,d=h-s.x,p=n/(f.x+h+d),b=e/(l.depth||1);i.eachBefore((function(t){t.x=(t.x+d)*p,t.y=t.depth*b}))}return i}function o(n){var e=n.children,r=n.parent.children,i=n.i?r[n.i-1]:null;if(e){!function(t){for(var n,e=0,r=0,i=t.children,o=i.length;--o>=0;)(n=i[o]).z+=e,n.m+=e,e+=n.s+(r+=n.c)}(n);var o=(e[0].z+e[e.length-1].z)/2;i?(n.z=i.z+t(n._,i._),n.m=n.z-o):n.z=o}else i&&(n.z=i.z+t(n._,i._));n.parent.A=function(n,e,r){if(e){for(var i,o=n,u=n,c=e,a=o.parent.children[0],s=o.m,f=u.m,l=c.m,h=a.m;c=Xd(c),o=Hd(o),c&&o;)a=Hd(a),(u=Xd(u)).a=n,(i=c.z+l-o.z-s+t(c._,o._))>0&&(Kd(Zd(c,n,r),n,i),s+=i,f+=i),l+=c.m,s+=o.m,h+=a.m,f+=u.m;c&&!Xd(u)&&(u.t=c,u.m+=l-f),o&&!Hd(a)&&(a.t=o,a.m+=s-h,r=n)}return r}(n,i,n.parent.A||r[0])}function u(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function c(t){t.x*=n,t.y=t.depth*e}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i},Jd=function(t,n,e,r,i){for(var o,u=t.children,c=-1,a=u.length,s=t.value&&(i-e)/t.value;++c<a;)(o=u[c]).x0=n,o.x1=r,o.y0=e,o.y1=e+=o.value*s},tp=(1+Math.sqrt(5))/2;function np(t,n,e,r,i,o){for(var u,c,a,s,f,l,h,d,p,b,v,y=[],g=n.children,_=0,m=0,x=g.length,w=n.value;_<x;){a=i-e,s=o-r;do{f=g[m++].value}while(!f&&m<x);for(l=h=f,v=f*f*(b=Math.max(s/a,a/s)/(w*t)),p=Math.max(h/v,v/l);m<x;++m){if(f+=c=g[m].value,c<l&&(l=c),c>h&&(h=c),v=f*f*b,(d=Math.max(h/v,v/l))>p){f-=c;break}p=d}y.push(u={value:f,dice:a<s,children:g.slice(_,m)}),u.dice?Rd(u,e,r,i,w?r+=s*f/w:o):Jd(u,e,r,w?e+=a*f/w:i,o),w-=f,_=m}return y}var ep=function t(n){function e(t,e,r,i,o){np(n,t,e,r,i,o)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(tp),rp=function(){var t=ep,n=!1,e=1,r=1,i=[0],o=Od,u=Od,c=Od,a=Od,s=Od;function f(t){return t.x0=t.y0=0,t.x1=e,t.y1=r,t.eachBefore(l),i=[0],n&&t.eachBefore(Vd),t}function l(n){var e=i[n.depth],r=n.x0+e,f=n.y0+e,l=n.x1-e,h=n.y1-e;l<r&&(r=l=(r+l)/2),h<f&&(f=h=(f+h)/2),n.x0=r,n.y0=f,n.x1=l,n.y1=h,n.children&&(e=i[n.depth+1]=o(n)/2,r+=s(n)-e,f+=u(n)-e,(l-=c(n)-e)<r&&(r=l=(r+l)/2),(h-=a(n)-e)<f&&(f=h=(f+h)/2),t(n,r,f,l,h))}return f.round=function(t){return arguments.length?(n=!!t,f):n},f.size=function(t){return arguments.length?(e=+t[0],r=+t[1],f):[e,r]},f.tile=function(n){return arguments.length?(t=kd(n),f):t},f.padding=function(t){return arguments.length?f.paddingInner(t).paddingOuter(t):f.paddingInner()},f.paddingInner=function(t){return arguments.length?(o="function"==typeof t?t:jd(+t),f):o},f.paddingOuter=function(t){return arguments.length?f.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):f.paddingTop()},f.paddingTop=function(t){return arguments.length?(u="function"==typeof t?t:jd(+t),f):u},f.paddingRight=function(t){return arguments.length?(c="function"==typeof t?t:jd(+t),f):c},f.paddingBottom=function(t){return arguments.length?(a="function"==typeof t?t:jd(+t),f):a},f.paddingLeft=function(t){return arguments.length?(s="function"==typeof t?t:jd(+t),f):s},f},ip=function(t,n,e,r,i){var o,u,c=t.children,a=c.length,s=new Array(a+1);for(s[0]=u=o=0;o<a;++o)s[o+1]=u+=c[o].value;!function t(n,e,r,i,o,u,a){if(n>=e-1){var f=c[n];return f.x0=i,f.y0=o,f.x1=u,void(f.y1=a)}var l=s[n],h=r/2+l,d=n+1,p=e-1;for(;d<p;){var b=d+p>>>1;s[b]<h?d=b+1:p=b}h-s[d-1]<s[d]-h&&n+1<d&&--d;var v=s[d]-l,y=r-v;if(u-i>a-o){var g=(i*y+u*v)/r;t(n,d,v,i,o,g,a),t(d,e,y,g,o,u,a)}else{var _=(o*y+a*v)/r;t(n,d,v,i,o,u,_),t(d,e,y,i,_,u,a)}}(0,a,t.value,n,e,r,i)},op=function(t,n,e,r,i){(1&t.depth?Jd:Rd)(t,n,e,r,i)},up=function t(n){function e(t,e,r,i,o){if((u=t._squarify)&&u.ratio===n)for(var u,c,a,s,f,l=-1,h=u.length,d=t.value;++l<h;){for(a=(c=u[l]).children,s=c.value=0,f=a.length;s<f;++s)c.value+=a[s].value;c.dice?Rd(c,e,r,i,r+=(o-r)*c.value/d):Jd(c,e,r,e+=(i-e)*c.value/d,o),d-=c.value}else t._squarify=u=np(n,t,e,r,i,o),u.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(tp),cp=function(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}},ap=function(t,n){var e=fe(+t,+n);return function(t){var n=e(t);return n-360*Math.floor(n/360)}},sp=function(t,n){return t=+t,n=+n,function(e){return Math.round(t*(1-e)+n*e)}},fp=Math.SQRT2;function lp(t){return((t=Math.exp(t))+1/t)/2}var hp=function(t,n){var e,r,i=t[0],o=t[1],u=t[2],c=n[0],a=n[1],s=n[2],f=c-i,l=a-o,h=f*f+l*l;if(h<1e-12)r=Math.log(s/u)/fp,e=function(t){return[i+t*f,o+t*l,u*Math.exp(fp*t*r)]};else{var d=Math.sqrt(h),p=(s*s-u*u+4*h)/(2*u*2*d),b=(s*s-u*u-4*h)/(2*s*2*d),v=Math.log(Math.sqrt(p*p+1)-p),y=Math.log(Math.sqrt(b*b+1)-b);r=(y-v)/fp,e=function(t){var n,e=t*r,c=lp(v),a=u/(2*d)*(c*(n=fp*e+v,((n=Math.exp(2*n))-1)/(n+1))-function(t){return((t=Math.exp(t))-1/t)/2}(v));return[i+a*f,o+a*l,u*c/lp(fp*e+v)]}}return e.duration=1e3*r,e};function dp(t){return function(n,e){var r=t((n=ee(n)).h,(e=ee(e)).h),i=he(n.s,e.s),o=he(n.l,e.l),u=he(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=o(t),n.opacity=u(t),n+""}}}var pp=dp(fe),bp=dp(he);function vp(t,n){var e=he((t=vo(t)).l,(n=vo(n)).l),r=he(t.a,n.a),i=he(t.b,n.b),o=he(t.opacity,n.opacity);return function(n){return t.l=e(n),t.a=r(n),t.b=i(n),t.opacity=o(n),t+""}}function yp(t){return function(n,e){var r=t((n=So(n)).h,(e=So(e)).h),i=he(n.c,e.c),o=he(n.l,e.l),u=he(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=o(t),n.opacity=u(t),n+""}}}var gp=yp(fe),_p=yp(he);function mp(t){return function n(e){function r(n,r){var i=t((n=jo(n)).h,(r=jo(r)).h),o=he(n.s,r.s),u=he(n.l,r.l),c=he(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=o(t),n.l=u(Math.pow(t,e)),n.opacity=c(t),n+""}}return e=+e,r.gamma=n,r}(1)}var xp=mp(fe),wp=mp(he);function Mp(t,n){for(var e=0,r=n.length-1,i=n[0],o=new Array(r<0?0:r);e<r;)o[e]=t(i,i=n[++e]);return function(t){var n=Math.max(0,Math.min(r-1,Math.floor(t*=r)));return o[n](t-n)}}var Sp=function(t,n){for(var e=new Array(n),r=0;r<n;++r)e[r]=t(r/(n-1));return e},Tp=function(t){for(var n,e=-1,r=t.length,i=t[r-1],o=0;++e<r;)n=i,i=t[e],o+=n[1]*i[0]-n[0]*i[1];return o/2},Np=function(t){for(var n,e,r=-1,i=t.length,o=0,u=0,c=t[i-1],a=0;++r<i;)n=c,c=t[r],a+=e=n[0]*c[1]-c[0]*n[1],o+=(n[0]+c[0])*e,u+=(n[1]+c[1])*e;return[o/(a*=3),u/a]};function Ep(t,n){return t[0]-n[0]||t[1]-n[1]}function Cp(t){for(var n,e,r,i=t.length,o=[0,1],u=2,c=2;c<i;++c){for(;u>1&&(n=t[o[u-2]],e=t[o[u-1]],r=t[c],(e[0]-n[0])*(r[1]-n[1])-(e[1]-n[1])*(r[0]-n[0])<=0);)--u;o[u++]=c}return o.slice(0,u)}var Ap=function(t){if((e=t.length)<3)return null;var n,e,r=new Array(e),i=new Array(e);for(n=0;n<e;++n)r[n]=[+t[n][0],+t[n][1],n];for(r.sort(Ep),n=0;n<e;++n)i[n]=[r[n][0],-r[n][1]];var o=Cp(r),u=Cp(i),c=u[0]===o[0],a=u[u.length-1]===o[o.length-1],s=[];for(n=o.length-1;n>=0;--n)s.push(t[r[o[n]][2]]);for(n=+c;n<u.length-a;++n)s.push(t[r[u[n]][2]]);return s},kp=function(t,n){for(var e,r,i=t.length,o=t[i-1],u=n[0],c=n[1],a=o[0],s=o[1],f=!1,l=0;l<i;++l)e=(o=t[l])[0],(r=o[1])>c!=s>c&&u<(a-e)*(c-r)/(s-r)+e&&(f=!f),a=e,s=r;return f},Op=function(t){for(var n,e,r=-1,i=t.length,o=t[i-1],u=o[0],c=o[1],a=0;++r<i;)n=u,e=c,n-=u=(o=t[r])[0],e-=c=o[1],a+=Math.sqrt(n*n+e*e);return a},jp=function(){return Math.random()},Ip=function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(jp),Pp=function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(jp),Fp=function t(n){function e(){var t=Pp.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(jp),zp=function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(jp),Dp=function t(n){function e(t){var e=zp.source(n)(t);return function(){return e()/t}}return e.source=t,e}(jp),Vp=function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(jp);function Rp(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}function Bp(t,n){switch(arguments.length){case 0:break;case 1:this.interpolator(t);break;default:this.interpolator(n).domain(t)}return this}var Up=Array.prototype,qp=Up.map,Lp=Up.slice,Yp={name:"implicit"};function Gp(){var t=$i(),n=[],e=[],r=Yp;function i(i){var o=i+"",u=t.get(o);if(!u){if(r!==Yp)return r;t.set(o,u=n.push(i))}return e[(u-1)%e.length]}return i.domain=function(e){if(!arguments.length)return n.slice();n=[],t=$i();for(var r,o,u=-1,c=e.length;++u<c;)t.has(o=(r=e[u])+"")||t.set(o,n.push(r));return i},i.range=function(t){return arguments.length?(e=Lp.call(t),i):e.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return Gp(n,e).unknown(r)},Rp.apply(i,arguments),i}function Wp(){var t,n,e=Gp().unknown(void 0),r=e.domain,i=e.range,o=[0,1],u=!1,c=0,a=0,s=.5;function f(){var e=r().length,f=o[1]<o[0],l=o[f-0],h=o[1-f];t=(h-l)/Math.max(1,e-c+2*a),u&&(t=Math.floor(t)),l+=(h-l-t*(e-c))*s,n=t*(1-c),u&&(l=Math.round(l),n=Math.round(n));var d=M(e).map((function(n){return l+t*n}));return i(f?d.reverse():d)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),f()):r()},e.range=function(t){return arguments.length?(o=[+t[0],+t[1]],f()):o.slice()},e.rangeRound=function(t){return o=[+t[0],+t[1]],u=!0,f()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(u=!!t,f()):u},e.padding=function(t){return arguments.length?(c=Math.min(1,a=+t),f()):c},e.paddingInner=function(t){return arguments.length?(c=Math.min(1,t),f()):c},e.paddingOuter=function(t){return arguments.length?(a=+t,f()):a},e.align=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),f()):s},e.copy=function(){return Wp(r(),o).round(u).paddingInner(c).paddingOuter(a).align(s)},Rp.apply(f(),arguments)}function Hp(t){var n=t.copy;return t.padding=t.paddingOuter,delete t.paddingInner,delete t.paddingOuter,t.copy=function(){return Hp(n())},t}function Xp(){return Hp(Wp.apply(null,arguments).paddingInner(1))}var Kp=function(t){return+t},Zp=[0,1];function Qp(t){return t}function $p(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:(e=isNaN(n)?NaN:.5,function(){return e});var e}function Jp(t){var n,e=t[0],r=t[t.length-1];return e>r&&(n=e,e=r,r=n),function(t){return Math.max(e,Math.min(r,t))}}function tb(t,n,e){var r=t[0],i=t[1],o=n[0],u=n[1];return i<r?(r=$p(i,r),o=e(u,o)):(r=$p(r,i),o=e(o,u)),function(t){return o(r(t))}}function nb(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),o=new Array(r),u=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++u<r;)i[u]=$p(t[u],t[u+1]),o[u]=e(n[u],n[u+1]);return function(n){var e=s(t,n,1,r)-1;return o[e](i[e](n))}}function eb(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function rb(){var t,n,e,r,i,o,u=Zp,c=Zp,a=Ae,s=Qp;function f(){return r=Math.min(u.length,c.length)>2?nb:tb,i=o=null,l}function l(n){return isNaN(n=+n)?e:(i||(i=r(u.map(t),c,a)))(t(s(n)))}return l.invert=function(e){return s(n((o||(o=r(c,u.map(t),we)))(e)))},l.domain=function(t){return arguments.length?(u=qp.call(t,Kp),s===Qp||(s=Jp(u)),f()):u.slice()},l.range=function(t){return arguments.length?(c=Lp.call(t),f()):c.slice()},l.rangeRound=function(t){return c=Lp.call(t),a=sp,f()},l.clamp=function(t){return arguments.length?(s=t?Jp(u):Qp,l):s!==Qp},l.interpolate=function(t){return arguments.length?(a=t,f()):a},l.unknown=function(t){return arguments.length?(e=t,l):e},function(e,r){return t=e,n=r,f()}}function ib(t,n){return rb()(t,n)}var ob=function(t,n,e,r){var i,o=A(t,n,e);switch((r=Wc(null==r?",f":r)).type){case"s":var u=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=ua(o,u))||(r.precision=i),Qc(r,u);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=ca(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=oa(o))||(r.precision=i-2*("%"===r.type))}return Zc(r)};function ub(t){var n=t.domain;return t.ticks=function(t){var e=n();return E(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return ob(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,u=i.length-1,c=i[o],a=i[u];return a<c&&(r=c,c=a,a=r,r=o,o=u,u=r),(r=C(c,a,e))>0?r=C(c=Math.floor(c/r)*r,a=Math.ceil(a/r)*r,e):r<0&&(r=C(c=Math.ceil(c*r)/r,a=Math.floor(a*r)/r,e)),r>0?(i[o]=Math.floor(c/r)*r,i[u]=Math.ceil(a/r)*r,n(i)):r<0&&(i[o]=Math.ceil(c*r)/r,i[u]=Math.floor(a*r)/r,n(i)),t},t}function cb(){var t=ib(Qp,Qp);return t.copy=function(){return eb(t,cb())},Rp.apply(t,arguments),ub(t)}function ab(t){var n;function e(t){return isNaN(t=+t)?n:t}return e.invert=e,e.domain=e.range=function(n){return arguments.length?(t=qp.call(n,Kp),e):t.slice()},e.unknown=function(t){return arguments.length?(n=t,e):n},e.copy=function(){return ab(t).unknown(n)},t=arguments.length?qp.call(t,Kp):[0,1],ub(e)}var sb=function(t,n){var e,r=0,i=(t=t.slice()).length-1,o=t[r],u=t[i];return u<o&&(e=r,r=i,i=e,e=o,o=u,u=e),t[r]=n.floor(o),t[i]=n.ceil(u),t};function fb(t){return Math.log(t)}function lb(t){return Math.exp(t)}function hb(t){return-Math.log(-t)}function db(t){return-Math.exp(-t)}function pb(t){return isFinite(t)?+("1e"+t):t<0?0:t}function bb(t){return function(n){return-t(-n)}}function vb(t){var n,e,r=t(fb,lb),i=r.domain,o=10;function u(){return n=function(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(n){return Math.log(n)/t})}(o),e=function(t){return 10===t?pb:t===Math.E?Math.exp:function(n){return Math.pow(t,n)}}(o),i()[0]<0?(n=bb(n),e=bb(e),t(hb,db)):t(fb,lb),r}return r.base=function(t){return arguments.length?(o=+t,u()):o},r.domain=function(t){return arguments.length?(i(t),u()):i()},r.ticks=function(t){var r,u=i(),c=u[0],a=u[u.length-1];(r=a<c)&&(h=c,c=a,a=h);var s,f,l,h=n(c),d=n(a),p=null==t?10:+t,b=[];if(!(o%1)&&d-h<p){if(h=Math.round(h)-1,d=Math.round(d)+1,c>0){for(;h<d;++h)for(f=1,s=e(h);f<o;++f)if(!((l=s*f)<c)){if(l>a)break;b.push(l)}}else for(;h<d;++h)for(f=o-1,s=e(h);f>=1;--f)if(!((l=s*f)<c)){if(l>a)break;b.push(l)}}else b=E(h,d,Math.min(d-h,p)).map(e);return r?b.reverse():b},r.tickFormat=function(t,i){if(null==i&&(i=10===o?".0e":","),"function"!=typeof i&&(i=Zc(i)),t===1/0)return i;null==t&&(t=10);var u=Math.max(1,o*t/r.ticks().length);return function(t){var r=t/e(Math.round(n(t)));return r*o<o-.5&&(r*=o),r<=u?i(t):""}},r.nice=function(){return i(sb(i(),{floor:function(t){return e(Math.floor(n(t)))},ceil:function(t){return e(Math.ceil(n(t)))}}))},r}function yb(){var t=vb(rb()).domain([1,10]);return t.copy=function(){return eb(t,yb()).base(t.base())},Rp.apply(t,arguments),t}function gb(t){return function(n){return Math.sign(n)*Math.log1p(Math.abs(n/t))}}function _b(t){return function(n){return Math.sign(n)*Math.expm1(Math.abs(n))*t}}function mb(t){var n=1,e=t(gb(n),_b(n));return e.constant=function(e){return arguments.length?t(gb(n=+e),_b(n)):n},ub(e)}function xb(){var t=mb(rb());return t.copy=function(){return eb(t,xb()).constant(t.constant())},Rp.apply(t,arguments)}function wb(t){return function(n){return n<0?-Math.pow(-n,t):Math.pow(n,t)}}function Mb(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function Sb(t){return t<0?-t*t:t*t}function Tb(t){var n=t(Qp,Qp),e=1;function r(){return 1===e?t(Qp,Qp):.5===e?t(Mb,Sb):t(wb(e),wb(1/e))}return n.exponent=function(t){return arguments.length?(e=+t,r()):e},ub(n)}function Nb(){var t=Tb(rb());return t.copy=function(){return eb(t,Nb()).exponent(t.exponent())},Rp.apply(t,arguments),t}function Eb(){return Nb.apply(null,arguments).exponent(.5)}function Cb(){var t,n=[],e=[],r=[];function o(){var t=0,i=Math.max(1,e.length);for(r=new Array(i-1);++t<i;)r[t-1]=j(n,t/i);return u}function u(n){return isNaN(n=+n)?t:e[s(r,n)]}return u.invertExtent=function(t){var i=e.indexOf(t);return i<0?[NaN,NaN]:[i>0?r[i-1]:n[0],i<r.length?r[i]:n[n.length-1]]},u.domain=function(t){if(!arguments.length)return n.slice();n=[];for(var e,r=0,u=t.length;r<u;++r)null==(e=t[r])||isNaN(e=+e)||n.push(e);return n.sort(i),o()},u.range=function(t){return arguments.length?(e=Lp.call(t),o()):e.slice()},u.unknown=function(n){return arguments.length?(t=n,u):t},u.quantiles=function(){return r.slice()},u.copy=function(){return Cb().domain(n).range(e).unknown(t)},Rp.apply(u,arguments)}function Ab(){var t,n=0,e=1,r=1,i=[.5],o=[0,1];function u(n){return n<=n?o[s(i,n,0,r)]:t}function c(){var t=-1;for(i=new Array(r);++t<r;)i[t]=((t+1)*e-(t-r)*n)/(r+1);return u}return u.domain=function(t){return arguments.length?(n=+t[0],e=+t[1],c()):[n,e]},u.range=function(t){return arguments.length?(r=(o=Lp.call(t)).length-1,c()):o.slice()},u.invertExtent=function(t){var u=o.indexOf(t);return u<0?[NaN,NaN]:u<1?[n,i[0]]:u>=r?[i[r-1],e]:[i[u-1],i[u]]},u.unknown=function(n){return arguments.length?(t=n,u):u},u.thresholds=function(){return i.slice()},u.copy=function(){return Ab().domain([n,e]).range(o).unknown(t)},Rp.apply(ub(u),arguments)}function kb(){var t,n=[.5],e=[0,1],r=1;function i(i){return i<=i?e[s(n,i,0,r)]:t}return i.domain=function(t){return arguments.length?(n=Lp.call(t),r=Math.min(n.length,e.length-1),i):n.slice()},i.range=function(t){return arguments.length?(e=Lp.call(t),r=Math.min(n.length,e.length-1),i):e.slice()},i.invertExtent=function(t){var r=e.indexOf(t);return[n[r-1],n[r]]},i.unknown=function(n){return arguments.length?(t=n,i):t},i.copy=function(){return kb().domain(n).range(e).unknown(t)},Rp.apply(i,arguments)}var Ob=new Date,jb=new Date;function Ib(t,n,e,r){function i(n){return t(n=0===arguments.length?new Date:new Date(+n)),n}return i.floor=function(n){return t(n=new Date(+n)),n},i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var u,c=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return c;do{c.push(u=new Date(+e)),n(e,o),t(e)}while(u<e&&e<r);return c},i.filter=function(e){return Ib((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););}))},e&&(i.count=function(n,r){return Ob.setTime(+n),jb.setTime(+r),t(Ob),t(jb),Math.floor(e(Ob,jb))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var Pb=Ib((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));Pb.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ib((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};var Fb=Pb,zb=Pb.range,Db=Ib((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})),Vb=Db,Rb=Db.range;function Bb(t){return Ib((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var Ub=Bb(0),qb=Bb(1),Lb=Bb(2),Yb=Bb(3),Gb=Bb(4),Wb=Bb(5),Hb=Bb(6),Xb=Ub.range,Kb=qb.range,Zb=Lb.range,Qb=Yb.range,$b=Gb.range,Jb=Wb.range,tv=Hb.range,nv=Ib((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/864e5}),(function(t){return t.getDate()-1})),ev=nv,rv=nv.range,iv=Ib((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getHours()})),ov=iv,uv=iv.range,cv=Ib((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getMinutes()})),av=cv,sv=cv.range,fv=Ib((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,n){t.setTime(+t+1e3*n)}),(function(t,n){return(n-t)/1e3}),(function(t){return t.getUTCSeconds()})),lv=fv,hv=fv.range,dv=Ib((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t}));dv.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Ib((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):dv:null};var pv=dv,bv=dv.range;function vv(t){return Ib((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/6048e5}))}var yv=vv(0),gv=vv(1),_v=vv(2),mv=vv(3),xv=vv(4),wv=vv(5),Mv=vv(6),Sv=yv.range,Tv=gv.range,Nv=_v.range,Ev=mv.range,Cv=xv.range,Av=wv.range,kv=Mv.range,Ov=Ib((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/864e5}),(function(t){return t.getUTCDate()-1})),jv=Ov,Iv=Ov.range,Pv=Ib((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()}));Pv.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ib((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};var Fv=Pv,zv=Pv.range;function Dv(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Vv(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Rv(t,n,e){return{y:t,m:n,d:e,H:0,M:0,S:0,L:0}}function Bv(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,u=t.shortDays,c=t.months,a=t.shortMonths,s=$v(i),f=Jv(i),l=$v(o),h=Jv(o),d=$v(u),p=Jv(u),b=$v(c),v=Jv(c),y=$v(a),g=Jv(a),_={a:function(t){return u[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return a[t.getMonth()]},B:function(t){return c[t.getMonth()]},c:null,d:my,e:my,f:Ty,H:xy,I:wy,j:My,L:Sy,m:Ny,M:Ey,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:ng,s:eg,S:Cy,u:Ay,U:ky,V:Oy,w:jy,W:Iy,x:null,X:null,y:Py,Y:Fy,Z:zy,"%":tg},m={a:function(t){return u[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return a[t.getUTCMonth()]},B:function(t){return c[t.getUTCMonth()]},c:null,d:Dy,e:Dy,f:qy,H:Vy,I:Ry,j:By,L:Uy,m:Ly,M:Yy,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:ng,s:eg,S:Gy,u:Wy,U:Hy,V:Xy,w:Ky,W:Zy,x:null,X:null,y:Qy,Y:$y,Z:Jy,"%":tg},x={a:function(t,n,e){var r=d.exec(n.slice(e));return r?(t.w=p[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=l.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=y.exec(n.slice(e));return r?(t.m=g[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=b.exec(n.slice(e));return r?(t.m=v[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return S(t,n,e,r)},d:fy,e:fy,f:vy,H:hy,I:hy,j:ly,L:by,m:sy,M:dy,p:function(t,n,e){var r=s.exec(n.slice(e));return r?(t.p=f[r[0].toLowerCase()],e+r[0].length):-1},q:ay,Q:gy,s:_y,S:py,u:ny,U:ey,V:ry,w:ty,W:iy,x:function(t,n,r){return S(t,e,n,r)},X:function(t,n,e){return S(t,r,n,e)},y:uy,Y:oy,Z:cy,"%":yy};function w(t,n){return function(e){var r,i,o,u=[],c=-1,a=0,s=t.length;for(e instanceof Date||(e=new Date(+e));++c<s;)37===t.charCodeAt(c)&&(u.push(t.slice(a,c)),null!=(i=Wv[r=t.charAt(++c)])?r=t.charAt(++c):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),u.push(r),a=c+1);return u.push(t.slice(a,c)),u.join("")}}function M(t,n){return function(e){var r,i,o=Rv(1900,void 0,1);if(S(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(n&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=Vv(Rv(o.y,0,1))).getUTCDay(),r=i>4||0===i?gv.ceil(r):gv(r),r=jv.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=Dv(Rv(o.y,0,1))).getDay(),r=i>4||0===i?qb.ceil(r):qb(r),r=ev.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?Vv(Rv(o.y,0,1)).getUTCDay():Dv(Rv(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,Vv(o)):Dv(o)}}function S(t,n,e,r){for(var i,o,u=0,c=n.length,a=e.length;u<c;){if(r>=a)return-1;if(37===(i=n.charCodeAt(u++))){if(i=n.charAt(u++),!(o=x[i in Wv?n.charAt(u++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return _.x=w(e,_),_.X=w(r,_),_.c=w(n,_),m.x=w(e,m),m.X=w(r,m),m.c=w(n,m),{format:function(t){var n=w(t+="",_);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",!1);return n.toString=function(){return t},n},utcFormat:function(t){var n=w(t+="",m);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t+="",!0);return n.toString=function(){return t},n}}}var Uv,qv,Lv,Yv,Gv,Wv={"-":"",_:" ",0:"0"},Hv=/^\s*\d+/,Xv=/^%/,Kv=/[\\^$*+?|[\]().{}]/g;function Zv(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function Qv(t){return t.replace(Kv,"\\$&")}function $v(t){return new RegExp("^(?:"+t.map(Qv).join("|")+")","i")}function Jv(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function ty(t,n,e){var r=Hv.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function ny(t,n,e){var r=Hv.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function ey(t,n,e){var r=Hv.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function ry(t,n,e){var r=Hv.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function iy(t,n,e){var r=Hv.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function oy(t,n,e){var r=Hv.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function uy(t,n,e){var r=Hv.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function cy(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function ay(t,n,e){var r=Hv.exec(n.slice(e,e+1));return r?(t.q=3*r[0]-3,e+r[0].length):-1}function sy(t,n,e){var r=Hv.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function fy(t,n,e){var r=Hv.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function ly(t,n,e){var r=Hv.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function hy(t,n,e){var r=Hv.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function dy(t,n,e){var r=Hv.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function py(t,n,e){var r=Hv.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function by(t,n,e){var r=Hv.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function vy(t,n,e){var r=Hv.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function yy(t,n,e){var r=Xv.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function gy(t,n,e){var r=Hv.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function _y(t,n,e){var r=Hv.exec(n.slice(e));return r?(t.s=+r[0],e+r[0].length):-1}function my(t,n){return Zv(t.getDate(),n,2)}function xy(t,n){return Zv(t.getHours(),n,2)}function wy(t,n){return Zv(t.getHours()%12||12,n,2)}function My(t,n){return Zv(1+ev.count(Fb(t),t),n,3)}function Sy(t,n){return Zv(t.getMilliseconds(),n,3)}function Ty(t,n){return Sy(t,n)+"000"}function Ny(t,n){return Zv(t.getMonth()+1,n,2)}function Ey(t,n){return Zv(t.getMinutes(),n,2)}function Cy(t,n){return Zv(t.getSeconds(),n,2)}function Ay(t){var n=t.getDay();return 0===n?7:n}function ky(t,n){return Zv(Ub.count(Fb(t)-1,t),n,2)}function Oy(t,n){var e=t.getDay();return t=e>=4||0===e?Gb(t):Gb.ceil(t),Zv(Gb.count(Fb(t),t)+(4===Fb(t).getDay()),n,2)}function jy(t){return t.getDay()}function Iy(t,n){return Zv(qb.count(Fb(t)-1,t),n,2)}function Py(t,n){return Zv(t.getFullYear()%100,n,2)}function Fy(t,n){return Zv(t.getFullYear()%1e4,n,4)}function zy(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+Zv(n/60|0,"0",2)+Zv(n%60,"0",2)}function Dy(t,n){return Zv(t.getUTCDate(),n,2)}function Vy(t,n){return Zv(t.getUTCHours(),n,2)}function Ry(t,n){return Zv(t.getUTCHours()%12||12,n,2)}function By(t,n){return Zv(1+jv.count(Fv(t),t),n,3)}function Uy(t,n){return Zv(t.getUTCMilliseconds(),n,3)}function qy(t,n){return Uy(t,n)+"000"}function Ly(t,n){return Zv(t.getUTCMonth()+1,n,2)}function Yy(t,n){return Zv(t.getUTCMinutes(),n,2)}function Gy(t,n){return Zv(t.getUTCSeconds(),n,2)}function Wy(t){var n=t.getUTCDay();return 0===n?7:n}function Hy(t,n){return Zv(yv.count(Fv(t)-1,t),n,2)}function Xy(t,n){var e=t.getUTCDay();return t=e>=4||0===e?xv(t):xv.ceil(t),Zv(xv.count(Fv(t),t)+(4===Fv(t).getUTCDay()),n,2)}function Ky(t){return t.getUTCDay()}function Zy(t,n){return Zv(gv.count(Fv(t)-1,t),n,2)}function Qy(t,n){return Zv(t.getUTCFullYear()%100,n,2)}function $y(t,n){return Zv(t.getUTCFullYear()%1e4,n,4)}function Jy(){return"+0000"}function tg(){return"%"}function ng(t){return+t}function eg(t){return Math.floor(+t/1e3)}function rg(t){return Uv=Bv(t),qv=Uv.format,Lv=Uv.parse,Yv=Uv.utcFormat,Gv=Uv.utcParse,Uv}rg({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});function ig(t){return new Date(t)}function og(t){return t instanceof Date?+t:+new Date(+t)}function ug(t,n,e,r,i,u,c,a,s){var f=ib(Qp,Qp),l=f.invert,h=f.domain,d=s(".%L"),p=s(":%S"),b=s("%I:%M"),v=s("%I %p"),y=s("%a %d"),g=s("%b %d"),_=s("%B"),m=s("%Y"),x=[[c,1,1e3],[c,5,5e3],[c,15,15e3],[c,30,3e4],[u,1,6e4],[u,5,3e5],[u,15,9e5],[u,30,18e5],[i,1,36e5],[i,3,108e5],[i,6,216e5],[i,12,432e5],[r,1,864e5],[r,2,1728e5],[e,1,6048e5],[n,1,2592e6],[n,3,7776e6],[t,1,31536e6]];function w(o){return(c(o)<o?d:u(o)<o?p:i(o)<o?b:r(o)<o?v:n(o)<o?e(o)<o?y:g:t(o)<o?_:m)(o)}function M(n,e,r,i){if(null==n&&(n=10),"number"==typeof n){var u=Math.abs(r-e)/n,c=o((function(t){return t[2]})).right(x,u);c===x.length?(i=A(e/31536e6,r/31536e6,n),n=t):c?(i=(c=x[u/x[c-1][2]<x[c][2]/u?c-1:c])[1],n=c[0]):(i=Math.max(A(e,r,n),1),n=a)}return null==i?n:n.every(i)}return f.invert=function(t){return new Date(l(t))},f.domain=function(t){return arguments.length?h(qp.call(t,og)):h().map(ig)},f.ticks=function(t,n){var e,r=h(),i=r[0],o=r[r.length-1],u=o<i;return u&&(e=i,i=o,o=e),e=(e=M(t,i,o,n))?e.range(i,o+1):[],u?e.reverse():e},f.tickFormat=function(t,n){return null==n?w:s(n)},f.nice=function(t,n){var e=h();return(t=M(t,e[0],e[e.length-1],n))?h(sb(e,t)):f},f.copy=function(){return eb(f,ug(t,n,e,r,i,u,c,a,s))},f}var cg=function(){return Rp.apply(ug(Fb,Vb,Ub,ev,ov,av,lv,pv,qv).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)},ag=Ib((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),sg=ag,fg=ag.range,lg=Ib((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getUTCHours()})),hg=lg,dg=lg.range,pg=Ib((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getUTCMinutes()})),bg=pg,vg=pg.range,yg=function(){return Rp.apply(ug(Fv,sg,yv,jv,hg,bg,lv,pv,Yv).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)};function gg(){var t,n,e,r,i,o=0,u=1,c=Qp,a=!1;function s(n){return isNaN(n=+n)?i:c(0===e?.5:(n=(r(n)-t)*e,a?Math.max(0,Math.min(1,n)):n))}return s.domain=function(i){return arguments.length?(t=r(o=+i[0]),n=r(u=+i[1]),e=t===n?0:1/(n-t),s):[o,u]},s.clamp=function(t){return arguments.length?(a=!!t,s):a},s.interpolator=function(t){return arguments.length?(c=t,s):c},s.unknown=function(t){return arguments.length?(i=t,s):i},function(i){return r=i,t=i(o),n=i(u),e=t===n?0:1/(n-t),s}}function _g(t,n){return n.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown())}function mg(){var t=ub(gg()(Qp));return t.copy=function(){return _g(t,mg())},Bp.apply(t,arguments)}function xg(){var t=vb(gg()).domain([1,10]);return t.copy=function(){return _g(t,xg()).base(t.base())},Bp.apply(t,arguments)}function wg(){var t=mb(gg());return t.copy=function(){return _g(t,wg()).constant(t.constant())},Bp.apply(t,arguments)}function Mg(){var t=Tb(gg());return t.copy=function(){return _g(t,Mg()).exponent(t.exponent())},Bp.apply(t,arguments)}function Sg(){return Mg.apply(null,arguments).exponent(.5)}function Tg(){var t=[],n=Qp;function e(e){if(!isNaN(e=+e))return n((s(t,e)-1)/(t.length-1))}return e.domain=function(n){if(!arguments.length)return t.slice();t=[];for(var r,o=0,u=n.length;o<u;++o)null==(r=n[o])||isNaN(r=+r)||t.push(r);return t.sort(i),e},e.interpolator=function(t){return arguments.length?(n=t,e):n},e.copy=function(){return Tg(n).domain(t)},Bp.apply(e,arguments)}function Ng(){var t,n,e,r,i,o,u,c=0,a=.5,s=1,f=Qp,l=!1;function h(t){return isNaN(t=+t)?u:(t=.5+((t=+o(t))-n)*(t<n?r:i),f(l?Math.max(0,Math.min(1,t)):t))}return h.domain=function(u){return arguments.length?(t=o(c=+u[0]),n=o(a=+u[1]),e=o(s=+u[2]),r=t===n?0:.5/(n-t),i=n===e?0:.5/(e-n),h):[c,a,s]},h.clamp=function(t){return arguments.length?(l=!!t,h):l},h.interpolator=function(t){return arguments.length?(f=t,h):f},h.unknown=function(t){return arguments.length?(u=t,h):u},function(u){return o=u,t=u(c),n=u(a),e=u(s),r=t===n?0:.5/(n-t),i=n===e?0:.5/(e-n),h}}function Eg(){var t=ub(Ng()(Qp));return t.copy=function(){return _g(t,Eg())},Bp.apply(t,arguments)}function Cg(){var t=vb(Ng()).domain([.1,1,10]);return t.copy=function(){return _g(t,Cg()).base(t.base())},Bp.apply(t,arguments)}function Ag(){var t=mb(Ng());return t.copy=function(){return _g(t,Ag()).constant(t.constant())},Bp.apply(t,arguments)}function kg(){var t=Tb(Ng());return t.copy=function(){return _g(t,kg()).exponent(t.exponent())},Bp.apply(t,arguments)}function Og(){return kg.apply(null,arguments).exponent(.5)}var jg=function(t){for(var n=t.length/6|0,e=new Array(n),r=0;r<n;)e[r]="#"+t.slice(6*r,6*++r);return e},Ig=jg("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Pg=jg("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),Fg=jg("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),zg=jg("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),Dg=jg("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),Vg=jg("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),Rg=jg("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),Bg=jg("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),Ug=jg("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),qg=jg("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab"),Lg=function(t){return be(t[t.length-1])},Yg=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(jg),Gg=Lg(Yg),Wg=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(jg),Hg=Lg(Wg),Xg=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(jg),Kg=Lg(Xg),Zg=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(jg),Qg=Lg(Zg),$g=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(jg),Jg=Lg($g),t_=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(jg),n_=Lg(t_),e_=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(jg),r_=Lg(e_),i_=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(jg),o_=Lg(i_),u_=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(jg),c_=Lg(u_),a_=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(jg),s_=Lg(a_),f_=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(jg),l_=Lg(f_),h_=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(jg),d_=Lg(h_),p_=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(jg),b_=Lg(p_),v_=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(jg),y_=Lg(v_),g_=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(jg),__=Lg(g_),m_=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(jg),x_=Lg(m_),w_=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(jg),M_=Lg(w_),S_=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(jg),T_=Lg(S_),N_=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(jg),E_=Lg(N_),C_=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(jg),A_=Lg(C_),k_=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(jg),O_=Lg(k_),j_=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(jg),I_=Lg(j_),P_=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(jg),F_=Lg(P_),z_=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(jg),D_=Lg(z_),V_=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(jg),R_=Lg(V_),B_=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(jg),U_=Lg(B_),q_=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(jg),L_=Lg(q_),Y_=function(t){return t=Math.max(0,Math.min(1,t)),"rgb("+Math.max(0,Math.min(255,Math.round(-4.54-t*(35.34-t*(2381.73-t*(6402.7-t*(7024.72-2710.57*t)))))))+", "+Math.max(0,Math.min(255,Math.round(32.49+t*(170.73+t*(52.82-t*(131.46-t*(176.58-67.37*t)))))))+", "+Math.max(0,Math.min(255,Math.round(81.24+t*(442.36-t*(2482.43-t*(6167.24-t*(6614.94-2475.67*t)))))))+")"},G_=wp(jo(300,.5,0),jo(-240,.5,1)),W_=wp(jo(-100,.75,.35),jo(80,1.5,.8)),H_=wp(jo(260,.75,.35),jo(80,1.5,.8)),X_=jo(),K_=function(t){(t<0||t>1)&&(t-=Math.floor(t));var n=Math.abs(t-.5);return X_.h=360*t-100,X_.s=1.5-1.5*n,X_.l=.8-.9*n,X_+""},Z_=Kn(),Q_=Math.PI/3,$_=2*Math.PI/3,J_=function(t){var n;return t=(.5-t)*Math.PI,Z_.r=255*(n=Math.sin(t))*n,Z_.g=255*(n=Math.sin(t+Q_))*n,Z_.b=255*(n=Math.sin(t+$_))*n,Z_+""},tm=function(t){return t=Math.max(0,Math.min(1,t)),"rgb("+Math.max(0,Math.min(255,Math.round(34.61+t*(1172.33-t*(10793.56-t*(33300.12-t*(38394.49-14825.05*t)))))))+", "+Math.max(0,Math.min(255,Math.round(23.31+t*(557.33+t*(1225.33-t*(3574.96-t*(1073.77+707.56*t)))))))+", "+Math.max(0,Math.min(255,Math.round(27.2+t*(3211.1-t*(15327.97-t*(27814-t*(22569.18-6838.66*t)))))))+")"};function nm(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}var em=nm(jg("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),rm=nm(jg("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),im=nm(jg("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),om=nm(jg("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921")),um=function(t){return Sn(rn(t).call(document.documentElement))},cm=0;function am(){return new sm}function sm(){this._="@"+(++cm).toString(36)}sm.prototype=am.prototype={constructor:sm,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var fm=function(t){return"string"==typeof t?new xn([document.querySelectorAll(t)],[document.documentElement]):new xn([null==t?[]:t],mn)},lm=function(t,n){null==n&&(n=ke().touches);for(var e=0,r=n?n.length:0,i=new Array(r);e<r;++e)i[e]=Oe(t,n[e]);return i},hm=function(t){return function(){return t}},dm=Math.abs,pm=Math.atan2,bm=Math.cos,vm=Math.max,ym=Math.min,gm=Math.sin,_m=Math.sqrt,mm=Math.PI,xm=mm/2,wm=2*mm;function Mm(t){return t>1?0:t<-1?mm:Math.acos(t)}function Sm(t){return t>=1?xm:t<=-1?-xm:Math.asin(t)}function Tm(t){return t.innerRadius}function Nm(t){return t.outerRadius}function Em(t){return t.startAngle}function Cm(t){return t.endAngle}function Am(t){return t&&t.padAngle}function km(t,n,e,r,i,o,u,c){var a=e-t,s=r-n,f=u-i,l=c-o,h=l*a-f*s;if(!(h*h<1e-12))return[t+(h=(f*(n-o)-l*(t-i))/h)*a,n+h*s]}function Om(t,n,e,r,i,o,u){var c=t-e,a=n-r,s=(u?o:-o)/_m(c*c+a*a),f=s*a,l=-s*c,h=t+f,d=n+l,p=e+f,b=r+l,v=(h+p)/2,y=(d+b)/2,g=p-h,_=b-d,m=g*g+_*_,x=i-o,w=h*b-p*d,M=(_<0?-1:1)*_m(vm(0,x*x*m-w*w)),S=(w*_-g*M)/m,T=(-w*g-_*M)/m,N=(w*_+g*M)/m,E=(-w*g+_*M)/m,C=S-v,A=T-y,k=N-v,O=E-y;return C*C+A*A>k*k+O*O&&(S=N,T=E),{cx:S,cy:T,x01:-f,y01:-l,x11:S*(i/x-1),y11:T*(i/x-1)}}var jm=function(){var t=Tm,n=Nm,e=hm(0),r=null,i=Em,o=Cm,u=Am,c=null;function a(){var a,s,f=+t.apply(this,arguments),l=+n.apply(this,arguments),h=i.apply(this,arguments)-xm,d=o.apply(this,arguments)-xm,p=dm(d-h),b=d>h;if(c||(c=a=Li()),l<f&&(s=l,l=f,f=s),l>1e-12)if(p>wm-1e-12)c.moveTo(l*bm(h),l*gm(h)),c.arc(0,0,l,h,d,!b),f>1e-12&&(c.moveTo(f*bm(d),f*gm(d)),c.arc(0,0,f,d,h,b));else{var v,y,g=h,_=d,m=h,x=d,w=p,M=p,S=u.apply(this,arguments)/2,T=S>1e-12&&(r?+r.apply(this,arguments):_m(f*f+l*l)),N=ym(dm(l-f)/2,+e.apply(this,arguments)),E=N,C=N;if(T>1e-12){var A=Sm(T/f*gm(S)),k=Sm(T/l*gm(S));(w-=2*A)>1e-12?(m+=A*=b?1:-1,x-=A):(w=0,m=x=(h+d)/2),(M-=2*k)>1e-12?(g+=k*=b?1:-1,_-=k):(M=0,g=_=(h+d)/2)}var O=l*bm(g),j=l*gm(g),I=f*bm(x),P=f*gm(x);if(N>1e-12){var F,z=l*bm(_),D=l*gm(_),V=f*bm(m),R=f*gm(m);if(p<mm&&(F=km(O,j,V,R,z,D,I,P))){var B=O-F[0],U=j-F[1],q=z-F[0],L=D-F[1],Y=1/gm(Mm((B*q+U*L)/(_m(B*B+U*U)*_m(q*q+L*L)))/2),G=_m(F[0]*F[0]+F[1]*F[1]);E=ym(N,(f-G)/(Y-1)),C=ym(N,(l-G)/(Y+1))}}M>1e-12?C>1e-12?(v=Om(V,R,O,j,l,C,b),y=Om(z,D,I,P,l,C,b),c.moveTo(v.cx+v.x01,v.cy+v.y01),C<N?c.arc(v.cx,v.cy,C,pm(v.y01,v.x01),pm(y.y01,y.x01),!b):(c.arc(v.cx,v.cy,C,pm(v.y01,v.x01),pm(v.y11,v.x11),!b),c.arc(0,0,l,pm(v.cy+v.y11,v.cx+v.x11),pm(y.cy+y.y11,y.cx+y.x11),!b),c.arc(y.cx,y.cy,C,pm(y.y11,y.x11),pm(y.y01,y.x01),!b))):(c.moveTo(O,j),c.arc(0,0,l,g,_,!b)):c.moveTo(O,j),f>1e-12&&w>1e-12?E>1e-12?(v=Om(I,P,z,D,f,-E,b),y=Om(O,j,V,R,f,-E,b),c.lineTo(v.cx+v.x01,v.cy+v.y01),E<N?c.arc(v.cx,v.cy,E,pm(v.y01,v.x01),pm(y.y01,y.x01),!b):(c.arc(v.cx,v.cy,E,pm(v.y01,v.x01),pm(v.y11,v.x11),!b),c.arc(0,0,f,pm(v.cy+v.y11,v.cx+v.x11),pm(y.cy+y.y11,y.cx+y.x11),b),c.arc(y.cx,y.cy,E,pm(y.y11,y.x11),pm(y.y01,y.x01),!b))):c.arc(0,0,f,x,m,b):c.lineTo(I,P)}else c.moveTo(0,0);if(c.closePath(),a)return c=null,a+""||null}return a.centroid=function(){var e=(+t.apply(this,arguments)+ +n.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-mm/2;return[bm(r)*e,gm(r)*e]},a.innerRadius=function(n){return arguments.length?(t="function"==typeof n?n:hm(+n),a):t},a.outerRadius=function(t){return arguments.length?(n="function"==typeof t?t:hm(+t),a):n},a.cornerRadius=function(t){return arguments.length?(e="function"==typeof t?t:hm(+t),a):e},a.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:hm(+t),a):r},a.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:hm(+t),a):i},a.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:hm(+t),a):o},a.padAngle=function(t){return arguments.length?(u="function"==typeof t?t:hm(+t),a):u},a.context=function(t){return arguments.length?(c=null==t?null:t,a):c},a};function Im(t){this._context=t}Im.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var Pm=function(t){return new Im(t)};function Fm(t){return t[0]}function zm(t){return t[1]}var Dm=function(){var t=Fm,n=zm,e=hm(!0),r=null,i=Pm,o=null;function u(u){var c,a,s,f=u.length,l=!1;for(null==r&&(o=i(s=Li())),c=0;c<=f;++c)!(c<f&&e(a=u[c],c,u))===l&&((l=!l)?o.lineStart():o.lineEnd()),l&&o.point(+t(a,c,u),+n(a,c,u));if(s)return o=null,s+""||null}return u.x=function(n){return arguments.length?(t="function"==typeof n?n:hm(+n),u):t},u.y=function(t){return arguments.length?(n="function"==typeof t?t:hm(+t),u):n},u.defined=function(t){return arguments.length?(e="function"==typeof t?t:hm(!!t),u):e},u.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),u):i},u.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),u):r},u},Vm=function(){var t=Fm,n=null,e=hm(0),r=zm,i=hm(!0),o=null,u=Pm,c=null;function a(a){var s,f,l,h,d,p=a.length,b=!1,v=new Array(p),y=new Array(p);for(null==o&&(c=u(d=Li())),s=0;s<=p;++s){if(!(s<p&&i(h=a[s],s,a))===b)if(b=!b)f=s,c.areaStart(),c.lineStart();else{for(c.lineEnd(),c.lineStart(),l=s-1;l>=f;--l)c.point(v[l],y[l]);c.lineEnd(),c.areaEnd()}b&&(v[s]=+t(h,s,a),y[s]=+e(h,s,a),c.point(n?+n(h,s,a):v[s],r?+r(h,s,a):y[s]))}if(d)return c=null,d+""||null}function s(){return Dm().defined(i).curve(u).context(o)}return a.x=function(e){return arguments.length?(t="function"==typeof e?e:hm(+e),n=null,a):t},a.x0=function(n){return arguments.length?(t="function"==typeof n?n:hm(+n),a):t},a.x1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:hm(+t),a):n},a.y=function(t){return arguments.length?(e="function"==typeof t?t:hm(+t),r=null,a):e},a.y0=function(t){return arguments.length?(e="function"==typeof t?t:hm(+t),a):e},a.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:hm(+t),a):r},a.lineX0=a.lineY0=function(){return s().x(t).y(e)},a.lineY1=function(){return s().x(t).y(r)},a.lineX1=function(){return s().x(n).y(e)},a.defined=function(t){return arguments.length?(i="function"==typeof t?t:hm(!!t),a):i},a.curve=function(t){return arguments.length?(u=t,null!=o&&(c=u(o)),a):u},a.context=function(t){return arguments.length?(null==t?o=c=null:c=u(o=t),a):o},a},Rm=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN},Bm=function(t){return t},Um=function(){var t=Bm,n=Rm,e=null,r=hm(0),i=hm(wm),o=hm(0);function u(u){var c,a,s,f,l,h=u.length,d=0,p=new Array(h),b=new Array(h),v=+r.apply(this,arguments),y=Math.min(wm,Math.max(-wm,i.apply(this,arguments)-v)),g=Math.min(Math.abs(y)/h,o.apply(this,arguments)),_=g*(y<0?-1:1);for(c=0;c<h;++c)(l=b[p[c]=c]=+t(u[c],c,u))>0&&(d+=l);for(null!=n?p.sort((function(t,e){return n(b[t],b[e])})):null!=e&&p.sort((function(t,n){return e(u[t],u[n])})),c=0,s=d?(y-h*_)/d:0;c<h;++c,v=f)a=p[c],f=v+((l=b[a])>0?l*s:0)+_,b[a]={data:u[a],index:c,value:l,startAngle:v,endAngle:f,padAngle:g};return b}return u.value=function(n){return arguments.length?(t="function"==typeof n?n:hm(+n),u):t},u.sortValues=function(t){return arguments.length?(n=t,e=null,u):n},u.sort=function(t){return arguments.length?(e=t,n=null,u):e},u.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:hm(+t),u):r},u.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:hm(+t),u):i},u.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:hm(+t),u):o},u},qm=Ym(Pm);function Lm(t){this._curve=t}function Ym(t){function n(n){return new Lm(t(n))}return n._curve=t,n}function Gm(t){var n=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?n(Ym(t)):n()._curve},t}Lm.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};var Wm=function(){return Gm(Dm().curve(qm))},Hm=function(){var t=Vm().curve(qm),n=t.curve,e=t.lineX0,r=t.lineX1,i=t.lineY0,o=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return Gm(e())},delete t.lineX0,t.lineEndAngle=function(){return Gm(r())},delete t.lineX1,t.lineInnerRadius=function(){return Gm(i())},delete t.lineY0,t.lineOuterRadius=function(){return Gm(o())},delete t.lineY1,t.curve=function(t){return arguments.length?n(Ym(t)):n()._curve},t},Xm=function(t,n){return[(n=+n)*Math.cos(t-=Math.PI/2),n*Math.sin(t)]},Km=Array.prototype.slice;function Zm(t){return t.source}function Qm(t){return t.target}function $m(t){var n=Zm,e=Qm,r=Fm,i=zm,o=null;function u(){var u,c=Km.call(arguments),a=n.apply(this,c),s=e.apply(this,c);if(o||(o=u=Li()),t(o,+r.apply(this,(c[0]=a,c)),+i.apply(this,c),+r.apply(this,(c[0]=s,c)),+i.apply(this,c)),u)return o=null,u+""||null}return u.source=function(t){return arguments.length?(n=t,u):n},u.target=function(t){return arguments.length?(e=t,u):e},u.x=function(t){return arguments.length?(r="function"==typeof t?t:hm(+t),u):r},u.y=function(t){return arguments.length?(i="function"==typeof t?t:hm(+t),u):i},u.context=function(t){return arguments.length?(o=null==t?null:t,u):o},u}function Jm(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n=(n+r)/2,e,n,i,r,i)}function tx(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n,e=(e+i)/2,r,e,r,i)}function nx(t,n,e,r,i){var o=Xm(n,e),u=Xm(n,e=(e+i)/2),c=Xm(r,e),a=Xm(r,i);t.moveTo(o[0],o[1]),t.bezierCurveTo(u[0],u[1],c[0],c[1],a[0],a[1])}function ex(){return $m(Jm)}function rx(){return $m(tx)}function ix(){var t=$m(nx);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}var ox={draw:function(t,n){var e=Math.sqrt(n/mm);t.moveTo(e,0),t.arc(0,0,e,0,wm)}},ux={draw:function(t,n){var e=Math.sqrt(n/5)/2;t.moveTo(-3*e,-e),t.lineTo(-e,-e),t.lineTo(-e,-3*e),t.lineTo(e,-3*e),t.lineTo(e,-e),t.lineTo(3*e,-e),t.lineTo(3*e,e),t.lineTo(e,e),t.lineTo(e,3*e),t.lineTo(-e,3*e),t.lineTo(-e,e),t.lineTo(-3*e,e),t.closePath()}},cx=Math.sqrt(1/3),ax=2*cx,sx={draw:function(t,n){var e=Math.sqrt(n/ax),r=e*cx;t.moveTo(0,-e),t.lineTo(r,0),t.lineTo(0,e),t.lineTo(-r,0),t.closePath()}},fx=Math.sin(mm/10)/Math.sin(7*mm/10),lx=Math.sin(wm/10)*fx,hx=-Math.cos(wm/10)*fx,dx={draw:function(t,n){var e=Math.sqrt(.8908130915292852*n),r=lx*e,i=hx*e;t.moveTo(0,-e),t.lineTo(r,i);for(var o=1;o<5;++o){var u=wm*o/5,c=Math.cos(u),a=Math.sin(u);t.lineTo(a*e,-c*e),t.lineTo(c*r-a*i,a*r+c*i)}t.closePath()}},px={draw:function(t,n){var e=Math.sqrt(n),r=-e/2;t.rect(r,r,e,e)}},bx=Math.sqrt(3),vx={draw:function(t,n){var e=-Math.sqrt(n/(3*bx));t.moveTo(0,2*e),t.lineTo(-bx*e,-e),t.lineTo(bx*e,-e),t.closePath()}},yx=Math.sqrt(3)/2,gx=1/Math.sqrt(12),_x=3*(gx/2+1),mx={draw:function(t,n){var e=Math.sqrt(n/_x),r=e/2,i=e*gx,o=r,u=e*gx+e,c=-o,a=u;t.moveTo(r,i),t.lineTo(o,u),t.lineTo(c,a),t.lineTo(-.5*r-yx*i,yx*r+-.5*i),t.lineTo(-.5*o-yx*u,yx*o+-.5*u),t.lineTo(-.5*c-yx*a,yx*c+-.5*a),t.lineTo(-.5*r+yx*i,-.5*i-yx*r),t.lineTo(-.5*o+yx*u,-.5*u-yx*o),t.lineTo(-.5*c+yx*a,-.5*a-yx*c),t.closePath()}},xx=[ox,ux,sx,px,dx,vx,mx],wx=function(){var t=hm(ox),n=hm(64),e=null;function r(){var r;if(e||(e=r=Li()),t.apply(this,arguments).draw(e,+n.apply(this,arguments)),r)return e=null,r+""||null}return r.type=function(n){return arguments.length?(t="function"==typeof n?n:hm(n),r):t},r.size=function(t){return arguments.length?(n="function"==typeof t?t:hm(+t),r):n},r.context=function(t){return arguments.length?(e=null==t?null:t,r):e},r},Mx=function(){};function Sx(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function Tx(t){this._context=t}Tx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Sx(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Sx(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var Nx=function(t){return new Tx(t)};function Ex(t){this._context=t}Ex.prototype={areaStart:Mx,areaEnd:Mx,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:Sx(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var Cx=function(t){return new Ex(t)};function Ax(t){this._context=t}Ax.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:Sx(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var kx=function(t){return new Ax(t)};function Ox(t,n){this._basis=new Tx(t),this._beta=n}Ox.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],o=n[0],u=t[e]-i,c=n[e]-o,a=-1;++a<=e;)r=a/e,this._basis.point(this._beta*t[a]+(1-this._beta)*(i+r*u),this._beta*n[a]+(1-this._beta)*(o+r*c));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};var jx=function t(n){function e(t){return 1===n?new Tx(t):new Ox(t,n)}return e.beta=function(n){return t(+n)},e}(.85);function Ix(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function Px(t,n){this._context=t,this._k=(1-n)/6}Px.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Ix(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:Ix(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Fx=function t(n){function e(t){return new Px(t,n)}return e.tension=function(n){return t(+n)},e}(0);function zx(t,n){this._context=t,this._k=(1-n)/6}zx.prototype={areaStart:Mx,areaEnd:Mx,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Ix(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Dx=function t(n){function e(t){return new zx(t,n)}return e.tension=function(n){return t(+n)},e}(0);function Vx(t,n){this._context=t,this._k=(1-n)/6}Vx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Ix(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Rx=function t(n){function e(t){return new Vx(t,n)}return e.tension=function(n){return t(+n)},e}(0);function Bx(t,n,e){var r=t._x1,i=t._y1,o=t._x2,u=t._y2;if(t._l01_a>1e-12){var c=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,a=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*c-t._x0*t._l12_2a+t._x2*t._l01_2a)/a,i=(i*c-t._y0*t._l12_2a+t._y2*t._l01_2a)/a}if(t._l23_a>1e-12){var s=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,f=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*s+t._x1*t._l23_2a-n*t._l12_2a)/f,u=(u*s+t._y1*t._l23_2a-e*t._l12_2a)/f}t._context.bezierCurveTo(r,i,o,u,t._x2,t._y2)}function Ux(t,n){this._context=t,this._alpha=n}Ux.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:Bx(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var qx=function t(n){function e(t){return n?new Ux(t,n):new Px(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function Lx(t,n){this._context=t,this._alpha=n}Lx.prototype={areaStart:Mx,areaEnd:Mx,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Bx(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Yx=function t(n){function e(t){return n?new Lx(t,n):new zx(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function Gx(t,n){this._context=t,this._alpha=n}Gx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Bx(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Wx=function t(n){function e(t){return n?new Gx(t,n):new Vx(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function Hx(t){this._context=t}Hx.prototype={areaStart:Mx,areaEnd:Mx,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}};var Xx=function(t){return new Hx(t)};function Kx(t){return t<0?-1:1}function Zx(t,n,e){var r=t._x1-t._x0,i=n-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),u=(e-t._y1)/(i||r<0&&-0),c=(o*i+u*r)/(r+i);return(Kx(o)+Kx(u))*Math.min(Math.abs(o),Math.abs(u),.5*Math.abs(c))||0}function Qx(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function $x(t,n,e){var r=t._x0,i=t._y0,o=t._x1,u=t._y1,c=(o-r)/3;t._context.bezierCurveTo(r+c,i+c*n,o-c,u-c*e,o,u)}function Jx(t){this._context=t}function tw(t){this._context=new nw(t)}function nw(t){this._context=t}function ew(t){return new Jx(t)}function rw(t){return new tw(t)}function iw(t){this._context=t}function ow(t){var n,e,r=t.length-1,i=new Array(r),o=new Array(r),u=new Array(r);for(i[0]=0,o[0]=2,u[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,o[n]=4,u[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,o[r-1]=7,u[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/o[n-1],o[n]-=e,u[n]-=e*u[n-1];for(i[r-1]=u[r-1]/o[r-1],n=r-2;n>=0;--n)i[n]=(u[n]-i[n+1])/o[n];for(o[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)o[n]=2*t[n+1]-i[n+1];return[i,o]}Jx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:$x(this,this._t0,Qx(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,$x(this,Qx(this,e=Zx(this,t,n)),e);break;default:$x(this,this._t0,e=Zx(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(tw.prototype=Object.create(Jx.prototype)).point=function(t,n){Jx.prototype.point.call(this,n,t)},nw.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}},iw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=ow(t),i=ow(n),o=0,u=1;u<e;++o,++u)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[u],n[u]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}};var uw=function(t){return new iw(t)};function cw(t,n){this._context=t,this._t=n}cw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}};var aw=function(t){return new cw(t,.5)};function sw(t){return new cw(t,0)}function fw(t){return new cw(t,1)}var lw=function(t,n){if((i=t.length)>1)for(var e,r,i,o=1,u=t[n[0]],c=u.length;o<i;++o)for(r=u,u=t[n[o]],e=0;e<c;++e)u[e][1]+=u[e][0]=isNaN(r[e][1])?r[e][0]:r[e][1]},hw=function(t){for(var n=t.length,e=new Array(n);--n>=0;)e[n]=n;return e};function dw(t,n){return t[n]}var pw=function(){var t=hm([]),n=hw,e=lw,r=dw;function i(i){var o,u,c=t.apply(this,arguments),a=i.length,s=c.length,f=new Array(s);for(o=0;o<s;++o){for(var l,h=c[o],d=f[o]=new Array(a),p=0;p<a;++p)d[p]=l=[0,+r(i[p],h,p,i)],l.data=i[p];d.key=h}for(o=0,u=n(f);o<s;++o)f[u[o]].index=o;return e(f,u),f}return i.keys=function(n){return arguments.length?(t="function"==typeof n?n:hm(Km.call(n)),i):t},i.value=function(t){return arguments.length?(r="function"==typeof t?t:hm(+t),i):r},i.order=function(t){return arguments.length?(n=null==t?hw:"function"==typeof t?t:hm(Km.call(t)),i):n},i.offset=function(t){return arguments.length?(e=null==t?lw:t,i):e},i},bw=function(t,n){if((r=t.length)>0){for(var e,r,i,o=0,u=t[0].length;o<u;++o){for(i=e=0;e<r;++e)i+=t[e][o][1]||0;if(i)for(e=0;e<r;++e)t[e][o][1]/=i}lw(t,n)}},vw=function(t,n){if((c=t.length)>0)for(var e,r,i,o,u,c,a=0,s=t[n[0]].length;a<s;++a)for(o=u=0,e=0;e<c;++e)(i=(r=t[n[e]][a])[1]-r[0])>0?(r[0]=o,r[1]=o+=i):i<0?(r[1]=u,r[0]=u+=i):(r[0]=0,r[1]=i)},yw=function(t,n){if((e=t.length)>0){for(var e,r=0,i=t[n[0]],o=i.length;r<o;++r){for(var u=0,c=0;u<e;++u)c+=t[u][r][1]||0;i[r][1]+=i[r][0]=-c/2}lw(t,n)}},gw=function(t,n){if((i=t.length)>0&&(r=(e=t[n[0]]).length)>0){for(var e,r,i,o=0,u=1;u<r;++u){for(var c=0,a=0,s=0;c<i;++c){for(var f=t[n[c]],l=f[u][1]||0,h=(l-(f[u-1][1]||0))/2,d=0;d<c;++d){var p=t[n[d]];h+=(p[u][1]||0)-(p[u-1][1]||0)}a+=l,s+=h*l}e[u-1][1]+=e[u-1][0]=o,a&&(o-=s/a)}e[u-1][1]+=e[u-1][0]=o,lw(t,n)}},_w=function(t){var n=t.map(mw);return hw(t).sort((function(t,e){return n[t]-n[e]}))};function mw(t){for(var n,e=-1,r=0,i=t.length,o=-1/0;++e<i;)(n=+t[e][1])>o&&(o=n,r=e);return r}var xw=function(t){var n=t.map(ww);return hw(t).sort((function(t,e){return n[t]-n[e]}))};function ww(t){for(var n,e=0,r=-1,i=t.length;++r<i;)(n=+t[r][1])&&(e+=n);return e}var Mw=function(t){return xw(t).reverse()},Sw=function(t){var n,e,r=t.length,i=t.map(ww),o=_w(t),u=0,c=0,a=[],s=[];for(n=0;n<r;++n)e=o[n],u<c?(u+=i[e],a.push(e)):(c+=i[e],s.push(e));return s.reverse().concat(a)},Tw=function(t){return hw(t).reverse()};var Nw=Date.prototype.toISOString?function(t){return t.toISOString()}:Yv("%Y-%m-%dT%H:%M:%S.%LZ");var Ew=+new Date("2000-01-01T00:00:00.000Z")?function(t){var n=new Date(t);return isNaN(n)?null:n}:Gv("%Y-%m-%dT%H:%M:%S.%LZ"),Cw=function(t,n,e){var r=new Ye,i=n;return null==n?(r.restart(t,n,e),r):(n=+n,e=null==e?qe():+e,r.restart((function o(u){u+=i,r.restart(o,i+=n,e),t(u)}),n,e),r)},Aw=function(t){return function(){return t}};function kw(t){return t[0]}function Ow(t){return t[1]}function jw(){this._=null}function Iw(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function Pw(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function Fw(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function zw(t){for(;t.L;)t=t.L;return t}jw.prototype={constructor:jw,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=zw(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(Pw(this,e),e=(t=e).U),e.C=!1,r.C=!0,Fw(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(Fw(this,e),e=(t=e).U),e.C=!1,r.C=!0,Pw(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,o=t.L,u=t.R;if(e=o?u?zw(u):o:u,i?i.L===t?i.L=e:i.R=e:this._=e,o&&u?(r=e.C,e.C=t.C,e.L=o,o.U=e,e!==u?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=u,u.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,Pw(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,Fw(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,Pw(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,Fw(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,Pw(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,Fw(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var Dw=jw;function Vw(t,n,e,r){var i=[null,null],o=aM.push(i)-1;return i.left=t,i.right=n,e&&Bw(i,t,n,e),r&&Bw(i,n,t,r),uM[t.index].halfedges.push(o),uM[n.index].halfedges.push(o),i}function Rw(t,n,e){var r=[n,e];return r.left=t,r}function Bw(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function Uw(t,n,e,r,i){var o,u=t[0],c=t[1],a=u[0],s=u[1],f=0,l=1,h=c[0]-a,d=c[1]-s;if(o=n-a,h||!(o>0)){if(o/=h,h<0){if(o<f)return;o<l&&(l=o)}else if(h>0){if(o>l)return;o>f&&(f=o)}if(o=r-a,h||!(o<0)){if(o/=h,h<0){if(o>l)return;o>f&&(f=o)}else if(h>0){if(o<f)return;o<l&&(l=o)}if(o=e-s,d||!(o>0)){if(o/=d,d<0){if(o<f)return;o<l&&(l=o)}else if(d>0){if(o>l)return;o>f&&(f=o)}if(o=i-s,d||!(o<0)){if(o/=d,d<0){if(o>l)return;o>f&&(f=o)}else if(d>0){if(o<f)return;o<l&&(l=o)}return!(f>0||l<1)||(f>0&&(t[0]=[a+f*h,s+f*d]),l<1&&(t[1]=[a+l*h,s+l*d]),!0)}}}}}function qw(t,n,e,r,i){var o=t[1];if(o)return!0;var u,c,a=t[0],s=t.left,f=t.right,l=s[0],h=s[1],d=f[0],p=f[1],b=(l+d)/2,v=(h+p)/2;if(p===h){if(b<n||b>=r)return;if(l>d){if(a){if(a[1]>=i)return}else a=[b,e];o=[b,i]}else{if(a){if(a[1]<e)return}else a=[b,i];o=[b,e]}}else if(c=v-(u=(l-d)/(p-h))*b,u<-1||u>1)if(l>d){if(a){if(a[1]>=i)return}else a=[(e-c)/u,e];o=[(i-c)/u,i]}else{if(a){if(a[1]<e)return}else a=[(i-c)/u,i];o=[(e-c)/u,e]}else if(h<p){if(a){if(a[0]>=r)return}else a=[n,u*n+c];o=[r,u*r+c]}else{if(a){if(a[0]<n)return}else a=[r,u*r+c];o=[n,u*n+c]}return t[0]=a,t[1]=o,!0}function Lw(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function Yw(t,n){return n[+(n.left!==t.site)]}function Gw(t,n){return n[+(n.left===t.site)]}var Ww,Hw=[];function Xw(){Iw(this),this.x=this.y=this.arc=this.site=this.cy=null}function Kw(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,o=e.site;if(r!==o){var u=i[0],c=i[1],a=r[0]-u,s=r[1]-c,f=o[0]-u,l=o[1]-c,h=2*(a*l-s*f);if(!(h>=-fM)){var d=a*a+s*s,p=f*f+l*l,b=(l*d-s*p)/h,v=(a*p-f*d)/h,y=Hw.pop()||new Xw;y.arc=t,y.site=i,y.x=b+u,y.y=(y.cy=v+c)+Math.sqrt(b*b+v*v),t.circle=y;for(var g=null,_=cM._;_;)if(y.y<_.y||y.y===_.y&&y.x<=_.x){if(!_.L){g=_.P;break}_=_.L}else{if(!_.R){g=_;break}_=_.R}cM.insert(g,y),g||(Ww=y)}}}}function Zw(t){var n=t.circle;n&&(n.P||(Ww=n.N),cM.remove(n),Hw.push(n),Iw(n),t.circle=null)}var Qw=[];function $w(){Iw(this),this.edge=this.site=this.circle=null}function Jw(t){var n=Qw.pop()||new $w;return n.site=t,n}function tM(t){Zw(t),oM.remove(t),Qw.push(t),Iw(t)}function nM(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],o=t.P,u=t.N,c=[t];tM(t);for(var a=o;a.circle&&Math.abs(e-a.circle.x)<sM&&Math.abs(r-a.circle.cy)<sM;)o=a.P,c.unshift(a),tM(a),a=o;c.unshift(a),Zw(a);for(var s=u;s.circle&&Math.abs(e-s.circle.x)<sM&&Math.abs(r-s.circle.cy)<sM;)u=s.N,c.push(s),tM(s),s=u;c.push(s),Zw(s);var f,l=c.length;for(f=1;f<l;++f)s=c[f],a=c[f-1],Bw(s.edge,a.site,s.site,i);a=c[0],(s=c[l-1]).edge=Vw(a.site,s.site,null,i),Kw(a),Kw(s)}function eM(t){for(var n,e,r,i,o=t[0],u=t[1],c=oM._;c;)if((r=rM(c,u)-o)>sM)c=c.L;else{if(!((i=o-iM(c,u))>sM)){r>-sM?(n=c.P,e=c):i>-sM?(n=c,e=c.N):n=e=c;break}if(!c.R){n=c;break}c=c.R}!function(t){uM[t.index]={site:t,halfedges:[]}}(t);var a=Jw(t);if(oM.insert(n,a),n||e){if(n===e)return Zw(n),e=Jw(n.site),oM.insert(a,e),a.edge=e.edge=Vw(n.site,a.site),Kw(n),void Kw(e);if(e){Zw(n),Zw(e);var s=n.site,f=s[0],l=s[1],h=t[0]-f,d=t[1]-l,p=e.site,b=p[0]-f,v=p[1]-l,y=2*(h*v-d*b),g=h*h+d*d,_=b*b+v*v,m=[(v*g-d*_)/y+f,(h*_-b*g)/y+l];Bw(e.edge,s,p,m),a.edge=Vw(s,t,null,m),e.edge=Vw(t,p,null,m),Kw(n),Kw(e)}else a.edge=Vw(n.site,a.site)}}function rM(t,n){var e=t.site,r=e[0],i=e[1],o=i-n;if(!o)return r;var u=t.P;if(!u)return-1/0;var c=(e=u.site)[0],a=e[1],s=a-n;if(!s)return c;var f=c-r,l=1/o-1/s,h=f/s;return l?(-h+Math.sqrt(h*h-2*l*(f*f/(-2*s)-a+s/2+i-o/2)))/l+r:(r+c)/2}function iM(t,n){var e=t.N;if(e)return rM(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var oM,uM,cM,aM,sM=1e-6,fM=1e-12;function lM(t,n){return n[1]-t[1]||n[0]-t[0]}function hM(t,n){var e,r,i,o=t.sort(lM).pop();for(aM=[],uM=new Array(t.length),oM=new Dw,cM=new Dw;;)if(i=Ww,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===e&&o[1]===r||(eM(o),e=o[0],r=o[1]),o=t.pop();else{if(!i)break;nM(i.arc)}if(function(){for(var t,n,e,r,i=0,o=uM.length;i<o;++i)if((t=uM[i])&&(r=(n=t.halfedges).length)){var u=new Array(r),c=new Array(r);for(e=0;e<r;++e)u[e]=e,c[e]=Lw(t,aM[n[e]]);for(u.sort((function(t,n){return c[n]-c[t]})),e=0;e<r;++e)c[e]=n[u[e]];for(e=0;e<r;++e)n[e]=c[e]}}(),n){var u=+n[0][0],c=+n[0][1],a=+n[1][0],s=+n[1][1];!function(t,n,e,r){for(var i,o=aM.length;o--;)qw(i=aM[o],t,n,e,r)&&Uw(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>sM||Math.abs(i[0][1]-i[1][1])>sM)||delete aM[o]}(u,c,a,s),function(t,n,e,r){var i,o,u,c,a,s,f,l,h,d,p,b,v=uM.length,y=!0;for(i=0;i<v;++i)if(o=uM[i]){for(u=o.site,c=(a=o.halfedges).length;c--;)aM[a[c]]||a.splice(c,1);for(c=0,s=a.length;c<s;)p=(d=Gw(o,aM[a[c]]))[0],b=d[1],l=(f=Yw(o,aM[a[++c%s]]))[0],h=f[1],(Math.abs(p-l)>sM||Math.abs(b-h)>sM)&&(a.splice(c,0,aM.push(Rw(u,d,Math.abs(p-t)<sM&&r-b>sM?[t,Math.abs(l-t)<sM?h:r]:Math.abs(b-r)<sM&&e-p>sM?[Math.abs(h-r)<sM?l:e,r]:Math.abs(p-e)<sM&&b-n>sM?[e,Math.abs(l-e)<sM?h:n]:Math.abs(b-n)<sM&&p-t>sM?[Math.abs(h-n)<sM?l:t,n]:null))-1),++s);s&&(y=!1)}if(y){var g,_,m,x=1/0;for(i=0,y=null;i<v;++i)(o=uM[i])&&(m=(g=(u=o.site)[0]-t)*g+(_=u[1]-n)*_)<x&&(x=m,y=o);if(y){var w=[t,n],M=[t,r],S=[e,r],T=[e,n];y.halfedges.push(aM.push(Rw(u=y.site,w,M))-1,aM.push(Rw(u,M,S))-1,aM.push(Rw(u,S,T))-1,aM.push(Rw(u,T,w))-1)}}for(i=0;i<v;++i)(o=uM[i])&&(o.halfedges.length||delete uM[i])}(u,c,a,s)}this.edges=aM,this.cells=uM,oM=cM=aM=uM=null}hM.prototype={constructor:hM,polygons:function(){var t=this.edges;return this.cells.map((function(n){var e=n.halfedges.map((function(e){return Yw(n,t[e])}));return e.data=n.site.data,e}))},triangles:function(){var t=[],n=this.edges;return this.cells.forEach((function(e,r){if(o=(i=e.halfedges).length)for(var i,o,u,c,a,s,f=e.site,l=-1,h=n[i[o-1]],d=h.left===f?h.right:h.left;++l<o;)u=d,d=(h=n[i[l]]).left===f?h.right:h.left,u&&d&&r<u.index&&r<d.index&&(a=u,s=d,((c=f)[0]-s[0])*(a[1]-c[1])-(c[0]-a[0])*(s[1]-c[1])<0)&&t.push([f.data,u.data,d.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,n,e){for(var r,i,o=this,u=o._found||0,c=o.cells.length;!(i=o.cells[u]);)if(++u>=c)return null;var a=t-i.site[0],s=n-i.site[1],f=a*a+s*s;do{i=o.cells[r=u],u=null,i.halfedges.forEach((function(e){var r=o.edges[e],c=r.left;if(c!==i.site&&c||(c=r.right)){var a=t-c[0],s=n-c[1],l=a*a+s*s;l<f&&(f=l,u=c.index)}}))}while(null!==u);return o._found=r,null==e||f<=e*e?i.site:null}};var dM=function(){var t=kw,n=Ow,e=null;function r(r){return new hM(r.map((function(e,i){var o=[Math.round(t(e,i,r)/sM)*sM,Math.round(n(e,i,r)/sM)*sM];return o.index=i,o.data=e,o})),e)}return r.polygons=function(t){return r(t).polygons()},r.links=function(t){return r(t).links()},r.triangles=function(t){return r(t).triangles()},r.x=function(n){return arguments.length?(t="function"==typeof n?n:Aw(+n),r):t},r.y=function(t){return arguments.length?(n="function"==typeof t?t:Aw(+t),r):n},r.extent=function(t){return arguments.length?(e=null==t?null:[[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]],r):e&&[[e[0][0],e[0][1]],[e[1][0],e[1][1]]]},r.size=function(t){return arguments.length?(e=null==t?null:[[0,0],[+t[0],+t[1]]],r):e&&[e[1][0]-e[0][0],e[1][1]-e[0][1]]},r},pM=function(t){return function(){return t}};function bM(t,n,e){this.target=t,this.type=n,this.transform=e}function vM(t,n,e){this.k=t,this.x=n,this.y=e}vM.prototype={constructor:vM,scale:function(t){return 1===t?this:new vM(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new vM(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var yM=new vM(1,0,0);function gM(t){for(;!t.__zoom;)if(!(t=t.parentNode))return yM;return t.__zoom}function _M(){fn.stopImmediatePropagation()}gM.prototype=vM.prototype;var mM=function(){fn.preventDefault(),fn.stopImmediatePropagation()};function xM(){return!fn.ctrlKey&&!fn.button}function wM(){var t=this;return t instanceof SVGElement?(t=t.ownerSVGElement||t).hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]:[[0,0],[t.clientWidth,t.clientHeight]]}function MM(){return this.__zoom||yM}function SM(){return-fn.deltaY*(1===fn.deltaMode?.05:fn.deltaMode?1:.002)}function TM(){return navigator.maxTouchPoints||"ontouchstart"in this}function NM(t,n,e){var r=t.invertX(n[0][0])-e[0][0],i=t.invertX(n[1][0])-e[1][0],o=t.invertY(n[0][1])-e[0][1],u=t.invertY(n[1][1])-e[1][1];return t.translate(i>r?(r+i)/2:Math.min(0,r)||Math.max(0,i),u>o?(o+u)/2:Math.min(0,o)||Math.max(0,u))}var EM=function(){var t,n,e=xM,r=wM,i=NM,o=SM,u=TM,c=[0,1/0],a=[[-1/0,-1/0],[1/0,1/0]],s=250,f=hp,l=lt("start","zoom","end"),h=0;function d(t){t.property("__zoom",MM).on("wheel.zoom",m).on("mousedown.zoom",x).on("dblclick.zoom",w).filter(u).on("touchstart.zoom",M).on("touchmove.zoom",S).on("touchend.zoom touchcancel.zoom",T).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function p(t,n){return(n=Math.max(c[0],Math.min(c[1],n)))===t.k?t:new vM(n,t.x,t.y)}function b(t,n,e){var r=n[0]-e[0]*t.k,i=n[1]-e[1]*t.k;return r===t.x&&i===t.y?t:new vM(t.k,r,i)}function v(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function y(t,n,e){t.on("start.zoom",(function(){g(this,arguments).start()})).on("interrupt.zoom end.zoom",(function(){g(this,arguments).end()})).tween("zoom",(function(){var t=this,i=arguments,o=g(t,i),u=r.apply(t,i),c=null==e?v(u):"function"==typeof e?e.apply(t,i):e,a=Math.max(u[1][0]-u[0][0],u[1][1]-u[0][1]),s=t.__zoom,l="function"==typeof n?n.apply(t,i):n,h=f(s.invert(c).concat(a/s.k),l.invert(c).concat(a/l.k));return function(t){if(1===t)t=l;else{var n=h(t),e=a/n[2];t=new vM(e,c[0]-n[0]*e,c[1]-n[1]*e)}o.zoom(null,t)}}))}function g(t,n,e){return!e&&t.__zooming||new _(t,n)}function _(t,n){this.that=t,this.args=n,this.active=0,this.extent=r.apply(t,n),this.taps=0}function m(){if(e.apply(this,arguments)){var t=g(this,arguments),n=this.__zoom,r=Math.max(c[0],Math.min(c[1],n.k*Math.pow(2,o.apply(this,arguments)))),u=Ie(this);if(t.wheel)t.mouse[0][0]===u[0]&&t.mouse[0][1]===u[1]||(t.mouse[1]=n.invert(t.mouse[0]=u)),clearTimeout(t.wheel);else{if(n.k===r)return;t.mouse=[u,n.invert(u)],cr(this),t.start()}mM(),t.wheel=setTimeout(s,150),t.zoom("mouse",i(b(p(n,r),t.mouse[0],t.mouse[1]),t.extent,a))}function s(){t.wheel=null,t.end()}}function x(){if(!n&&e.apply(this,arguments)){var t=g(this,arguments,!0),r=Sn(fn.view).on("mousemove.zoom",s,!0).on("mouseup.zoom",f,!0),o=Ie(this),u=fn.clientX,c=fn.clientY;En(fn.view),_M(),t.mouse=[o,this.__zoom.invert(o)],cr(this),t.start()}function s(){if(mM(),!t.moved){var n=fn.clientX-u,e=fn.clientY-c;t.moved=n*n+e*e>h}t.zoom("mouse",i(b(t.that.__zoom,t.mouse[0]=Ie(t.that),t.mouse[1]),t.extent,a))}function f(){r.on("mousemove.zoom mouseup.zoom",null),Cn(fn.view,t.moved),mM(),t.end()}}function w(){if(e.apply(this,arguments)){var t=this.__zoom,n=Ie(this),o=t.invert(n),u=t.k*(fn.shiftKey?.5:2),c=i(b(p(t,u),n,o),r.apply(this,arguments),a);mM(),s>0?Sn(this).transition().duration(s).call(y,c,n):Sn(this).call(d.transform,c)}}function M(){if(e.apply(this,arguments)){var n,r,i,o,u=fn.touches,c=u.length,a=g(this,arguments,fn.changedTouches.length===c);for(_M(),r=0;r<c;++r)i=u[r],o=[o=je(this,u,i.identifier),this.__zoom.invert(o),i.identifier],a.touch0?a.touch1||a.touch0[2]===o[2]||(a.touch1=o,a.taps=0):(a.touch0=o,n=!0,a.taps=1+!!t);t&&(t=clearTimeout(t)),n&&(a.taps<2&&(t=setTimeout((function(){t=null}),500)),cr(this),a.start())}}function S(){if(this.__zooming){var n,e,r,o,u=g(this,arguments),c=fn.changedTouches,s=c.length;for(mM(),t&&(t=clearTimeout(t)),u.taps=0,n=0;n<s;++n)e=c[n],r=je(this,c,e.identifier),u.touch0&&u.touch0[2]===e.identifier?u.touch0[0]=r:u.touch1&&u.touch1[2]===e.identifier&&(u.touch1[0]=r);if(e=u.that.__zoom,u.touch1){var f=u.touch0[0],l=u.touch0[1],h=u.touch1[0],d=u.touch1[1],v=(v=h[0]-f[0])*v+(v=h[1]-f[1])*v,y=(y=d[0]-l[0])*y+(y=d[1]-l[1])*y;e=p(e,Math.sqrt(v/y)),r=[(f[0]+h[0])/2,(f[1]+h[1])/2],o=[(l[0]+d[0])/2,(l[1]+d[1])/2]}else{if(!u.touch0)return;r=u.touch0[0],o=u.touch0[1]}u.zoom("touch",i(b(e,r,o),u.extent,a))}}function T(){if(this.__zooming){var t,e,r=g(this,arguments),i=fn.changedTouches,o=i.length;for(_M(),n&&clearTimeout(n),n=setTimeout((function(){n=null}),500),t=0;t<o;++t)e=i[t],r.touch0&&r.touch0[2]===e.identifier?delete r.touch0:r.touch1&&r.touch1[2]===e.identifier&&delete r.touch1;if(r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0)r.touch0[1]=this.__zoom.invert(r.touch0[0]);else if(r.end(),2===r.taps){var u=Sn(this).on("dblclick.zoom");u&&u.apply(this,arguments)}}}return d.transform=function(t,n,e){var r=t.selection?t.selection():t;r.property("__zoom",MM),t!==r?y(t,n,e):r.interrupt().each((function(){g(this,arguments).start().zoom(null,"function"==typeof n?n.apply(this,arguments):n).end()}))},d.scaleBy=function(t,n,e){d.scaleTo(t,(function(){var t=this.__zoom.k,e="function"==typeof n?n.apply(this,arguments):n;return t*e}),e)},d.scaleTo=function(t,n,e){d.transform(t,(function(){var t=r.apply(this,arguments),o=this.__zoom,u=null==e?v(t):"function"==typeof e?e.apply(this,arguments):e,c=o.invert(u),s="function"==typeof n?n.apply(this,arguments):n;return i(b(p(o,s),u,c),t,a)}),e)},d.translateBy=function(t,n,e){d.transform(t,(function(){return i(this.__zoom.translate("function"==typeof n?n.apply(this,arguments):n,"function"==typeof e?e.apply(this,arguments):e),r.apply(this,arguments),a)}))},d.translateTo=function(t,n,e,o){d.transform(t,(function(){var t=r.apply(this,arguments),u=this.__zoom,c=null==o?v(t):"function"==typeof o?o.apply(this,arguments):o;return i(yM.translate(c[0],c[1]).scale(u.k).translate("function"==typeof n?-n.apply(this,arguments):-n,"function"==typeof e?-e.apply(this,arguments):-e),t,a)}),o)},_.prototype={start:function(){return 1==++this.active&&(this.that.__zooming=this,this.emit("start")),this},zoom:function(t,n){return this.mouse&&"mouse"!==t&&(this.mouse[1]=n.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=n.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=n.invert(this.touch1[0])),this.that.__zoom=n,this.emit("zoom"),this},end:function(){return 0==--this.active&&(delete this.that.__zooming,this.emit("end")),this},emit:function(t){vn(new bM(d,t,this.that.__zoom),l.apply,l,[t,this.that,this.args])}},d.wheelDelta=function(t){return arguments.length?(o="function"==typeof t?t:pM(+t),d):o},d.filter=function(t){return arguments.length?(e="function"==typeof t?t:pM(!!t),d):e},d.touchable=function(t){return arguments.length?(u="function"==typeof t?t:pM(!!t),d):u},d.extent=function(t){return arguments.length?(r="function"==typeof t?t:pM([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),d):r},d.scaleExtent=function(t){return arguments.length?(c[0]=+t[0],c[1]=+t[1],d):[c[0],c[1]]},d.translateExtent=function(t){return arguments.length?(a[0][0]=+t[0][0],a[1][0]=+t[1][0],a[0][1]=+t[0][1],a[1][1]=+t[1][1],d):[[a[0][0],a[0][1]],[a[1][0],a[1][1]]]},d.constrain=function(t){return arguments.length?(i=t,d):i},d.duration=function(t){return arguments.length?(s=+t,d):s},d.interpolate=function(t){return arguments.length?(f=t,d):f},d.on=function(){var t=l.on.apply(l,arguments);return t===l?d:t},d.clickDistance=function(t){return arguments.length?(h=(t=+t)*t,d):Math.sqrt(h)},d}},W0Ae:function(t,n,e){"use strict";e.d(n,"a",(function(){return a}));var r=e("mrSG"),i=e("isby"),o=e("IUTb"),u=e("MGBS"),c=e("zotm");function a(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(1===t.length){if(!Object(i.a)(t[0]))return t[0];t=t[0]}return Object(o.a)(t,void 0).lift(new s)}var s=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new f(t))},t}(),f=function(t){function n(n){var e=t.call(this,n)||this;return e.hasFirst=!1,e.observables=[],e.subscriptions=[],e}return r.a(n,t),n.prototype._next=function(t){this.observables.push(t)},n.prototype._complete=function(){var t=this.observables,n=t.length;if(0===n)this.destination.complete();else{for(var e=0;e<n&&!this.hasFirst;e++){var r=t[e],i=Object(c.a)(this,r,r,e);this.subscriptions&&this.subscriptions.push(i),this.add(i)}this.observables=null}},n.prototype.notifyNext=function(t,n,e,r,i){if(!this.hasFirst){this.hasFirst=!0;for(var o=0;o<this.subscriptions.length;o++)if(o!==e){var u=this.subscriptions[o];u.unsubscribe(),this.remove(u)}this.subscriptions=null}this.destination.next(n)},n}(u.a)},XlPw:function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=e("6blF");function i(t,n){return n?new r.a((function(e){return n.schedule(o,0,{error:t,subscriber:e})})):new r.a((function(n){return n.error(t)}))}function o(t){var n=t.error;t.subscriber.error(n)}},Zn8D:function(t,n,e){"use strict";e.d(n,"a",(function(){return o}));var r=e("psW0"),i=e("mChF");function o(t){return void 0===t&&(t=Number.POSITIVE_INFINITY),Object(r.a)(i.a,t)}},ahDk:function(t,n,e){"use strict";e.r(n),e.d(n,"audit",(function(){return u})),e.d(n,"auditTime",(function(){return l})),e.d(n,"buffer",(function(){return h})),e.d(n,"bufferCount",(function(){return v})),e.d(n,"bufferTime",(function(){return x})),e.d(n,"bufferToggle",(function(){return A})),e.d(n,"bufferWhen",(function(){return j})),e.d(n,"catchError",(function(){return z})),e.d(n,"combineAll",(function(){return B})),e.d(n,"combineLatest",(function(){return L})),e.d(n,"concat",(function(){return G})),e.d(n,"concatAll",(function(){return W.a})),e.d(n,"concatMap",(function(){return X})),e.d(n,"concatMapTo",(function(){return K})),e.d(n,"count",(function(){return Z})),e.d(n,"debounce",(function(){return J})),e.d(n,"debounceTime",(function(){return et})),e.d(n,"defaultIfEmpty",(function(){return ut})),e.d(n,"delay",(function(){return lt})),e.d(n,"delayWhen",(function(){return vt})),e.d(n,"dematerialize",(function(){return xt})),e.d(n,"distinct",(function(){return St})),e.d(n,"distinctUntilChanged",(function(){return Et})),e.d(n,"distinctUntilKeyChanged",(function(){return kt})),e.d(n,"elementAt",(function(){return qt})),e.d(n,"endWith",(function(){return Yt})),e.d(n,"every",(function(){return Gt})),e.d(n,"exhaust",(function(){return Xt})),e.d(n,"exhaustMap",(function(){return $t})),e.d(n,"expand",(function(){return nn})),e.d(n,"filter",(function(){return jt.a})),e.d(n,"finalize",(function(){return on})),e.d(n,"find",(function(){return an})),e.d(n,"findIndex",(function(){return ln})),e.d(n,"first",(function(){return dn})),e.d(n,"groupBy",(function(){return pn.b})),e.d(n,"ignoreElements",(function(){return bn})),e.d(n,"isEmpty",(function(){return gn})),e.d(n,"last",(function(){return Sn})),e.d(n,"map",(function(){return Qt.a})),e.d(n,"mapTo",(function(){return Tn})),e.d(n,"materialize",(function(){return Cn})),e.d(n,"max",(function(){return zn})),e.d(n,"merge",(function(){return Vn})),e.d(n,"mergeAll",(function(){return Rn.a})),e.d(n,"mergeMap",(function(){return H.a})),e.d(n,"flatMap",(function(){return H.a})),e.d(n,"mergeMapTo",(function(){return Bn})),e.d(n,"mergeScan",(function(){return Un})),e.d(n,"min",(function(){return Yn})),e.d(n,"multicast",(function(){return Wn})),e.d(n,"observeOn",(function(){return Xn.b})),e.d(n,"onErrorResumeNext",(function(){return Kn})),e.d(n,"pairwise",(function(){return $n})),e.d(n,"partition",(function(){return ee})),e.d(n,"pluck",(function(){return re})),e.d(n,"publish",(function(){return ue})),e.d(n,"publishBehavior",(function(){return ae})),e.d(n,"publishLast",(function(){return fe})),e.d(n,"publishReplay",(function(){return he})),e.d(n,"race",(function(){return pe})),e.d(n,"reduce",(function(){return Fn})),e.d(n,"repeat",(function(){return be})),e.d(n,"repeatWhen",(function(){return ge})),e.d(n,"retry",(function(){return xe})),e.d(n,"retryWhen",(function(){return Se})),e.d(n,"refCount",(function(){return Ee.a})),e.d(n,"sample",(function(){return Ce})),e.d(n,"sampleTime",(function(){return Oe})),e.d(n,"scan",(function(){return On})),e.d(n,"sequenceEqual",(function(){return Fe})),e.d(n,"share",(function(){return Be})),e.d(n,"shareReplay",(function(){return Ue})),e.d(n,"single",(function(){return qe})),e.d(n,"skip",(function(){return Ge})),e.d(n,"skipLast",(function(){return Xe})),e.d(n,"skipUntil",(function(){return Qe})),e.d(n,"skipWhile",(function(){return tr})),e.d(n,"startWith",(function(){return rr})),e.d(n,"subscribeOn",(function(){return cr})),e.d(n,"switchAll",(function(){return hr})),e.d(n,"switchMap",(function(){return sr})),e.d(n,"switchMapTo",(function(){return dr})),e.d(n,"take",(function(){return Rt})),e.d(n,"takeLast",(function(){return xn})),e.d(n,"takeUntil",(function(){return pr})),e.d(n,"takeWhile",(function(){return yr})),e.d(n,"tap",(function(){return wr})),e.d(n,"throttle",(function(){return Nr})),e.d(n,"throttleTime",(function(){return Ar})),e.d(n,"throwIfEmpty",(function(){return Pt})),e.d(n,"timeInterval",(function(){return Pr})),e.d(n,"timeout",(function(){return Ur})),e.d(n,"timeoutWith",(function(){return Dr})),e.d(n,"timestamp",(function(){return qr})),e.d(n,"toArray",(function(){return Gr})),e.d(n,"window",(function(){return Wr})),e.d(n,"windowCount",(function(){return Kr})),e.d(n,"windowTime",(function(){return $r})),e.d(n,"windowToggle",(function(){return oi})),e.d(n,"windowWhen",(function(){return ai})),e.d(n,"withLatestFrom",(function(){return li})),e.d(n,"zip",(function(){return bi})),e.d(n,"zipAll",(function(){return vi}));var r=e("mrSG"),i=e("MGBS"),o=e("zotm");function u(t){return function(n){return n.lift(new c(t))}}var c=function(){function t(t){this.durationSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new a(t,this.durationSelector))},t}(),a=function(t){function n(n,e){var r=t.call(this,n)||this;return r.durationSelector=e,r.hasValue=!1,r}return r.a(n,t),n.prototype._next=function(t){if(this.value=t,this.hasValue=!0,!this.throttled){var n=void 0;try{n=(0,this.durationSelector)(t)}catch(t){return this.destination.error(t)}var e=Object(o.a)(this,n);!e||e.closed?this.clearThrottle():this.add(this.throttled=e)}},n.prototype.clearThrottle=function(){var t=this.value,n=this.hasValue,e=this.throttled;e&&(this.remove(e),this.throttled=null,e.unsubscribe()),n&&(this.value=null,this.hasValue=!1,this.destination.next(t))},n.prototype.notifyNext=function(t,n,e,r){this.clearThrottle()},n.prototype.notifyComplete=function(){this.clearThrottle()},n}(i.a),s=e("T1DM"),f=e("gI3B");function l(t,n){return void 0===n&&(n=s.a),u((function(){return Object(f.a)(t,n)}))}function h(t){return function(n){return n.lift(new d(t))}}var d=function(){function t(t){this.closingNotifier=t}return t.prototype.call=function(t,n){return n.subscribe(new p(t,this.closingNotifier))},t}(),p=function(t){function n(n,e){var r=t.call(this,n)||this;return r.buffer=[],r.add(Object(o.a)(r,e)),r}return r.a(n,t),n.prototype._next=function(t){this.buffer.push(t)},n.prototype.notifyNext=function(t,n,e,r,i){var o=this.buffer;this.buffer=[],this.destination.next(o)},n}(i.a),b=e("FFOo");function v(t,n){return void 0===n&&(n=null),function(e){return e.lift(new y(t,n))}}var y=function(){function t(t,n){this.bufferSize=t,this.startBufferEvery=n,this.subscriberClass=n&&t!==n?_:g}return t.prototype.call=function(t,n){return n.subscribe(new this.subscriberClass(t,this.bufferSize,this.startBufferEvery))},t}(),g=function(t){function n(n,e){var r=t.call(this,n)||this;return r.bufferSize=e,r.buffer=[],r}return r.a(n,t),n.prototype._next=function(t){var n=this.buffer;n.push(t),n.length==this.bufferSize&&(this.destination.next(n),this.buffer=[])},n.prototype._complete=function(){var n=this.buffer;n.length>0&&this.destination.next(n),t.prototype._complete.call(this)},n}(b.a),_=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.bufferSize=e,i.startBufferEvery=r,i.buffers=[],i.count=0,i}return r.a(n,t),n.prototype._next=function(t){var n=this.bufferSize,e=this.startBufferEvery,r=this.buffers,i=this.count;this.count++,i%e==0&&r.push([]);for(var o=r.length;o--;){var u=r[o];u.push(t),u.length===n&&(r.splice(o,1),this.destination.next(u))}},n.prototype._complete=function(){for(var n=this.buffers,e=this.destination;n.length>0;){var r=n.shift();r.length>0&&e.next(r)}t.prototype._complete.call(this)},n}(b.a),m=e("nkY7");function x(t){var n=arguments.length,e=s.a;Object(m.a)(arguments[arguments.length-1])&&(e=arguments[arguments.length-1],n--);var r=null;n>=2&&(r=arguments[1]);var i=Number.POSITIVE_INFINITY;return n>=3&&(i=arguments[2]),function(n){return n.lift(new w(t,r,i,e))}}var w=function(){function t(t,n,e,r){this.bufferTimeSpan=t,this.bufferCreationInterval=n,this.maxBufferSize=e,this.scheduler=r}return t.prototype.call=function(t,n){return n.subscribe(new S(t,this.bufferTimeSpan,this.bufferCreationInterval,this.maxBufferSize,this.scheduler))},t}(),M=function(){return function(){this.buffer=[]}}(),S=function(t){function n(n,e,r,i,o){var u=t.call(this,n)||this;u.bufferTimeSpan=e,u.bufferCreationInterval=r,u.maxBufferSize=i,u.scheduler=o,u.contexts=[];var c=u.openContext();if(u.timespanOnly=null==r||r<0,u.timespanOnly){var a={subscriber:u,context:c,bufferTimeSpan:e};u.add(c.closeAction=o.schedule(T,e,a))}else{var s={subscriber:u,context:c},f={bufferTimeSpan:e,bufferCreationInterval:r,subscriber:u,scheduler:o};u.add(c.closeAction=o.schedule(E,e,s)),u.add(o.schedule(N,r,f))}return u}return r.a(n,t),n.prototype._next=function(t){for(var n,e=this.contexts,r=e.length,i=0;i<r;i++){var o=e[i],u=o.buffer;u.push(t),u.length==this.maxBufferSize&&(n=o)}n&&this.onBufferFull(n)},n.prototype._error=function(n){this.contexts.length=0,t.prototype._error.call(this,n)},n.prototype._complete=function(){for(var n=this.contexts,e=this.destination;n.length>0;){var r=n.shift();e.next(r.buffer)}t.prototype._complete.call(this)},n.prototype._unsubscribe=function(){this.contexts=null},n.prototype.onBufferFull=function(t){this.closeContext(t);var n=t.closeAction;if(n.unsubscribe(),this.remove(n),!this.closed&&this.timespanOnly){t=this.openContext();var e=this.bufferTimeSpan,r={subscriber:this,context:t,bufferTimeSpan:e};this.add(t.closeAction=this.scheduler.schedule(T,e,r))}},n.prototype.openContext=function(){var t=new M;return this.contexts.push(t),t},n.prototype.closeContext=function(t){this.destination.next(t.buffer);var n=this.contexts;(n?n.indexOf(t):-1)>=0&&n.splice(n.indexOf(t),1)},n}(b.a);function T(t){var n=t.subscriber,e=t.context;e&&n.closeContext(e),n.closed||(t.context=n.openContext(),t.context.closeAction=this.schedule(t,t.bufferTimeSpan))}function N(t){var n=t.bufferCreationInterval,e=t.bufferTimeSpan,r=t.subscriber,i=t.scheduler,o=r.openContext();r.closed||(r.add(o.closeAction=i.schedule(E,e,{subscriber:r,context:o})),this.schedule(t,n))}function E(t){var n=t.subscriber,e=t.context;n.closeContext(e)}var C=e("pugT");function A(t,n){return function(e){return e.lift(new k(t,n))}}var k=function(){function t(t,n){this.openings=t,this.closingSelector=n}return t.prototype.call=function(t,n){return n.subscribe(new O(t,this.openings,this.closingSelector))},t}(),O=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.openings=e,i.closingSelector=r,i.contexts=[],i.add(Object(o.a)(i,e)),i}return r.a(n,t),n.prototype._next=function(t){for(var n=this.contexts,e=n.length,r=0;r<e;r++)n[r].buffer.push(t)},n.prototype._error=function(n){for(var e=this.contexts;e.length>0;){var r=e.shift();r.subscription.unsubscribe(),r.buffer=null,r.subscription=null}this.contexts=null,t.prototype._error.call(this,n)},n.prototype._complete=function(){for(var n=this.contexts;n.length>0;){var e=n.shift();this.destination.next(e.buffer),e.subscription.unsubscribe(),e.buffer=null,e.subscription=null}this.contexts=null,t.prototype._complete.call(this)},n.prototype.notifyNext=function(t,n,e,r,i){t?this.closeBuffer(t):this.openBuffer(n)},n.prototype.notifyComplete=function(t){this.closeBuffer(t.context)},n.prototype.openBuffer=function(t){try{var n=this.closingSelector.call(this,t);n&&this.trySubscribe(n)}catch(t){this._error(t)}},n.prototype.closeBuffer=function(t){var n=this.contexts;if(n&&t){var e=t.buffer,r=t.subscription;this.destination.next(e),n.splice(n.indexOf(t),1),this.remove(r),r.unsubscribe()}},n.prototype.trySubscribe=function(t){var n=this.contexts,e=new C.a,r={buffer:[],subscription:e};n.push(r);var i=Object(o.a)(this,t,r);!i||i.closed?this.closeBuffer(r):(i.context=r,this.add(i),e.add(i))},n}(i.a);function j(t){return function(n){return n.lift(new I(t))}}var I=function(){function t(t){this.closingSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new P(t,this.closingSelector))},t}(),P=function(t){function n(n,e){var r=t.call(this,n)||this;return r.closingSelector=e,r.subscribing=!1,r.openBuffer(),r}return r.a(n,t),n.prototype._next=function(t){this.buffer.push(t)},n.prototype._complete=function(){var n=this.buffer;n&&this.destination.next(n),t.prototype._complete.call(this)},n.prototype._unsubscribe=function(){this.buffer=null,this.subscribing=!1},n.prototype.notifyNext=function(t,n,e,r,i){this.openBuffer()},n.prototype.notifyComplete=function(){this.subscribing?this.complete():this.openBuffer()},n.prototype.openBuffer=function(){var t=this.closingSubscription;t&&(this.remove(t),t.unsubscribe());var n,e=this.buffer;this.buffer&&this.destination.next(e),this.buffer=[];try{n=(0,this.closingSelector)()}catch(t){return this.error(t)}t=new C.a,this.closingSubscription=t,this.add(t),this.subscribing=!0,t.add(Object(o.a)(this,n)),this.subscribing=!1},n}(i.a),F=e("rPjj");function z(t){return function(n){var e=new D(t),r=n.lift(e);return e.caught=r}}var D=function(){function t(t){this.selector=t}return t.prototype.call=function(t,n){return n.subscribe(new V(t,this.selector,this.caught))},t}(),V=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.selector=e,i.caught=r,i}return r.a(n,t),n.prototype.error=function(n){if(!this.isStopped){var e=void 0;try{e=this.selector(n,this.caught)}catch(n){return void t.prototype.error.call(this,n)}this._unsubscribeAndRecycle();var r=new F.a(this,void 0,void 0);this.add(r);var i=Object(o.a)(this,e,void 0,void 0,r);i!==r&&this.add(i)}},n}(i.a),R=e("dzgT");function B(t){return function(n){return n.lift(new R.a(t))}}var U=e("isby"),q=e("0/uQ");function L(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=null;return"function"==typeof t[t.length-1]&&(e=t.pop()),1===t.length&&Object(U.a)(t[0])&&(t=t[0].slice()),function(n){return n.lift.call(Object(q.a)([n].concat(t)),new R.a(e))}}var Y=e("dEwP");function G(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return n.lift.call(Y.a.apply(void 0,[n].concat(t)))}}var W=e("Txjg"),H=e("psW0");function X(t,n){return Object(H.a)(t,n,1)}function K(t,n){return X((function(){return t}),n)}function Z(t){return function(n){return n.lift(new Q(t,n))}}var Q=function(){function t(t,n){this.predicate=t,this.source=n}return t.prototype.call=function(t,n){return n.subscribe(new $(t,this.predicate,this.source))},t}(),$=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.predicate=e,i.source=r,i.count=0,i.index=0,i}return r.a(n,t),n.prototype._next=function(t){this.predicate?this._tryPredicate(t):this.count++},n.prototype._tryPredicate=function(t){var n;try{n=this.predicate(t,this.index++,this.source)}catch(t){return void this.destination.error(t)}n&&this.count++},n.prototype._complete=function(){this.destination.next(this.count),this.destination.complete()},n}(b.a);function J(t){return function(n){return n.lift(new tt(t))}}var tt=function(){function t(t){this.durationSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new nt(t,this.durationSelector))},t}(),nt=function(t){function n(n,e){var r=t.call(this,n)||this;return r.durationSelector=e,r.hasValue=!1,r.durationSubscription=null,r}return r.a(n,t),n.prototype._next=function(t){try{var n=this.durationSelector.call(this,t);n&&this._tryNext(t,n)}catch(t){this.destination.error(t)}},n.prototype._complete=function(){this.emitValue(),this.destination.complete()},n.prototype._tryNext=function(t,n){var e=this.durationSubscription;this.value=t,this.hasValue=!0,e&&(e.unsubscribe(),this.remove(e)),(e=Object(o.a)(this,n))&&!e.closed&&this.add(this.durationSubscription=e)},n.prototype.notifyNext=function(t,n,e,r,i){this.emitValue()},n.prototype.notifyComplete=function(){this.emitValue()},n.prototype.emitValue=function(){if(this.hasValue){var n=this.value,e=this.durationSubscription;e&&(this.durationSubscription=null,e.unsubscribe(),this.remove(e)),this.value=null,this.hasValue=!1,t.prototype._next.call(this,n)}},n}(i.a);function et(t,n){return void 0===n&&(n=s.a),function(e){return e.lift(new rt(t,n))}}var rt=function(){function t(t,n){this.dueTime=t,this.scheduler=n}return t.prototype.call=function(t,n){return n.subscribe(new it(t,this.dueTime,this.scheduler))},t}(),it=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.dueTime=e,i.scheduler=r,i.debouncedSubscription=null,i.lastValue=null,i.hasValue=!1,i}return r.a(n,t),n.prototype._next=function(t){this.clearDebounce(),this.lastValue=t,this.hasValue=!0,this.add(this.debouncedSubscription=this.scheduler.schedule(ot,this.dueTime,this))},n.prototype._complete=function(){this.debouncedNext(),this.destination.complete()},n.prototype.debouncedNext=function(){if(this.clearDebounce(),this.hasValue){var t=this.lastValue;this.lastValue=null,this.hasValue=!1,this.destination.next(t)}},n.prototype.clearDebounce=function(){var t=this.debouncedSubscription;null!==t&&(this.remove(t),t.unsubscribe(),this.debouncedSubscription=null)},n}(b.a);function ot(t){t.debouncedNext()}function ut(t){return void 0===t&&(t=null),function(n){return n.lift(new ct(t))}}var ct=function(){function t(t){this.defaultValue=t}return t.prototype.call=function(t,n){return n.subscribe(new at(t,this.defaultValue))},t}(),at=function(t){function n(n,e){var r=t.call(this,n)||this;return r.defaultValue=e,r.isEmpty=!0,r}return r.a(n,t),n.prototype._next=function(t){this.isEmpty=!1,this.destination.next(t)},n.prototype._complete=function(){this.isEmpty&&this.destination.next(this.defaultValue),this.destination.complete()},n}(b.a);function st(t){return t instanceof Date&&!isNaN(+t)}var ft=e("60iU");function lt(t,n){void 0===n&&(n=s.a);var e=st(t)?+t-n.now():Math.abs(t);return function(t){return t.lift(new ht(e,n))}}var ht=function(){function t(t,n){this.delay=t,this.scheduler=n}return t.prototype.call=function(t,n){return n.subscribe(new dt(t,this.delay,this.scheduler))},t}(),dt=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.delay=e,i.scheduler=r,i.queue=[],i.active=!1,i.errored=!1,i}return r.a(n,t),n.dispatch=function(t){for(var n=t.source,e=n.queue,r=t.scheduler,i=t.destination;e.length>0&&e[0].time-r.now()<=0;)e.shift().notification.observe(i);if(e.length>0){var o=Math.max(0,e[0].time-r.now());this.schedule(t,o)}else this.unsubscribe(),n.active=!1},n.prototype._schedule=function(t){this.active=!0,this.destination.add(t.schedule(n.dispatch,this.delay,{source:this,destination:this.destination,scheduler:t}))},n.prototype.scheduleNotification=function(t){if(!0!==this.errored){var n=this.scheduler,e=new pt(n.now()+this.delay,t);this.queue.push(e),!1===this.active&&this._schedule(n)}},n.prototype._next=function(t){this.scheduleNotification(ft.a.createNext(t))},n.prototype._error=function(t){this.errored=!0,this.queue=[],this.destination.error(t),this.unsubscribe()},n.prototype._complete=function(){this.scheduleNotification(ft.a.createComplete()),this.unsubscribe()},n}(b.a),pt=function(){return function(t,n){this.time=t,this.notification=n}}(),bt=e("6blF");function vt(t,n){return n?function(e){return new _t(e,n).lift(new yt(t))}:function(n){return n.lift(new yt(t))}}var yt=function(){function t(t){this.delayDurationSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new gt(t,this.delayDurationSelector))},t}(),gt=function(t){function n(n,e){var r=t.call(this,n)||this;return r.delayDurationSelector=e,r.completed=!1,r.delayNotifierSubscriptions=[],r.index=0,r}return r.a(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.destination.next(t),this.removeSubscription(i),this.tryComplete()},n.prototype.notifyError=function(t,n){this._error(t)},n.prototype.notifyComplete=function(t){var n=this.removeSubscription(t);n&&this.destination.next(n),this.tryComplete()},n.prototype._next=function(t){var n=this.index++;try{var e=this.delayDurationSelector(t,n);e&&this.tryDelay(e,t)}catch(t){this.destination.error(t)}},n.prototype._complete=function(){this.completed=!0,this.tryComplete(),this.unsubscribe()},n.prototype.removeSubscription=function(t){t.unsubscribe();var n=this.delayNotifierSubscriptions.indexOf(t);return-1!==n&&this.delayNotifierSubscriptions.splice(n,1),t.outerValue},n.prototype.tryDelay=function(t,n){var e=Object(o.a)(this,t,n);e&&!e.closed&&(this.destination.add(e),this.delayNotifierSubscriptions.push(e))},n.prototype.tryComplete=function(){this.completed&&0===this.delayNotifierSubscriptions.length&&this.destination.complete()},n}(i.a),_t=function(t){function n(n,e){var r=t.call(this)||this;return r.source=n,r.subscriptionDelay=e,r}return r.a(n,t),n.prototype._subscribe=function(t){this.subscriptionDelay.subscribe(new mt(t,this.source))},n}(bt.a),mt=function(t){function n(n,e){var r=t.call(this)||this;return r.parent=n,r.source=e,r.sourceSubscribed=!1,r}return r.a(n,t),n.prototype._next=function(t){this.subscribeToSource()},n.prototype._error=function(t){this.unsubscribe(),this.parent.error(t)},n.prototype._complete=function(){this.unsubscribe(),this.subscribeToSource()},n.prototype.subscribeToSource=function(){this.sourceSubscribed||(this.sourceSubscribed=!0,this.unsubscribe(),this.source.subscribe(this.parent))},n}(b.a);function xt(){return function(t){return t.lift(new wt)}}var wt=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new Mt(t))},t}(),Mt=function(t){function n(n){return t.call(this,n)||this}return r.a(n,t),n.prototype._next=function(t){t.observe(this.destination)},n}(b.a);function St(t,n){return function(e){return e.lift(new Tt(t,n))}}var Tt=function(){function t(t,n){this.keySelector=t,this.flushes=n}return t.prototype.call=function(t,n){return n.subscribe(new Nt(t,this.keySelector,this.flushes))},t}(),Nt=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.keySelector=e,i.values=new Set,r&&i.add(Object(o.a)(i,r)),i}return r.a(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.values.clear()},n.prototype.notifyError=function(t,n){this._error(t)},n.prototype._next=function(t){this.keySelector?this._useKeySelector(t):this._finalizeNext(t,t)},n.prototype._useKeySelector=function(t){var n,e=this.destination;try{n=this.keySelector(t)}catch(t){return void e.error(t)}this._finalizeNext(n,t)},n.prototype._finalizeNext=function(t,n){var e=this.values;e.has(t)||(e.add(t),this.destination.next(n))},n}(i.a);function Et(t,n){return function(e){return e.lift(new Ct(t,n))}}var Ct=function(){function t(t,n){this.compare=t,this.keySelector=n}return t.prototype.call=function(t,n){return n.subscribe(new At(t,this.compare,this.keySelector))},t}(),At=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.keySelector=r,i.hasKey=!1,"function"==typeof e&&(i.compare=e),i}return r.a(n,t),n.prototype.compare=function(t,n){return t===n},n.prototype._next=function(t){var n;try{var e=this.keySelector;n=e?e(t):t}catch(t){return this.destination.error(t)}var r=!1;if(this.hasKey)try{r=(0,this.compare)(this.key,n)}catch(t){return this.destination.error(t)}else this.hasKey=!0;r||(this.key=n,this.destination.next(t))},n}(b.a);function kt(t,n){return Et((function(e,r){return n?n(e[t],r[t]):e[t]===r[t]}))}var Ot=e("b7mW"),jt=e("VnD/"),It=e("3fWJ");function Pt(t){return void 0===t&&(t=Dt),function(n){return n.lift(new Ft(t))}}var Ft=function(){function t(t){this.errorFactory=t}return t.prototype.call=function(t,n){return n.subscribe(new zt(t,this.errorFactory))},t}(),zt=function(t){function n(n,e){var r=t.call(this,n)||this;return r.errorFactory=e,r.hasValue=!1,r}return r.a(n,t),n.prototype._next=function(t){this.hasValue=!0,this.destination.next(t)},n.prototype._complete=function(){if(this.hasValue)return this.destination.complete();var t=void 0;try{t=this.errorFactory()}catch(n){t=n}this.destination.error(t)},n}(b.a);function Dt(){return new It.a}var Vt=e("G5J1");function Rt(t){return function(n){return 0===t?Object(Vt.b)():n.lift(new Bt(t))}}var Bt=function(){function t(t){if(this.total=t,this.total<0)throw new Ot.a}return t.prototype.call=function(t,n){return n.subscribe(new Ut(t,this.total))},t}(),Ut=function(t){function n(n,e){var r=t.call(this,n)||this;return r.total=e,r.count=0,r}return r.a(n,t),n.prototype._next=function(t){var n=this.total,e=++this.count;e<=n&&(this.destination.next(t),e===n&&(this.destination.complete(),this.unsubscribe()))},n}(b.a);function qt(t,n){if(t<0)throw new Ot.a;var e=arguments.length>=2;return function(r){return r.pipe(Object(jt.a)((function(n,e){return e===t})),Rt(1),e?ut(n):Pt((function(){return new Ot.a})))}}var Lt=e("F/XL");function Yt(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return Object(Y.a)(n,Lt.a.apply(void 0,t))}}function Gt(t,n){return function(e){return e.lift(new Wt(t,n,e))}}var Wt=function(){function t(t,n,e){this.predicate=t,this.thisArg=n,this.source=e}return t.prototype.call=function(t,n){return n.subscribe(new Ht(t,this.predicate,this.thisArg,this.source))},t}(),Ht=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o.predicate=e,o.thisArg=r,o.source=i,o.index=0,o.thisArg=r||o,o}return r.a(n,t),n.prototype.notifyComplete=function(t){this.destination.next(t),this.destination.complete()},n.prototype._next=function(t){var n=!1;try{n=this.predicate.call(this.thisArg,t,this.index++,this.source)}catch(t){return void this.destination.error(t)}n||this.notifyComplete(!1)},n.prototype._complete=function(){this.notifyComplete(!0)},n}(b.a);function Xt(){return function(t){return t.lift(new Kt)}}var Kt=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new Zt(t))},t}(),Zt=function(t){function n(n){var e=t.call(this,n)||this;return e.hasCompleted=!1,e.hasSubscription=!1,e}return r.a(n,t),n.prototype._next=function(t){this.hasSubscription||(this.hasSubscription=!0,this.add(Object(o.a)(this,t)))},n.prototype._complete=function(){this.hasCompleted=!0,this.hasSubscription||this.destination.complete()},n.prototype.notifyComplete=function(t){this.remove(t),this.hasSubscription=!1,this.hasCompleted&&this.destination.complete()},n}(i.a),Qt=e("67Y/");function $t(t,n){return n?function(e){return e.pipe($t((function(e,r){return Object(q.a)(t(e,r)).pipe(Object(Qt.a)((function(t,i){return n(e,t,r,i)})))})))}:function(n){return n.lift(new Jt(t))}}var Jt=function(){function t(t){this.project=t}return t.prototype.call=function(t,n){return n.subscribe(new tn(t,this.project))},t}(),tn=function(t){function n(n,e){var r=t.call(this,n)||this;return r.project=e,r.hasSubscription=!1,r.hasCompleted=!1,r.index=0,r}return r.a(n,t),n.prototype._next=function(t){this.hasSubscription||this.tryNext(t)},n.prototype.tryNext=function(t){var n,e=this.index++;try{n=this.project(t,e)}catch(t){return void this.destination.error(t)}this.hasSubscription=!0,this._innerSub(n,t,e)},n.prototype._innerSub=function(t,n,e){var r=new F.a(this,n,e),i=this.destination;i.add(r);var u=Object(o.a)(this,t,void 0,void 0,r);u!==r&&i.add(u)},n.prototype._complete=function(){this.hasCompleted=!0,this.hasSubscription||this.destination.complete(),this.unsubscribe()},n.prototype.notifyNext=function(t,n,e,r,i){this.destination.next(n)},n.prototype.notifyError=function(t){this.destination.error(t)},n.prototype.notifyComplete=function(t){this.destination.remove(t),this.hasSubscription=!1,this.hasCompleted&&this.destination.complete()},n}(i.a);function nn(t,n,e){return void 0===n&&(n=Number.POSITIVE_INFINITY),void 0===e&&(e=void 0),n=(n||0)<1?Number.POSITIVE_INFINITY:n,function(r){return r.lift(new en(t,n,e))}}var en=function(){function t(t,n,e){this.project=t,this.concurrent=n,this.scheduler=e}return t.prototype.call=function(t,n){return n.subscribe(new rn(t,this.project,this.concurrent,this.scheduler))},t}(),rn=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o.project=e,o.concurrent=r,o.scheduler=i,o.index=0,o.active=0,o.hasCompleted=!1,r<Number.POSITIVE_INFINITY&&(o.buffer=[]),o}return r.a(n,t),n.dispatch=function(t){var n=t.subscriber,e=t.result,r=t.value,i=t.index;n.subscribeToProjection(e,r,i)},n.prototype._next=function(t){var e=this.destination;if(e.closed)this._complete();else{var r=this.index++;if(this.active<this.concurrent){e.next(t);try{var i=(0,this.project)(t,r);if(this.scheduler){var o={subscriber:this,result:i,value:t,index:r};this.destination.add(this.scheduler.schedule(n.dispatch,0,o))}else this.subscribeToProjection(i,t,r)}catch(t){e.error(t)}}else this.buffer.push(t)}},n.prototype.subscribeToProjection=function(t,n,e){this.active++,this.destination.add(Object(o.a)(this,t,n,e))},n.prototype._complete=function(){this.hasCompleted=!0,this.hasCompleted&&0===this.active&&this.destination.complete(),this.unsubscribe()},n.prototype.notifyNext=function(t,n,e,r,i){this._next(n)},n.prototype.notifyComplete=function(t){var n=this.buffer;this.destination.remove(t),this.active--,n&&n.length>0&&this._next(n.shift()),this.hasCompleted&&0===this.active&&this.destination.complete()},n}(i.a);function on(t){return function(n){return n.lift(new un(t))}}var un=function(){function t(t){this.callback=t}return t.prototype.call=function(t,n){return n.subscribe(new cn(t,this.callback))},t}(),cn=function(t){function n(n,e){var r=t.call(this,n)||this;return r.add(new C.a(e)),r}return r.a(n,t),n}(b.a);function an(t,n){if("function"!=typeof t)throw new TypeError("predicate is not a function");return function(e){return e.lift(new sn(t,e,!1,n))}}var sn=function(){function t(t,n,e,r){this.predicate=t,this.source=n,this.yieldIndex=e,this.thisArg=r}return t.prototype.call=function(t,n){return n.subscribe(new fn(t,this.predicate,this.source,this.yieldIndex,this.thisArg))},t}(),fn=function(t){function n(n,e,r,i,o){var u=t.call(this,n)||this;return u.predicate=e,u.source=r,u.yieldIndex=i,u.thisArg=o,u.index=0,u}return r.a(n,t),n.prototype.notifyComplete=function(t){var n=this.destination;n.next(t),n.complete(),this.unsubscribe()},n.prototype._next=function(t){var n=this.predicate,e=this.thisArg,r=this.index++;try{n.call(e||this,t,r,this.source)&&this.notifyComplete(this.yieldIndex?r:t)}catch(t){this.destination.error(t)}},n.prototype._complete=function(){this.notifyComplete(this.yieldIndex?-1:void 0)},n}(b.a);function ln(t,n){return function(e){return e.lift(new sn(t,e,!0,n))}}var hn=e("mChF");function dn(t,n){var e=arguments.length>=2;return function(r){return r.pipe(t?Object(jt.a)((function(n,e){return t(n,e,r)})):hn.a,Rt(1),e?ut(n):Pt((function(){return new It.a})))}}var pn=e("IxPp");function bn(){return function(t){return t.lift(new vn)}}var vn=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new yn(t))},t}(),yn=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r.a(n,t),n.prototype._next=function(t){},n}(b.a);function gn(){return function(t){return t.lift(new _n)}}var _n=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new mn(t))},t}(),mn=function(t){function n(n){return t.call(this,n)||this}return r.a(n,t),n.prototype.notifyComplete=function(t){var n=this.destination;n.next(t),n.complete()},n.prototype._next=function(t){this.notifyComplete(!1)},n.prototype._complete=function(){this.notifyComplete(!0)},n}(b.a);function xn(t){return function(n){return 0===t?Object(Vt.b)():n.lift(new wn(t))}}var wn=function(){function t(t){if(this.total=t,this.total<0)throw new Ot.a}return t.prototype.call=function(t,n){return n.subscribe(new Mn(t,this.total))},t}(),Mn=function(t){function n(n,e){var r=t.call(this,n)||this;return r.total=e,r.ring=new Array,r.count=0,r}return r.a(n,t),n.prototype._next=function(t){var n=this.ring,e=this.total,r=this.count++;n.length<e?n.push(t):n[r%e]=t},n.prototype._complete=function(){var t=this.destination,n=this.count;if(n>0)for(var e=this.count>=this.total?this.total:this.count,r=this.ring,i=0;i<e;i++){var o=n++%e;t.next(r[o])}t.complete()},n}(b.a);function Sn(t,n){var e=arguments.length>=2;return function(r){return r.pipe(t?Object(jt.a)((function(n,e){return t(n,e,r)})):hn.a,xn(1),e?ut(n):Pt((function(){return new It.a})))}}function Tn(t){return function(n){return n.lift(new Nn(t))}}var Nn=function(){function t(t){this.value=t}return t.prototype.call=function(t,n){return n.subscribe(new En(t,this.value))},t}(),En=function(t){function n(n,e){var r=t.call(this,n)||this;return r.value=e,r}return r.a(n,t),n.prototype._next=function(t){this.destination.next(this.value)},n}(b.a);function Cn(){return function(t){return t.lift(new An)}}var An=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new kn(t))},t}(),kn=function(t){function n(n){return t.call(this,n)||this}return r.a(n,t),n.prototype._next=function(t){this.destination.next(ft.a.createNext(t))},n.prototype._error=function(t){var n=this.destination;n.next(ft.a.createError(t)),n.complete()},n.prototype._complete=function(){var t=this.destination;t.next(ft.a.createComplete()),t.complete()},n}(b.a);function On(t,n){var e=!1;return arguments.length>=2&&(e=!0),function(r){return r.lift(new jn(t,n,e))}}var jn=function(){function t(t,n,e){void 0===e&&(e=!1),this.accumulator=t,this.seed=n,this.hasSeed=e}return t.prototype.call=function(t,n){return n.subscribe(new In(t,this.accumulator,this.seed,this.hasSeed))},t}(),In=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o.accumulator=e,o._seed=r,o.hasSeed=i,o.index=0,o}return r.a(n,t),Object.defineProperty(n.prototype,"seed",{get:function(){return this._seed},set:function(t){this.hasSeed=!0,this._seed=t},enumerable:!0,configurable:!0}),n.prototype._next=function(t){if(this.hasSeed)return this._tryNext(t);this.seed=t,this.destination.next(t)},n.prototype._tryNext=function(t){var n,e=this.index++;try{n=this.accumulator(this.seed,t,e)}catch(t){this.destination.error(t)}this.seed=n,this.destination.next(n)},n}(b.a),Pn=e("y3By");function Fn(t,n){return arguments.length>=2?function(e){return Object(Pn.a)(On(t,n),xn(1),ut(n))(e)}:function(n){return Object(Pn.a)(On((function(n,e,r){return t(n,e,r+1)})),xn(1))(n)}}function zn(t){return Fn("function"==typeof t?function(n,e){return t(n,e)>0?n:e}:function(t,n){return t>n?t:n})}var Dn=e("p0ib");function Vn(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return n.lift.call(Dn.a.apply(void 0,[n].concat(t)))}}var Rn=e("Zn8D");function Bn(t,n,e){return void 0===e&&(e=Number.POSITIVE_INFINITY),"function"==typeof n?Object(H.a)((function(){return t}),n,e):("number"==typeof n&&(e=n),Object(H.a)((function(){return t}),e))}function Un(t,n,e){return void 0===e&&(e=Number.POSITIVE_INFINITY),function(r){return r.lift(new qn(t,n,e))}}var qn=function(){function t(t,n,e){this.accumulator=t,this.seed=n,this.concurrent=e}return t.prototype.call=function(t,n){return n.subscribe(new Ln(t,this.accumulator,this.seed,this.concurrent))},t}(),Ln=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o.accumulator=e,o.acc=r,o.concurrent=i,o.hasValue=!1,o.hasCompleted=!1,o.buffer=[],o.active=0,o.index=0,o}return r.a(n,t),n.prototype._next=function(t){if(this.active<this.concurrent){var n=this.index++,e=this.destination,r=void 0;try{r=(0,this.accumulator)(this.acc,t,n)}catch(t){return e.error(t)}this.active++,this._innerSub(r,t,n)}else this.buffer.push(t)},n.prototype._innerSub=function(t,n,e){var r=new F.a(this,n,e),i=this.destination;i.add(r);var u=Object(o.a)(this,t,void 0,void 0,r);u!==r&&i.add(u)},n.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&(!1===this.hasValue&&this.destination.next(this.acc),this.destination.complete()),this.unsubscribe()},n.prototype.notifyNext=function(t,n,e,r,i){var o=this.destination;this.acc=n,this.hasValue=!0,o.next(n)},n.prototype.notifyComplete=function(t){var n=this.buffer;this.destination.remove(t),this.active--,n.length>0?this._next(n.shift()):0===this.active&&this.hasCompleted&&(!1===this.hasValue&&this.destination.next(this.acc),this.destination.complete())},n}(i.a);function Yn(t){return Fn("function"==typeof t?function(n,e){return t(n,e)<0?n:e}:function(t,n){return t<n?t:n})}var Gn=e("KhEm");function Wn(t,n){return function(e){var r;if(r="function"==typeof t?t:function(){return t},"function"==typeof n)return e.lift(new Hn(r,n));var i=Object.create(e,Gn.b);return i.source=e,i.subjectFactory=r,i}}var Hn=function(){function t(t,n){this.subjectFactory=t,this.selector=n}return t.prototype.call=function(t,n){var e=this.selector,r=this.subjectFactory(),i=e(r).subscribe(t);return i.add(n.subscribe(r)),i},t}(),Xn=e("mZXl");function Kn(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return 1===t.length&&Object(U.a)(t[0])&&(t=t[0]),function(n){return n.lift(new Zn(t))}}var Zn=function(){function t(t){this.nextSources=t}return t.prototype.call=function(t,n){return n.subscribe(new Qn(t,this.nextSources))},t}(),Qn=function(t){function n(n,e){var r=t.call(this,n)||this;return r.destination=n,r.nextSources=e,r}return r.a(n,t),n.prototype.notifyError=function(t,n){this.subscribeToNextSource()},n.prototype.notifyComplete=function(t){this.subscribeToNextSource()},n.prototype._error=function(t){this.subscribeToNextSource(),this.unsubscribe()},n.prototype._complete=function(){this.subscribeToNextSource(),this.unsubscribe()},n.prototype.subscribeToNextSource=function(){var t=this.nextSources.shift();if(t){var n=new F.a(this,void 0,void 0),e=this.destination;e.add(n);var r=Object(o.a)(this,t,void 0,void 0,n);r!==n&&e.add(r)}else this.destination.complete()},n}(i.a);function $n(){return function(t){return t.lift(new Jn)}}var Jn=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new te(t))},t}(),te=function(t){function n(n){var e=t.call(this,n)||this;return e.hasPrev=!1,e}return r.a(n,t),n.prototype._next=function(t){var n;this.hasPrev?n=[this.prev,t]:this.hasPrev=!0,this.prev=t,n&&this.destination.next(n)},n}(b.a),ne=e("jFaF");function ee(t,n){return function(e){return[Object(jt.a)(t,n)(e),Object(jt.a)(Object(ne.a)(t,n))(e)]}}function re(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t.length;if(0===e)throw new Error("list of properties cannot be empty.");return function(n){return Object(Qt.a)(ie(t,e))(n)}}function ie(t,n){return function(e){for(var r=e,i=0;i<n;i++){var o=r[t[i]];if(void 0===o)return;r=o}return r}}var oe=e("K9Ia");function ue(t){return t?Wn((function(){return new oe.a}),t):Wn(new oe.a)}var ce=e("26FU");function ae(t){return function(n){return Wn(new ce.a(t))(n)}}var se=e("svcd");function fe(){return function(t){return Wn(new se.a)(t)}}var le=e("S5bw");function he(t,n,e,r){e&&"function"!=typeof e&&(r=e);var i="function"==typeof e?e:void 0,o=new le.a(t,n,r);return function(t){return Wn((function(){return o}),i)(t)}}var de=e("W0Ae");function pe(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return 1===t.length&&Object(U.a)(t[0])&&(t=t[0]),n.lift.call(de.a.apply(void 0,[n].concat(t)))}}function be(t){return void 0===t&&(t=-1),function(n){return 0===t?Object(Vt.b)():t<0?n.lift(new ve(-1,n)):n.lift(new ve(t-1,n))}}var ve=function(){function t(t,n){this.count=t,this.source=n}return t.prototype.call=function(t,n){return n.subscribe(new ye(t,this.count,this.source))},t}(),ye=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.count=e,i.source=r,i}return r.a(n,t),n.prototype.complete=function(){if(!this.isStopped){var n=this.source,e=this.count;if(0===e)return t.prototype.complete.call(this);e>-1&&(this.count=e-1),n.subscribe(this._unsubscribeAndRecycle())}},n}(b.a);function ge(t){return function(n){return n.lift(new _e(t))}}var _e=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,n){return n.subscribe(new me(t,this.notifier,n))},t}(),me=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.notifier=e,i.source=r,i.sourceIsBeingSubscribedTo=!0,i}return r.a(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.sourceIsBeingSubscribedTo=!0,this.source.subscribe(this)},n.prototype.notifyComplete=function(n){if(!1===this.sourceIsBeingSubscribedTo)return t.prototype.complete.call(this)},n.prototype.complete=function(){if(this.sourceIsBeingSubscribedTo=!1,!this.isStopped){if(this.retries||this.subscribeToRetries(),!this.retriesSubscription||this.retriesSubscription.closed)return t.prototype.complete.call(this);this._unsubscribeAndRecycle(),this.notifications.next()}},n.prototype._unsubscribe=function(){var t=this.notifications,n=this.retriesSubscription;t&&(t.unsubscribe(),this.notifications=null),n&&(n.unsubscribe(),this.retriesSubscription=null),this.retries=null},n.prototype._unsubscribeAndRecycle=function(){var n=this._unsubscribe;return this._unsubscribe=null,t.prototype._unsubscribeAndRecycle.call(this),this._unsubscribe=n,this},n.prototype.subscribeToRetries=function(){var n;this.notifications=new oe.a;try{n=(0,this.notifier)(this.notifications)}catch(n){return t.prototype.complete.call(this)}this.retries=n,this.retriesSubscription=Object(o.a)(this,n)},n}(i.a);function xe(t){return void 0===t&&(t=-1),function(n){return n.lift(new we(t,n))}}var we=function(){function t(t,n){this.count=t,this.source=n}return t.prototype.call=function(t,n){return n.subscribe(new Me(t,this.count,this.source))},t}(),Me=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.count=e,i.source=r,i}return r.a(n,t),n.prototype.error=function(n){if(!this.isStopped){var e=this.source,r=this.count;if(0===r)return t.prototype.error.call(this,n);r>-1&&(this.count=r-1),e.subscribe(this._unsubscribeAndRecycle())}},n}(b.a);function Se(t){return function(n){return n.lift(new Te(t,n))}}var Te=function(){function t(t,n){this.notifier=t,this.source=n}return t.prototype.call=function(t,n){return n.subscribe(new Ne(t,this.notifier,this.source))},t}(),Ne=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.notifier=e,i.source=r,i}return r.a(n,t),n.prototype.error=function(n){if(!this.isStopped){var e=this.errors,r=this.retries,i=this.retriesSubscription;if(r)this.errors=null,this.retriesSubscription=null;else{e=new oe.a;try{r=(0,this.notifier)(e)}catch(n){return t.prototype.error.call(this,n)}i=Object(o.a)(this,r)}this._unsubscribeAndRecycle(),this.errors=e,this.retries=r,this.retriesSubscription=i,e.next(n)}},n.prototype._unsubscribe=function(){var t=this.errors,n=this.retriesSubscription;t&&(t.unsubscribe(),this.errors=null),n&&(n.unsubscribe(),this.retriesSubscription=null),this.retries=null},n.prototype.notifyNext=function(t,n,e,r,i){var o=this._unsubscribe;this._unsubscribe=null,this._unsubscribeAndRecycle(),this._unsubscribe=o,this.source.subscribe(this)},n}(i.a),Ee=e("yGWI");function Ce(t){return function(n){return n.lift(new Ae(t))}}var Ae=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,n){var e=new ke(t),r=n.subscribe(e);return r.add(Object(o.a)(e,this.notifier)),r},t}(),ke=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.hasValue=!1,n}return r.a(n,t),n.prototype._next=function(t){this.value=t,this.hasValue=!0},n.prototype.notifyNext=function(t,n,e,r,i){this.emitValue()},n.prototype.notifyComplete=function(){this.emitValue()},n.prototype.emitValue=function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.value))},n}(i.a);function Oe(t,n){return void 0===n&&(n=s.a),function(e){return e.lift(new je(t,n))}}var je=function(){function t(t,n){this.period=t,this.scheduler=n}return t.prototype.call=function(t,n){return n.subscribe(new Ie(t,this.period,this.scheduler))},t}(),Ie=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.period=e,i.scheduler=r,i.hasValue=!1,i.add(r.schedule(Pe,e,{subscriber:i,period:e})),i}return r.a(n,t),n.prototype._next=function(t){this.lastValue=t,this.hasValue=!0},n.prototype.notifyNext=function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.lastValue))},n}(b.a);function Pe(t){var n=t.subscriber,e=t.period;n.notifyNext(),this.schedule(t,e)}function Fe(t,n){return function(e){return e.lift(new ze(t,n))}}var ze=function(){function t(t,n){this.compareTo=t,this.comparator=n}return t.prototype.call=function(t,n){return n.subscribe(new De(t,this.compareTo,this.comparator))},t}(),De=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.compareTo=e,i.comparator=r,i._a=[],i._b=[],i._oneComplete=!1,i.destination.add(e.subscribe(new Ve(n,i))),i}return r.a(n,t),n.prototype._next=function(t){this._oneComplete&&0===this._b.length?this.emit(!1):(this._a.push(t),this.checkValues())},n.prototype._complete=function(){this._oneComplete?this.emit(0===this._a.length&&0===this._b.length):this._oneComplete=!0,this.unsubscribe()},n.prototype.checkValues=function(){for(var t=this._a,n=this._b,e=this.comparator;t.length>0&&n.length>0;){var r=t.shift(),i=n.shift(),o=!1;try{o=e?e(r,i):r===i}catch(t){this.destination.error(t)}o||this.emit(!1)}},n.prototype.emit=function(t){var n=this.destination;n.next(t),n.complete()},n.prototype.nextB=function(t){this._oneComplete&&0===this._a.length?this.emit(!1):(this._b.push(t),this.checkValues())},n.prototype.completeB=function(){this._oneComplete?this.emit(0===this._a.length&&0===this._b.length):this._oneComplete=!0},n}(b.a),Ve=function(t){function n(n,e){var r=t.call(this,n)||this;return r.parent=e,r}return r.a(n,t),n.prototype._next=function(t){this.parent.nextB(t)},n.prototype._error=function(t){this.parent.error(t),this.unsubscribe()},n.prototype._complete=function(){this.parent.completeB(),this.unsubscribe()},n}(b.a);function Re(){return new oe.a}function Be(){return function(t){return Object(Ee.a)()(Wn(Re)(t))}}function Ue(t,n,e){var r;return r=t&&"object"==typeof t?t:{bufferSize:t,windowTime:n,refCount:!1,scheduler:e},function(t){return t.lift(function(t){var n,e,r=t.bufferSize,i=void 0===r?Number.POSITIVE_INFINITY:r,o=t.windowTime,u=void 0===o?Number.POSITIVE_INFINITY:o,c=t.refCount,a=t.scheduler,s=0,f=!1,l=!1;return function(t){s++,n&&!f||(f=!1,n=new le.a(i,u,a),e=t.subscribe({next:function(t){n.next(t)},error:function(t){f=!0,n.error(t)},complete:function(){l=!0,e=void 0,n.complete()}}));var r=n.subscribe(this);this.add((function(){s--,r.unsubscribe(),e&&!l&&c&&0===s&&(e.unsubscribe(),e=void 0,n=void 0)}))}}(r))}}function qe(t){return function(n){return n.lift(new Le(t,n))}}var Le=function(){function t(t,n){this.predicate=t,this.source=n}return t.prototype.call=function(t,n){return n.subscribe(new Ye(t,this.predicate,this.source))},t}(),Ye=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.predicate=e,i.source=r,i.seenValue=!1,i.index=0,i}return r.a(n,t),n.prototype.applySingleValue=function(t){this.seenValue?this.destination.error("Sequence contains more than one element"):(this.seenValue=!0,this.singleValue=t)},n.prototype._next=function(t){var n=this.index++;this.predicate?this.tryNext(t,n):this.applySingleValue(t)},n.prototype.tryNext=function(t,n){try{this.predicate(t,n,this.source)&&this.applySingleValue(t)}catch(t){this.destination.error(t)}},n.prototype._complete=function(){var t=this.destination;this.index>0?(t.next(this.seenValue?this.singleValue:void 0),t.complete()):t.error(new It.a)},n}(b.a);function Ge(t){return function(n){return n.lift(new We(t))}}var We=function(){function t(t){this.total=t}return t.prototype.call=function(t,n){return n.subscribe(new He(t,this.total))},t}(),He=function(t){function n(n,e){var r=t.call(this,n)||this;return r.total=e,r.count=0,r}return r.a(n,t),n.prototype._next=function(t){++this.count>this.total&&this.destination.next(t)},n}(b.a);function Xe(t){return function(n){return n.lift(new Ke(t))}}var Ke=function(){function t(t){if(this._skipCount=t,this._skipCount<0)throw new Ot.a}return t.prototype.call=function(t,n){return 0===this._skipCount?n.subscribe(new b.a(t)):n.subscribe(new Ze(t,this._skipCount))},t}(),Ze=function(t){function n(n,e){var r=t.call(this,n)||this;return r._skipCount=e,r._count=0,r._ring=new Array(e),r}return r.a(n,t),n.prototype._next=function(t){var n=this._skipCount,e=this._count++;if(e<n)this._ring[e]=t;else{var r=e%n,i=this._ring,o=i[r];i[r]=t,this.destination.next(o)}},n}(b.a);function Qe(t){return function(n){return n.lift(new $e(t))}}var $e=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,n){return n.subscribe(new Je(t,this.notifier))},t}(),Je=function(t){function n(n,e){var r=t.call(this,n)||this;r.hasValue=!1;var i=new F.a(r,void 0,void 0);r.add(i),r.innerSubscription=i;var u=Object(o.a)(r,e,void 0,void 0,i);return u!==i&&(r.add(u),r.innerSubscription=u),r}return r.a(n,t),n.prototype._next=function(n){this.hasValue&&t.prototype._next.call(this,n)},n.prototype.notifyNext=function(t,n,e,r,i){this.hasValue=!0,this.innerSubscription&&this.innerSubscription.unsubscribe()},n.prototype.notifyComplete=function(){},n}(i.a);function tr(t){return function(n){return n.lift(new nr(t))}}var nr=function(){function t(t){this.predicate=t}return t.prototype.call=function(t,n){return n.subscribe(new er(t,this.predicate))},t}(),er=function(t){function n(n,e){var r=t.call(this,n)||this;return r.predicate=e,r.skipping=!0,r.index=0,r}return r.a(n,t),n.prototype._next=function(t){var n=this.destination;this.skipping&&this.tryCallPredicate(t),this.skipping||n.next(t)},n.prototype.tryCallPredicate=function(t){try{var n=this.predicate(t,this.index++);this.skipping=Boolean(n)}catch(t){this.destination.error(t)}},n}(b.a);function rr(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t[t.length-1];return Object(m.a)(e)?(t.pop(),function(n){return Object(Y.a)(t,n,e)}):function(n){return Object(Y.a)(t,n)}}var ir=e("KQya"),or=e("/21U"),ur=function(t){function n(n,e,r){void 0===e&&(e=0),void 0===r&&(r=ir.a);var i=t.call(this)||this;return i.source=n,i.delayTime=e,i.scheduler=r,(!Object(or.a)(e)||e<0)&&(i.delayTime=0),r&&"function"==typeof r.schedule||(i.scheduler=ir.a),i}return r.a(n,t),n.create=function(t,e,r){return void 0===e&&(e=0),void 0===r&&(r=ir.a),new n(t,e,r)},n.dispatch=function(t){var n=t.source,e=t.subscriber;return this.add(n.subscribe(e))},n.prototype._subscribe=function(t){var e=this.delayTime,r=this.source;return this.scheduler.schedule(n.dispatch,e,{source:r,subscriber:t})},n}(bt.a);function cr(t,n){return void 0===n&&(n=0),function(e){return e.lift(new ar(t,n))}}var ar=function(){function t(t,n){this.scheduler=t,this.delay=n}return t.prototype.call=function(t,n){return new ur(n,this.delay,this.scheduler).subscribe(t)},t}();function sr(t,n){return"function"==typeof n?function(e){return e.pipe(sr((function(e,r){return Object(q.a)(t(e,r)).pipe(Object(Qt.a)((function(t,i){return n(e,t,r,i)})))})))}:function(n){return n.lift(new fr(t))}}var fr=function(){function t(t){this.project=t}return t.prototype.call=function(t,n){return n.subscribe(new lr(t,this.project))},t}(),lr=function(t){function n(n,e){var r=t.call(this,n)||this;return r.project=e,r.index=0,r}return r.a(n,t),n.prototype._next=function(t){var n,e=this.index++;try{n=this.project(t,e)}catch(t){return void this.destination.error(t)}this._innerSub(n,t,e)},n.prototype._innerSub=function(t,n,e){var r=this.innerSubscription;r&&r.unsubscribe();var i=new F.a(this,n,e),u=this.destination;u.add(i),this.innerSubscription=Object(o.a)(this,t,void 0,void 0,i),this.innerSubscription!==i&&u.add(this.innerSubscription)},n.prototype._complete=function(){var n=this.innerSubscription;n&&!n.closed||t.prototype._complete.call(this),this.unsubscribe()},n.prototype._unsubscribe=function(){this.innerSubscription=null},n.prototype.notifyComplete=function(n){this.destination.remove(n),this.innerSubscription=null,this.isStopped&&t.prototype._complete.call(this)},n.prototype.notifyNext=function(t,n,e,r,i){this.destination.next(n)},n}(i.a);function hr(){return sr(hn.a)}function dr(t,n){return n?sr((function(){return t}),n):sr((function(){return t}))}function pr(t){return function(n){return n.lift(new br(t))}}var br=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,n){var e=new vr(t),r=Object(o.a)(e,this.notifier);return r&&!e.seenValue?(e.add(r),n.subscribe(e)):e},t}(),vr=function(t){function n(n){var e=t.call(this,n)||this;return e.seenValue=!1,e}return r.a(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.seenValue=!0,this.complete()},n.prototype.notifyComplete=function(){},n}(i.a);function yr(t,n){return void 0===n&&(n=!1),function(e){return e.lift(new gr(t,n))}}var gr=function(){function t(t,n){this.predicate=t,this.inclusive=n}return t.prototype.call=function(t,n){return n.subscribe(new _r(t,this.predicate,this.inclusive))},t}(),_r=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.predicate=e,i.inclusive=r,i.index=0,i}return r.a(n,t),n.prototype._next=function(t){var n,e=this.destination;try{n=this.predicate(t,this.index++)}catch(t){return void e.error(t)}this.nextOrComplete(t,n)},n.prototype.nextOrComplete=function(t,n){var e=this.destination;Boolean(n)?e.next(t):(this.inclusive&&e.next(t),e.complete())},n}(b.a),mr=e("+umK"),xr=e("2Bdj");function wr(t,n,e){return function(r){return r.lift(new Mr(t,n,e))}}var Mr=function(){function t(t,n,e){this.nextOrObserver=t,this.error=n,this.complete=e}return t.prototype.call=function(t,n){return n.subscribe(new Sr(t,this.nextOrObserver,this.error,this.complete))},t}(),Sr=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o._tapNext=mr.a,o._tapError=mr.a,o._tapComplete=mr.a,o._tapError=r||mr.a,o._tapComplete=i||mr.a,Object(xr.a)(e)?(o._context=o,o._tapNext=e):e&&(o._context=e,o._tapNext=e.next||mr.a,o._tapError=e.error||mr.a,o._tapComplete=e.complete||mr.a),o}return r.a(n,t),n.prototype._next=function(t){try{this._tapNext.call(this._context,t)}catch(t){return void this.destination.error(t)}this.destination.next(t)},n.prototype._error=function(t){try{this._tapError.call(this._context,t)}catch(t){return void this.destination.error(t)}this.destination.error(t)},n.prototype._complete=function(){try{this._tapComplete.call(this._context)}catch(t){return void this.destination.error(t)}return this.destination.complete()},n}(b.a),Tr={leading:!0,trailing:!1};function Nr(t,n){return void 0===n&&(n=Tr),function(e){return e.lift(new Er(t,n.leading,n.trailing))}}var Er=function(){function t(t,n,e){this.durationSelector=t,this.leading=n,this.trailing=e}return t.prototype.call=function(t,n){return n.subscribe(new Cr(t,this.durationSelector,this.leading,this.trailing))},t}(),Cr=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o.destination=n,o.durationSelector=e,o._leading=r,o._trailing=i,o._hasValue=!1,o}return r.a(n,t),n.prototype._next=function(t){this._hasValue=!0,this._sendValue=t,this._throttled||(this._leading?this.send():this.throttle(t))},n.prototype.send=function(){var t=this._hasValue,n=this._sendValue;t&&(this.destination.next(n),this.throttle(n)),this._hasValue=!1,this._sendValue=null},n.prototype.throttle=function(t){var n=this.tryDurationSelector(t);n&&this.add(this._throttled=Object(o.a)(this,n))},n.prototype.tryDurationSelector=function(t){try{return this.durationSelector(t)}catch(t){return this.destination.error(t),null}},n.prototype.throttlingDone=function(){var t=this._throttled,n=this._trailing;t&&t.unsubscribe(),this._throttled=null,n&&this.send()},n.prototype.notifyNext=function(t,n,e,r,i){this.throttlingDone()},n.prototype.notifyComplete=function(){this.throttlingDone()},n}(i.a);function Ar(t,n,e){return void 0===n&&(n=s.a),void 0===e&&(e=Tr),function(r){return r.lift(new kr(t,n,e.leading,e.trailing))}}var kr=function(){function t(t,n,e,r){this.duration=t,this.scheduler=n,this.leading=e,this.trailing=r}return t.prototype.call=function(t,n){return n.subscribe(new Or(t,this.duration,this.scheduler,this.leading,this.trailing))},t}(),Or=function(t){function n(n,e,r,i,o){var u=t.call(this,n)||this;return u.duration=e,u.scheduler=r,u.leading=i,u.trailing=o,u._hasTrailingValue=!1,u._trailingValue=null,u}return r.a(n,t),n.prototype._next=function(t){this.throttled?this.trailing&&(this._trailingValue=t,this._hasTrailingValue=!0):(this.add(this.throttled=this.scheduler.schedule(jr,this.duration,{subscriber:this})),this.leading?this.destination.next(t):this.trailing&&(this._trailingValue=t,this._hasTrailingValue=!0))},n.prototype._complete=function(){this._hasTrailingValue?(this.destination.next(this._trailingValue),this.destination.complete()):this.destination.complete()},n.prototype.clearThrottle=function(){var t=this.throttled;t&&(this.trailing&&this._hasTrailingValue&&(this.destination.next(this._trailingValue),this._trailingValue=null,this._hasTrailingValue=!1),t.unsubscribe(),this.remove(t),this.throttled=null)},n}(b.a);function jr(t){t.subscriber.clearThrottle()}var Ir=e("lYZG");function Pr(t){return void 0===t&&(t=s.a),function(n){return Object(Ir.a)((function(){return n.pipe(On((function(n,e){var r=n.current;return{value:e,current:t.now(),last:r}}),{current:t.now(),value:void 0,last:void 0}),Object(Qt.a)((function(t){var n=t.current,e=t.last,r=t.value;return new Fr(r,n-e)})))}))}}var Fr=function(){return function(t,n){this.value=t,this.interval=n}}(),zr=e("3U0i");function Dr(t,n,e){return void 0===e&&(e=s.a),function(r){var i=st(t),o=i?+t-e.now():Math.abs(t);return r.lift(new Vr(o,i,n,e))}}var Vr=function(){function t(t,n,e,r){this.waitFor=t,this.absoluteTimeout=n,this.withObservable=e,this.scheduler=r}return t.prototype.call=function(t,n){return n.subscribe(new Rr(t,this.absoluteTimeout,this.waitFor,this.withObservable,this.scheduler))},t}(),Rr=function(t){function n(n,e,r,i,o){var u=t.call(this,n)||this;return u.absoluteTimeout=e,u.waitFor=r,u.withObservable=i,u.scheduler=o,u.action=null,u.scheduleTimeout(),u}return r.a(n,t),n.dispatchTimeout=function(t){var n=t.withObservable;t._unsubscribeAndRecycle(),t.add(Object(o.a)(t,n))},n.prototype.scheduleTimeout=function(){var t=this.action;t?this.action=t.schedule(this,this.waitFor):this.add(this.action=this.scheduler.schedule(n.dispatchTimeout,this.waitFor,this))},n.prototype._next=function(n){this.absoluteTimeout||this.scheduleTimeout(),t.prototype._next.call(this,n)},n.prototype._unsubscribe=function(){this.action=null,this.scheduler=null,this.withObservable=null},n}(i.a),Br=e("XlPw");function Ur(t,n){return void 0===n&&(n=s.a),Dr(t,Object(Br.a)(new zr.a),n)}function qr(t){return void 0===t&&(t=s.a),Object(Qt.a)((function(n){return new Lr(n,t.now())}))}var Lr=function(){return function(t,n){this.value=t,this.timestamp=n}}();function Yr(t,n,e){return 0===e?[n]:(t.push(n),t)}function Gr(){return Fn(Yr,[])}function Wr(t){return function(n){return n.lift(new Hr(t))}}var Hr=function(){function t(t){this.windowBoundaries=t}return t.prototype.call=function(t,n){var e=new Xr(t),r=n.subscribe(e);return r.closed||e.add(Object(o.a)(e,this.windowBoundaries)),r},t}(),Xr=function(t){function n(n){var e=t.call(this,n)||this;return e.window=new oe.a,n.next(e.window),e}return r.a(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.openWindow()},n.prototype.notifyError=function(t,n){this._error(t)},n.prototype.notifyComplete=function(t){this._complete()},n.prototype._next=function(t){this.window.next(t)},n.prototype._error=function(t){this.window.error(t),this.destination.error(t)},n.prototype._complete=function(){this.window.complete(),this.destination.complete()},n.prototype._unsubscribe=function(){this.window=null},n.prototype.openWindow=function(){var t=this.window;t&&t.complete();var n=this.destination,e=this.window=new oe.a;n.next(e)},n}(i.a);function Kr(t,n){return void 0===n&&(n=0),function(e){return e.lift(new Zr(t,n))}}var Zr=function(){function t(t,n){this.windowSize=t,this.startWindowEvery=n}return t.prototype.call=function(t,n){return n.subscribe(new Qr(t,this.windowSize,this.startWindowEvery))},t}(),Qr=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.destination=n,i.windowSize=e,i.startWindowEvery=r,i.windows=[new oe.a],i.count=0,n.next(i.windows[0]),i}return r.a(n,t),n.prototype._next=function(t){for(var n=this.startWindowEvery>0?this.startWindowEvery:this.windowSize,e=this.destination,r=this.windowSize,i=this.windows,o=i.length,u=0;u<o&&!this.closed;u++)i[u].next(t);var c=this.count-r+1;if(c>=0&&c%n==0&&!this.closed&&i.shift().complete(),++this.count%n==0&&!this.closed){var a=new oe.a;i.push(a),e.next(a)}},n.prototype._error=function(t){var n=this.windows;if(n)for(;n.length>0&&!this.closed;)n.shift().error(t);this.destination.error(t)},n.prototype._complete=function(){var t=this.windows;if(t)for(;t.length>0&&!this.closed;)t.shift().complete();this.destination.complete()},n.prototype._unsubscribe=function(){this.count=0,this.windows=null},n}(b.a);function $r(t){var n=s.a,e=null,r=Number.POSITIVE_INFINITY;return Object(m.a)(arguments[3])&&(n=arguments[3]),Object(m.a)(arguments[2])?n=arguments[2]:Object(or.a)(arguments[2])&&(r=arguments[2]),Object(m.a)(arguments[1])?n=arguments[1]:Object(or.a)(arguments[1])&&(e=arguments[1]),function(i){return i.lift(new Jr(t,e,r,n))}}var Jr=function(){function t(t,n,e,r){this.windowTimeSpan=t,this.windowCreationInterval=n,this.maxWindowSize=e,this.scheduler=r}return t.prototype.call=function(t,n){return n.subscribe(new ni(t,this.windowTimeSpan,this.windowCreationInterval,this.maxWindowSize,this.scheduler))},t}(),ti=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n._numberOfNextedValues=0,n}return r.a(n,t),n.prototype.next=function(n){this._numberOfNextedValues++,t.prototype.next.call(this,n)},Object.defineProperty(n.prototype,"numberOfNextedValues",{get:function(){return this._numberOfNextedValues},enumerable:!0,configurable:!0}),n}(oe.a),ni=function(t){function n(n,e,r,i,o){var u=t.call(this,n)||this;u.destination=n,u.windowTimeSpan=e,u.windowCreationInterval=r,u.maxWindowSize=i,u.scheduler=o,u.windows=[];var c=u.openWindow();if(null!==r&&r>=0){var a={subscriber:u,window:c,context:null},s={windowTimeSpan:e,windowCreationInterval:r,subscriber:u,scheduler:o};u.add(o.schedule(ii,e,a)),u.add(o.schedule(ri,r,s))}else{var f={subscriber:u,window:c,windowTimeSpan:e};u.add(o.schedule(ei,e,f))}return u}return r.a(n,t),n.prototype._next=function(t){for(var n=this.windows,e=n.length,r=0;r<e;r++){var i=n[r];i.closed||(i.next(t),i.numberOfNextedValues>=this.maxWindowSize&&this.closeWindow(i))}},n.prototype._error=function(t){for(var n=this.windows;n.length>0;)n.shift().error(t);this.destination.error(t)},n.prototype._complete=function(){for(var t=this.windows;t.length>0;){var n=t.shift();n.closed||n.complete()}this.destination.complete()},n.prototype.openWindow=function(){var t=new ti;return this.windows.push(t),this.destination.next(t),t},n.prototype.closeWindow=function(t){t.complete();var n=this.windows;n.splice(n.indexOf(t),1)},n}(b.a);function ei(t){var n=t.subscriber,e=t.windowTimeSpan,r=t.window;r&&n.closeWindow(r),t.window=n.openWindow(),this.schedule(t,e)}function ri(t){var n=t.windowTimeSpan,e=t.subscriber,r=t.scheduler,i=t.windowCreationInterval,o=e.openWindow(),u={action:this,subscription:null},c={subscriber:e,window:o,context:u};u.subscription=r.schedule(ii,n,c),this.add(u.subscription),this.schedule(t,i)}function ii(t){var n=t.subscriber,e=t.window,r=t.context;r&&r.action&&r.subscription&&r.action.remove(r.subscription),n.closeWindow(e)}function oi(t,n){return function(e){return e.lift(new ui(t,n))}}var ui=function(){function t(t,n){this.openings=t,this.closingSelector=n}return t.prototype.call=function(t,n){return n.subscribe(new ci(t,this.openings,this.closingSelector))},t}(),ci=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.openings=e,i.closingSelector=r,i.contexts=[],i.add(i.openSubscription=Object(o.a)(i,e,e)),i}return r.a(n,t),n.prototype._next=function(t){var n=this.contexts;if(n)for(var e=n.length,r=0;r<e;r++)n[r].window.next(t)},n.prototype._error=function(n){var e=this.contexts;if(this.contexts=null,e)for(var r=e.length,i=-1;++i<r;){var o=e[i];o.window.error(n),o.subscription.unsubscribe()}t.prototype._error.call(this,n)},n.prototype._complete=function(){var n=this.contexts;if(this.contexts=null,n)for(var e=n.length,r=-1;++r<e;){var i=n[r];i.window.complete(),i.subscription.unsubscribe()}t.prototype._complete.call(this)},n.prototype._unsubscribe=function(){var t=this.contexts;if(this.contexts=null,t)for(var n=t.length,e=-1;++e<n;){var r=t[e];r.window.unsubscribe(),r.subscription.unsubscribe()}},n.prototype.notifyNext=function(t,n,e,r,i){if(t===this.openings){var u=void 0;try{u=(0,this.closingSelector)(n)}catch(t){return this.error(t)}var c=new oe.a,a=new C.a,s={window:c,subscription:a};this.contexts.push(s);var f=Object(o.a)(this,u,s);f.closed?this.closeWindow(this.contexts.length-1):(f.context=s,a.add(f)),this.destination.next(c)}else this.closeWindow(this.contexts.indexOf(t))},n.prototype.notifyError=function(t){this.error(t)},n.prototype.notifyComplete=function(t){t!==this.openSubscription&&this.closeWindow(this.contexts.indexOf(t.context))},n.prototype.closeWindow=function(t){if(-1!==t){var n=this.contexts,e=n[t],r=e.window,i=e.subscription;n.splice(t,1),r.complete(),i.unsubscribe()}},n}(i.a);function ai(t){return function(n){return n.lift(new si(t))}}var si=function(){function t(t){this.closingSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new fi(t,this.closingSelector))},t}(),fi=function(t){function n(n,e){var r=t.call(this,n)||this;return r.destination=n,r.closingSelector=e,r.openWindow(),r}return r.a(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.openWindow(i)},n.prototype.notifyError=function(t,n){this._error(t)},n.prototype.notifyComplete=function(t){this.openWindow(t)},n.prototype._next=function(t){this.window.next(t)},n.prototype._error=function(t){this.window.error(t),this.destination.error(t),this.unsubscribeClosingNotification()},n.prototype._complete=function(){this.window.complete(),this.destination.complete(),this.unsubscribeClosingNotification()},n.prototype.unsubscribeClosingNotification=function(){this.closingNotification&&this.closingNotification.unsubscribe()},n.prototype.openWindow=function(t){void 0===t&&(t=null),t&&(this.remove(t),t.unsubscribe());var n=this.window;n&&n.complete();var e,r=this.window=new oe.a;this.destination.next(r);try{e=(0,this.closingSelector)()}catch(t){return this.destination.error(t),void this.window.error(t)}this.add(this.closingNotification=Object(o.a)(this,e))},n}(i.a);function li(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){var e;"function"==typeof t[t.length-1]&&(e=t.pop());var r=t;return n.lift(new hi(r,e))}}var hi=function(){function t(t,n){this.observables=t,this.project=n}return t.prototype.call=function(t,n){return n.subscribe(new di(t,this.observables,this.project))},t}(),di=function(t){function n(n,e,r){var i=t.call(this,n)||this;i.observables=e,i.project=r,i.toRespond=[];var u=e.length;i.values=new Array(u);for(var c=0;c<u;c++)i.toRespond.push(c);for(c=0;c<u;c++){var a=e[c];i.add(Object(o.a)(i,a,a,c))}return i}return r.a(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.values[e]=n;var o=this.toRespond;if(o.length>0){var u=o.indexOf(e);-1!==u&&o.splice(u,1)}},n.prototype.notifyComplete=function(){},n.prototype._next=function(t){if(0===this.toRespond.length){var n=[t].concat(this.values);this.project?this._tryProject(n):this.destination.next(n)}},n.prototype._tryProject=function(t){var n;try{n=this.project.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(i.a),pi=e("909l");function bi(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return n.lift.call(pi.b.apply(void 0,[n].concat(t)))}}function vi(t){return function(n){return n.lift(new pi.a(t))}}},awvh:function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(){function t(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,n){return n+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t}()},b7mW:function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(){function t(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}return t.prototype=Object.create(Error.prototype),t}()},dEwP:function(t,n,e){"use strict";e.d(n,"a",(function(){return o}));var r=e("F/XL"),i=e("Txjg");function o(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return Object(i.a)()(r.a.apply(void 0,t))}},dzgT:function(t,n,e){"use strict";e.d(n,"b",(function(){return f})),e.d(n,"a",(function(){return l}));var r=e("mrSG"),i=e("nkY7"),o=e("isby"),u=e("MGBS"),c=e("zotm"),a=e("IUTb"),s={};function f(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=null,r=null;return Object(i.a)(t[t.length-1])&&(r=t.pop()),"function"==typeof t[t.length-1]&&(e=t.pop()),1===t.length&&Object(o.a)(t[0])&&(t=t[0]),Object(a.a)(t,r).lift(new l(e))}var l=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new h(t,this.resultSelector))},t}(),h=function(t){function n(n,e){var r=t.call(this,n)||this;return r.resultSelector=e,r.active=0,r.values=[],r.observables=[],r}return r.a(n,t),n.prototype._next=function(t){this.values.push(s),this.observables.push(t)},n.prototype._complete=function(){var t=this.observables,n=t.length;if(0===n)this.destination.complete();else{this.active=n,this.toRespond=n;for(var e=0;e<n;e++){var r=t[e];this.add(Object(c.a)(this,r,r,e))}}},n.prototype.notifyComplete=function(t){0==(this.active-=1)&&this.destination.complete()},n.prototype.notifyNext=function(t,n,e,r,i){var o=this.values,u=o[e],c=this.toRespond?u===s?--this.toRespond:this.toRespond:0;o[e]=n,0===c&&(this.resultSelector?this._tryResultSelector(o):this.destination.next(o.slice()))},n.prototype._tryResultSelector=function(t){var n;try{n=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(u.a)},gI3B:function(t,n,e){"use strict";e.d(n,"a",(function(){return c}));var r=e("6blF"),i=e("T1DM"),o=e("/21U"),u=e("nkY7");function c(t,n,e){void 0===t&&(t=0);var c=-1;return Object(o.a)(n)?c=Number(n)<1?1:Number(n):Object(u.a)(n)&&(e=n),Object(u.a)(e)||(e=i.a),new r.a((function(n){var r=Object(o.a)(t)?t:+t-e.now();return e.schedule(a,r,{index:0,period:c,subscriber:n})}))}function a(t){var n=t.index,e=t.period,r=t.subscriber;if(r.next(n),!r.closed){if(-1===e)return r.complete();t.index=n+1,this.schedule(t,e)}}},h9Dq:function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=e("mrSG"),i=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r.pending=!1,r}return r.a(n,t),n.prototype.schedule=function(t,n){if(void 0===n&&(n=0),this.closed)return this;this.state=t;var e=this.id,r=this.scheduler;return null!=e&&(this.id=this.recycleAsyncId(r,e,n)),this.pending=!0,this.delay=n,this.id=this.id||this.requestAsyncId(r,this.id,n),this},n.prototype.requestAsyncId=function(t,n,e){return void 0===e&&(e=0),setInterval(t.flush.bind(t,this),e)},n.prototype.recycleAsyncId=function(t,n,e){if(void 0===e&&(e=0),null!==e&&this.delay===e&&!1===this.pending)return n;clearInterval(n)},n.prototype.execute=function(t,n){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var e=this._execute(t,n);if(e)return e;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(t,n){var e=!1,r=void 0;try{this.work(t)}catch(t){e=!0,r=!!t&&t||new Error(t)}if(e)return this.unsubscribe(),r},n.prototype._unsubscribe=function(){var t=this.id,n=this.scheduler,e=n.actions,r=e.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&e.splice(r,1),null!=t&&(this.id=this.recycleAsyncId(n,t,null)),this.delay=null},n}(function(t){function n(n,e){return t.call(this)||this}return r.a(n,t),n.prototype.schedule=function(t,n){return void 0===n&&(n=0),this},n}(e("pugT").a))},i4X3:function(t,n,e){"use strict";e.d(n,"a",(function(){return f}));var r=e("6blF"),i=e("pugT"),o=e("xTla");var u=e("JF+6"),c=e("En8+");var a=e("/WYv"),s=e("2ePl");function f(t,n){if(null!=t){if(function(t){return t&&"function"==typeof t[o.a]}(t))return function(t,n){return new r.a((function(e){var r=new i.a;return r.add(n.schedule((function(){var i=t[o.a]();r.add(i.subscribe({next:function(t){r.add(n.schedule((function(){return e.next(t)})))},error:function(t){r.add(n.schedule((function(){return e.error(t)})))},complete:function(){r.add(n.schedule((function(){return e.complete()})))}}))}))),r}))}(t,n);if(Object(a.a)(t))return function(t,n){return new r.a((function(e){var r=new i.a;return r.add(n.schedule((function(){return t.then((function(t){r.add(n.schedule((function(){e.next(t),r.add(n.schedule((function(){return e.complete()})))})))}),(function(t){r.add(n.schedule((function(){return e.error(t)})))}))}))),r}))}(t,n);if(Object(s.a)(t))return Object(u.a)(t,n);if(function(t){return t&&"function"==typeof t[c.a]}(t)||"string"==typeof t)return function(t,n){if(!t)throw new Error("Iterable cannot be null");return new r.a((function(e){var r,o=new i.a;return o.add((function(){r&&"function"==typeof r.return&&r.return()})),o.add(n.schedule((function(){r=t[c.a](),o.add(n.schedule((function(){if(!e.closed){var t,n;try{var i=r.next();t=i.value,n=i.done}catch(t){return void e.error(t)}n?e.complete():(e.next(t),this.schedule())}})))}))),o}))}(t,n)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}},iLxQ:function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=!1,i={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;r=t},get useDeprecatedSynchronousErrorHandling(){return r}}},isby:function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(){return Array.isArray||function(t){return t&&"number"==typeof t.length}}()},jFaF:function(t,n,e){"use strict";function r(t,n){function e(){return!e.pred.apply(e.thisArg,arguments)}return e.pred=t,e.thisArg=n,e}e.d(n,"a",(function(){return r}))},lYZG:function(t,n,e){"use strict";e.d(n,"a",(function(){return u}));var r=e("6blF"),i=e("0/uQ"),o=e("G5J1");function u(t){return new r.a((function(n){var e;try{e=t()}catch(t){return void n.error(t)}return(e?Object(i.a)(e):Object(o.b)()).subscribe(n)}))}},mChF:function(t,n,e){"use strict";function r(t){return t}e.d(n,"a",(function(){return r}))},mZXl:function(t,n,e){"use strict";e.d(n,"b",(function(){return u})),e.d(n,"a",(function(){return a}));var r=e("mrSG"),i=e("FFOo"),o=e("60iU");function u(t,n){return void 0===n&&(n=0),function(e){return e.lift(new c(t,n))}}var c=function(){function t(t,n){void 0===n&&(n=0),this.scheduler=t,this.delay=n}return t.prototype.call=function(t,n){return n.subscribe(new a(t,this.scheduler,this.delay))},t}(),a=function(t){function n(n,e,r){void 0===r&&(r=0);var i=t.call(this,n)||this;return i.scheduler=e,i.delay=r,i}return r.a(n,t),n.dispatch=function(t){var n=t.notification,e=t.destination;n.observe(e),this.unsubscribe()},n.prototype.scheduleMessage=function(t){this.destination.add(this.scheduler.schedule(n.dispatch,this.delay,new s(t,this.destination)))},n.prototype._next=function(t){this.scheduleMessage(o.a.createNext(t))},n.prototype._error=function(t){this.scheduleMessage(o.a.createError(t)),this.unsubscribe()},n.prototype._complete=function(){this.scheduleMessage(o.a.createComplete()),this.unsubscribe()},n}(i.a),s=function(){return function(t,n){this.notification=t,this.destination=n}}()},mrSG:function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(t,n)};function i(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}},nkY7:function(t,n,e){"use strict";function r(t){return t&&"function"==typeof t.schedule}e.d(n,"a",(function(){return r}))},p0ib:function(t,n,e){"use strict";e.d(n,"a",(function(){return c}));var r=e("6blF"),i=e("nkY7"),o=e("Zn8D"),u=e("IUTb");function c(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=Number.POSITIVE_INFINITY,c=null,a=t[t.length-1];return Object(i.a)(a)?(c=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(e=t.pop())):"number"==typeof a&&(e=t.pop()),null===c&&1===t.length&&t[0]instanceof r.a?t[0]:Object(o.a)(e)(Object(u.a)(t,c))}},psW0:function(t,n,e){"use strict";e.d(n,"a",(function(){return s}));var r=e("mrSG"),i=e("zotm"),o=e("MGBS"),u=e("rPjj"),c=e("67Y/"),a=e("0/uQ");function s(t,n,e){return void 0===e&&(e=Number.POSITIVE_INFINITY),"function"==typeof n?function(r){return r.pipe(s((function(e,r){return Object(a.a)(t(e,r)).pipe(Object(c.a)((function(t,i){return n(e,t,r,i)})))}),e))}:("number"==typeof n&&(e=n),function(n){return n.lift(new f(t,e))})}var f=function(){function t(t,n){void 0===n&&(n=Number.POSITIVE_INFINITY),this.project=t,this.concurrent=n}return t.prototype.call=function(t,n){return n.subscribe(new l(t,this.project,this.concurrent))},t}(),l=function(t){function n(n,e,r){void 0===r&&(r=Number.POSITIVE_INFINITY);var i=t.call(this,n)||this;return i.project=e,i.concurrent=r,i.hasCompleted=!1,i.buffer=[],i.active=0,i.index=0,i}return r.a(n,t),n.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},n.prototype._tryNext=function(t){var n,e=this.index++;try{n=this.project(t,e)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(n,t,e)},n.prototype._innerSub=function(t,n,e){var r=new u.a(this,n,e),o=this.destination;o.add(r);var c=Object(i.a)(this,t,void 0,void 0,r);c!==r&&o.add(c)},n.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},n.prototype.notifyNext=function(t,n,e,r,i){this.destination.next(n)},n.prototype.notifyComplete=function(t){var n=this.buffer;this.remove(t),this.active--,n.length>0?this._next(n.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},n}(o.a)},pugT:function(t,n,e){"use strict";e.d(n,"a",(function(){return c}));var r=e("isby"),i=e("McSo"),o=e("2Bdj"),u=e("awvh"),c=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}var n;return t.prototype.unsubscribe=function(){var n;if(!this.closed){var e=this._parentOrParents,c=this._unsubscribe,s=this._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,e instanceof t)e.remove(this);else if(null!==e)for(var f=0;f<e.length;++f){e[f].remove(this)}if(Object(o.a)(c))try{c.call(this)}catch(t){n=t instanceof u.a?a(t.errors):[t]}if(Object(r.a)(s)){f=-1;for(var l=s.length;++f<l;){var h=s[f];if(Object(i.a)(h))try{h.unsubscribe()}catch(t){n=n||[],t instanceof u.a?n=n.concat(a(t.errors)):n.push(t)}}}if(n)throw new u.a(n)}},t.prototype.add=function(n){var e=n;if(!n)return t.EMPTY;switch(typeof n){case"function":e=new t(n);case"object":if(e===this||e.closed||"function"!=typeof e.unsubscribe)return e;if(this.closed)return e.unsubscribe(),e;if(!(e instanceof t)){var r=e;(e=new t)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+n+" added to Subscription.")}var i=e._parentOrParents;if(null===i)e._parentOrParents=this;else if(i instanceof t){if(i===this)return e;e._parentOrParents=[i,this]}else{if(-1!==i.indexOf(this))return e;i.push(this)}var o=this._subscriptions;return null===o?this._subscriptions=[e]:o.push(e),e},t.prototype.remove=function(t){var n=this._subscriptions;if(n){var e=n.indexOf(t);-1!==e&&n.splice(e,1)}},t.EMPTY=((n=new t).closed=!0,n),t}();function a(t){return t.reduce((function(t,n){return t.concat(n instanceof u.a?n.errors:n)}),[])}},rPjj:function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=e("mrSG"),i=function(t){function n(n,e,r){var i=t.call(this)||this;return i.parent=n,i.outerValue=e,i.outerIndex=r,i.index=0,i}return r.a(n,t),n.prototype._next=function(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)},n.prototype._error=function(t){this.parent.notifyError(t,this),this.unsubscribe()},n.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},n}(e("FFOo").a)},siIJ:function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(){function t(n,e){void 0===e&&(e=t.now),this.SchedulerAction=n,this.now=e}return t.prototype.schedule=function(t,n,e){return void 0===n&&(n=0),new this.SchedulerAction(this,t).schedule(e,n)},t.now=function(){return Date.now()},t}()},svcd:function(t,n,e){"use strict";e.d(n,"a",(function(){return u}));var r=e("mrSG"),i=e("K9Ia"),o=e("pugT"),u=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.value=null,n.hasNext=!1,n.hasCompleted=!1,n}return r.a(n,t),n.prototype._subscribe=function(n){return this.hasError?(n.error(this.thrownError),o.a.EMPTY):this.hasCompleted&&this.hasNext?(n.next(this.value),n.complete(),o.a.EMPTY):t.prototype._subscribe.call(this,n)},n.prototype.next=function(t){this.hasCompleted||(this.value=t,this.hasNext=!0)},n.prototype.error=function(n){this.hasCompleted||t.prototype.error.call(this,n)},n.prototype.complete=function(){this.hasCompleted=!0,this.hasNext&&t.prototype.next.call(this,this.value),t.prototype.complete.call(this)},n}(i.a)},uMaO:function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=e("mrSG"),i=function(t){function n(n,e){var r=t.call(this)||this;return r.subject=n,r.subscriber=e,r.closed=!1,r}return r.a(n,t),n.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,n=t.observers;if(this.subject=null,n&&0!==n.length&&!t.isStopped&&!t.closed){var e=n.indexOf(this.subscriber);-1!==e&&n.splice(e,1)}}},n}(e("pugT").a)},xTla:function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}()},y3By:function(t,n,e){"use strict";e.d(n,"a",(function(){return i})),e.d(n,"b",(function(){return o}));var r=e("mChF");function i(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return o(t)}function o(t){return 0===t.length?r.a:1===t.length?t[0]:function(n){return t.reduce((function(t,n){return n(t)}),n)}}},yGWI:function(t,n,e){"use strict";e.d(n,"a",(function(){return o}));var r=e("mrSG"),i=e("FFOo");function o(){return function(t){return t.lift(new u(t))}}var u=function(){function t(t){this.connectable=t}return t.prototype.call=function(t,n){var e=this.connectable;e._refCount++;var r=new c(t,e),i=n.subscribe(r);return r.closed||(r.connection=e.connect()),i},t}(),c=function(t){function n(n,e){var r=t.call(this,n)||this;return r.connectable=e,r}return r.a(n,t),n.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var n=t._refCount;if(n<=0)this.connection=null;else if(t._refCount=n-1,n>1)this.connection=null;else{var e=this.connection,r=t._connection;this.connection=null,!r||e&&r!==e||r.unsubscribe()}}else this.connection=null},n}(i.a)},zo3G:function(t,n,e){"use strict";e.d(n,"a",(function(){return o}));var r=e("mrSG"),i=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r}return r.a(n,t),n.prototype.schedule=function(n,e){return void 0===e&&(e=0),e>0?t.prototype.schedule.call(this,n,e):(this.delay=e,this.state=n,this.scheduler.flush(this),this)},n.prototype.execute=function(n,e){return e>0||this.closed?t.prototype.execute.call(this,n,e):this._execute(n,e)},n.prototype.requestAsyncId=function(n,e,r){return void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0?t.prototype.requestAsyncId.call(this,n,e,r):n.flush(this)},n}(e("h9Dq").a),o=new(function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r.a(n,t),n}(e("CS9Q").a))(i)},zotm:function(t,n,e){"use strict";e.d(n,"a",(function(){return u}));var r=e("rPjj"),i=e("Fxb1"),o=e("6blF");function u(t,n,e,u,c){if(void 0===c&&(c=new r.a(t,e,u)),!c.closed)return n instanceof o.a?n.subscribe(c):Object(i.a)(n)(c)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,