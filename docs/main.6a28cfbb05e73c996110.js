!function(e){function t(t){for(var n,s,i=t[0],l=t[1],c=t[2],u=0,f=[];u<i.length;u++)s=i[u],Object.prototype.hasOwnProperty.call(a,s)&&a[s]&&f.push(a[s][0]),a[s]=0;for(n in l)Object.prototype.hasOwnProperty.call(l,n)&&(e[n]=l[n]);for(d&&d(t);f.length;)f.shift()();return o.push.apply(o,c||[]),r()}function r(){for(var e,t=0;t<o.length;t++){for(var r=o[t],n=!0,i=1;i<r.length;i++){var l=r[i];0!==a[l]&&(n=!1)}n&&(o.splice(t--,1),e=s(s.s=r[0]))}return e}var n={},a={0:0},o=[];function s(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=e,s.c=n,s.d=function(e,t,r){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(s.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)s.d(r,n,function(t){return e[t]}.bind(null,n));return r},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="";var i=window.webpackJsonp=window.webpackJsonp||[],l=i.push.bind(i);i.push=t,i=i.slice();for(var c=0;c<i.length;c++)t(i[c]);var d=l;o.push(["/7QA",1]),r()}({"/7QA":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r("DtyJ"),a=r("ahDk"),o=r("CO/c"),s=r("6luj"),i=localStorage.getItem("causal-flow-text"),l=document.getElementById("diagram-text");l.value=i;const c=n.fromEvent(l,"input").pipe(a.map(e=>e.target),a.map(e=>e.value),a.debounceTime(375)),d=c.pipe(a.startWith(i),a.map(o.toSizedNodeVertexPairs));c.subscribe(e=>{localStorage.setItem("causal-flow-text",e)}),s.init("#outlet",d)},"6luj":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.init=void 0;const n=r("VphZ"),a=r("ahDk");t.init=(e,t)=>{const r=n.select(e),o=r.append("g").attr("class","lines");let s;t.pipe(a.map(e=>{const t=e.nodes,r=t.map((e,t)=>({index:t,id:e}));return{sizedNodes:t,nodes:r,links:e.links.map(e=>({id:e.source,source:e.source,target:e.target,direction:e.edge}))}})).subscribe(e=>{const t=n.forceSimulation(e.nodes).force("link",n.forceLink(e.links).id(t=>e.sizedNodes[t.index].name||"unknown")).force("charge",n.forceManyBody()).force("center",n.forceCenter(450,250)).force("collision",n.forceCollide().radius(t=>e.sizedNodes[t.index].radius+80)),a=o.selectAll(".line").data(e.links).join("line").attr("stroke-opacity",1).attr("class",e=>e.direction+" line").attr("data-link",e=>{const t=e;return JSON.stringify(t)}).attr("marker-center","url(#triangle)").attr("stroke-width",2).attr("stroke-dasharray","5 5").attr("stroke-dashoffset",5).attr("stroke",e=>"increases"===e.direction?"green":"red").call(()=>{s||(s=n.interval(()=>{console.log("in interval"),r.selectAll(".line").each((function(e){n.select(this).attr("stroke-dasharray","5 5").attr("stroke-dashoffset",5).transition().ease(n.easeCircle).attr("stroke-dashoffset",0)}))},300))}),i=r.selectAll(".node").data(e.nodes).join("g").attr("class","node").call(()=>(e=>n.drag().on("start",t=>{n.event.active||e.alphaTarget(.3).restart(),t.fx=t.x,t.fy=t.y}).on("drag",e=>{e.fx=n.event.x,e.fy=n.event.y}).on("end",t=>{n.event.active||e.alphaTarget(0),t.fx=null,t.fy=null}))(t));i.selectAll("circle").remove(),i.selectAll("text").remove(),i.append("circle").attr("stroke","black").attr("stroke-width",1.5).attr("r",t=>(e=>e.radius+60)(e.sizedNodes[t.index])).attr("fill","white"),i.append("text").attr("text-anchor","middle").attr("alignment-baseline","central").text(t=>e.sizedNodes[t.index].name),t.on("tick",()=>{a.attr("x1",e=>e.source.x).attr("y1",e=>e.source.y).attr("x2",e=>e.target.x).attr("y2",e=>e.target.y),i.attr("transform",e=>`translate(${e.x}, ${e.y})`)})})}},"CO/c":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.toNodeVertexPairs=t.toSizedNodeVertexPairs=void 0;const n=e=>"+"===e||"-"===e,a=e=>{const t={edge:"",start:"",end:""};let r=!1,a=!0;return e.split("").forEach(e=>{(e=>'"'===e)(e)?r=!r:((e,t)=>!e&&n(t))(r,e)?(t.edge=e,a=!1):a?t.start+=e:t.end+=e}),(e=>""!==e.start&&""!==e.end&&n(e.edge))(t)?{edge:"+"===t.edge?"increases":"decreases",source:t.start.trim(),target:t.end.trim()}:null};t.toSizedNodeVertexPairs=e=>{const r=t.toNodeVertexPairs(e),n=r.reduce((e,t)=>(e[t.source]||(e[t.source]={name:t.source,radius:0}),e[t.target]||(e[t.target]={name:t.target,radius:0}),"increases"===t.edge&&(e[t.target].radius+=5),"decreases"===t.edge&&(e[t.target].radius-=5),e),{});return{nodes:Object.values(n),links:r}},t.toNodeVertexPairs=e=>e?e.split("\n").map(a).filter(e=>null!==e):[]}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,